#################
Tue May  4 03:05:29 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinarySearch/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinarySearch/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 4
Generating VC of $binarySearch_mulkeys
Verifying $binarySearch_mulkeys: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1: positive
Prover Time taken = 0.169032
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinarySearch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1225990
Verifying $binarySearch_mulkeys: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 1000 + (if b0001 then 0 else 1) * 1000 + (if b0002 then 0 else 1) * 1000 + (if b0003 then 0 else 1) * 1000 < 441
}
Prover Time taken = 0.054507
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinarySearch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1220430
Verifying $binarySearch_mulkeys: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 1000 + (if b0003 then 0 else 1) * 1000 < 441
}
Prover Time taken = 0.078601
Prover time = 0.30
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.62
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.76user 1.10system 0:01.97elapsed 94%CPU (0avgtext+0avgdata 43244maxresident)k
0inputs+88outputs (1major+13822minor)pagefaults 0swaps
FILE:AMD_SDK/BinarySearch/kernel2/kernel.bpl.ice2.bpl
#################
Tue May  4 03:05:31 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $binomial_options
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.292944
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1223220
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 35.253931
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1269180
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 18.357892
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1252550
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 16.479115
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1219400
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.355035
Prover time = 78.74
Number of prover queries = 5
Learner time = 0.50
Number of learner queries = 4
Total time: 79.35
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.25user 1.56system 1:20.86elapsed 3%CPU (0avgtext+0avgdata 64436maxresident)k
0inputs+152outputs (1major+29904minor)pagefaults 0swaps
FILE:AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
#################
Tue May  4 03:06:52 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $binomial_options
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.22691
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1309080
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 36.398301
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1210660
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 16.619737
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1200710
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 15.454294
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1218210
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.18693
Prover time = 77.89
Number of prover queries = 5
Learner time = 0.49
Number of learner queries = 4
Total time: 78.50
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.43user 1.64system 1:20.20elapsed 3%CPU (0avgtext+0avgdata 64460maxresident)k
0inputs+152outputs (1major+29564minor)pagefaults 0swaps
FILE:AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
#################
Tue May  4 03:08:13 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $box_filter_horizontal_local
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.094699
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186480
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1: positive
Prover Time taken = 5.048467
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1240240
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.771468
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1180700
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 4.685334
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189390
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.741827
Prover time = 13.34
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 13.92
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.98user 1.36system 0:15.31elapsed 15%CPU (0avgtext+0avgdata 50200maxresident)k
0inputs+136outputs (1major+22495minor)pagefaults 0swaps
FILE:AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
#################
Tue May  4 03:08:28 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $box_filter_horizontal_local
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.104332
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171470
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1: positive
Prover Time taken = 5.01025
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189790
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.799963
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193820
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 4.70213
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1207920
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.753518
Prover time = 13.37
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 13.95
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.97user 1.38system 0:15.34elapsed 15%CPU (0avgtext+0avgdata 50136maxresident)k
0inputs+144outputs (1major+21974minor)pagefaults 0swaps
FILE:AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
#################
Tue May  4 03:08:43 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $write_kernel
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170782
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186760
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.07434
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184140
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.151026
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191260
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.217544
Added Horn clause: 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184380
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.12776
Added Horn clause: 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1241760
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.261374
Prover time = 1.00
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 1.70
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.94user 1.35system 0:03.02elapsed 76%CPU (0avgtext+0avgdata 45532maxresident)k
0inputs+176outputs (1major+18395minor)pagefaults 0swaps
FILE:AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
#################
Tue May  4 03:08:46 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DCT/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DCT/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 4
Generating VC of $DCT
Verifying $DCT: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1: positive
Prover Time taken = 0.175
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DCT/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178520
Verifying $DCT: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 1000 + (if b0001 then 0 else 1) * 1000 + (if b0002 then 0 else 1) * 1000 + (if b0003 then 0 else 1) * 1000 < 441
}
Prover Time taken = 0.047629
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DCT/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1248560
Verifying $DCT: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 1000 + (if b0003 then 0 else 1) * 1000 < 441
}
Prover Time taken = 0.037719
Prover time = 0.26
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.58
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.79user 1.08system 0:01.93elapsed 97%CPU (0avgtext+0avgdata 43828maxresident)k
0inputs+88outputs (1major+14292minor)pagefaults 0swaps
FILE:AMD_SDK/DCT/kernel.bpl.ice2.bpl
#################
Tue May  4 03:08:48 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $dwtHaar1D
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1: positive
Prover Time taken = 0.198244
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199590
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1: positive
Prover Time taken = 0.510487
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1219840
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1: positive
Prover Time taken = 0.322483
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1185410
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.591891
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193920
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.382466
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183030
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.351756
Added Horn clause: 0 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182930
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.782231
Prover time = 3.14
Number of prover queries = 7
Learner time = 0.72
Number of learner queries = 6
Total time: 3.96
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.04user 1.49system 0:05.32elapsed 47%CPU (0avgtext+0avgdata 48088maxresident)k
0inputs+200outputs (1major+22133minor)pagefaults 0swaps
FILE:AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
#################
Tue May  4 03:08:53 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $histogram256
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170982
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1194620
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.075625
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199970
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.081059
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191930
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.079712
Added Horn clause: 1 && 2 && 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196570
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.085712
Added Horn clause: 1 && 2 && 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1211040
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.075482
Prover time = 0.57
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 1.30
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.94user 1.40system 0:02.66elapsed 88%CPU (0avgtext+0avgdata 47420maxresident)k
0inputs+176outputs (1major+20991minor)pagefaults 0swaps
FILE:AMD_SDK/Histogram/kernel.bpl.ice2.bpl
#################
Tue May  4 03:08:56 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $write_kernel
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168742
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191400
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.195245
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1198380
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.109715
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1263960
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.185821
Added Horn clause: 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1216500
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.174756
Added Horn clause: 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1267520
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.574321
Prover time = 1.41
Number of prover queries = 6
Learner time = 0.61
Number of learner queries = 5
Total time: 2.11
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.92user 1.39system 0:03.46elapsed 66%CPU (0avgtext+0avgdata 44456maxresident)k
0inputs+184outputs (1major+17314minor)pagefaults 0swaps
FILE:AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
#################
Tue May  4 03:09:00 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 16
Generating VC of $write_kernel
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171633
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1190280
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.086426
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1211460
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.086854
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1242890
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.170221
Added Horn clause: 0 && 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1203540
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.098637
Added Horn clause: 0 && 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191340
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.089083
Added Horn clause: 0 && 0 && 3 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1216720
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.108515
Added Horn clause: 0 && 0 && 3 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186620
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.127117
Prover time = 0.94
Number of prover queries = 8
Learner time = 0.84
Number of learner queries = 7
Total time: 1.90
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
1.11user 1.52system 0:03.24elapsed 81%CPU (0avgtext+0avgdata 48028maxresident)k
0inputs+240outputs (1major+22984minor)pagefaults 0swaps
FILE:AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
#################
Tue May  4 03:09:03 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $mmmKernel_local
Verifying $mmmKernel_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.178192
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1185720
Verifying $mmmKernel_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 69.42619
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1213740
Verifying $mmmKernel_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 78.802313
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1200670
Verifying $mmmKernel_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 5.065651
Prover time = 153.47
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 153.92
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.15user 1.46system 2:35.36elapsed 1%CPU (0avgtext+0avgdata 60140maxresident)k
0inputs+128outputs (1major+26036minor)pagefaults 0swaps
FILE:AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
#################
Tue May  4 03:11:38 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MersenneTwister/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MersenneTwister/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 5
Generating VC of $gaussianRand
Verifying $gaussianRand: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1: positive
Prover Time taken = 0.487971
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MersenneTwister/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1215330
Verifying $gaussianRand: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 2.514786
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MersenneTwister/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1181370
Verifying $gaussianRand: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.886951
Prover time = 3.89
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 4.23
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.84user 1.12system 0:05.64elapsed 34%CPU (0avgtext+0avgdata 49312maxresident)k
0inputs+80outputs (1major+18249minor)pagefaults 0swaps
FILE:AMD_SDK/MersenneTwister/kernel.bpl.ice2.bpl
#################
Tue May  4 03:11:44 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/NBody/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/NBody/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $nbody_sim
Verifying $nbody_sim: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169724
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/NBody/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1167990
Verifying $nbody_sim: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.007767
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/NBody/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179980
Verifying $nbody_sim: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.322461
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/NBody/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1201140
Verifying $nbody_sim: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.384484
Prover time = 1.88
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 2.32
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.89user 1.19system 0:03.72elapsed 56%CPU (0avgtext+0avgdata 47400maxresident)k
0inputs+112outputs (1major+18578minor)pagefaults 0swaps
FILE:AMD_SDK/NBody/kernel.bpl.ice2.bpl
#################
Tue May  4 03:11:48 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 88
Generating VC of $prefixSum
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.193055
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184440
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.507015
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179890
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.027788
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1185600
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.580791
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229160
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.837559
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1173990
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.754851
Added Horn clause: 3 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192190
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.611861
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1198780
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.261035
Added Horn clause: 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196640
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 < 441
}
Prover Time taken = 3.193321
Added Horn clause: 3 && 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193590
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.239004
Added Horn clause: 2 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1194040
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.091243
Prover time = 20.30
Number of prover queries = 11
Learner time = 1.19
Number of learner queries = 10
Total time: 21.76
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.49user 1.97system 0:23.15elapsed 15%CPU (0avgtext+0avgdata 56920maxresident)k
0inputs+424outputs (1major+34863minor)pagefaults 0swaps
FILE:AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
#################
Tue May  4 03:12:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/QuasiRandomSequence/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/QuasiRandomSequence/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 15
Generating VC of $QuasiRandomSequence
Verifying $QuasiRandomSequence: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.166399
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/QuasiRandomSequence/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1175480
Verifying $QuasiRandomSequence: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 < 441
}
Prover Time taken = 2.563721
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/QuasiRandomSequence/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1203010
Verifying $QuasiRandomSequence: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 < 441
}
Prover Time taken = 3.207135
Added Horn clause: 0 && 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/QuasiRandomSequence/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1266030
Verifying $QuasiRandomSequence: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 < 441
}
Prover Time taken = 1.271725
Prover time = 7.21
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 7.68
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.90user 1.21system 0:09.10elapsed 23%CPU (0avgtext+0avgdata 49292maxresident)k
0inputs+112outputs (1major+20264minor)pagefaults 0swaps
FILE:AMD_SDK/QuasiRandomSequence/kernel.bpl.ice2.bpl
#################
Tue May  4 03:12:20 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 30
Generating VC of $RecursiveGaussian_kernel
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.215363
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1400330
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.892503
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1213320
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.73287
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1190000
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 2.671142
Added Horn clause: 0 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1244220
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 2.40661
Added Horn clause: 0 && 2 && 0 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1218350
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 3.508418
Added Horn clause: 0 && 0 && 0 && 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1251930
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 3.385725
Added Horn clause: 0 && 0 && 0 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1242230
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.434448
Added Horn clause: 3 && 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192330
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 2.389429
Added Horn clause: 0 && 0 && 0 && 5 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1250250
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.174014
Prover time = 20.81
Number of prover queries = 10
Learner time = 1.12
Number of learner queries = 9
Total time: 22.19
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.63user 1.96system 0:23.69elapsed 15%CPU (0avgtext+0avgdata 60092maxresident)k
0inputs+312outputs (1major+40589minor)pagefaults 0swaps
FILE:AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
#################
Tue May  4 03:12:44 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Reduction/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Reduction/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $reduce
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.199159
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Reduction/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202270
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 2.366752
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Reduction/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1169450
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 5.744963
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Reduction/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1174970
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.405956
Prover time = 8.72
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 9.16
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.92user 1.23system 0:10.54elapsed 20%CPU (0avgtext+0avgdata 49632maxresident)k
0inputs+112outputs (1major+20214minor)pagefaults 0swaps
FILE:AMD_SDK/Reduction/kernel.bpl.ice2.bpl
#################
Tue May  4 03:12:54 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 88
Generating VC of $prefixSum
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.193044
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1250260
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.042719
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1226570
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.862218
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1201590
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.339857
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197020
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 3.295622
Added Horn clause: 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176120
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 3.271803
Added Horn clause: 3 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177590
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.446762
Added Horn clause: 3 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188390
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.689345
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187070
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.230934
Added Horn clause: 2 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186330
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.358803
Added Horn clause: 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1211850
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.035293
Added Horn clause: 0 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1215430
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.671386
Prover time = 24.44
Number of prover queries = 12
Learner time = 1.32
Number of learner queries = 11
Total time: 26.03
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.55user 2.09system 0:27.43elapsed 13%CPU (0avgtext+0avgdata 56620maxresident)k
0inputs+456outputs (1major+36177minor)pagefaults 0swaps
FILE:AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
#################
Tue May  4 03:13:22 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 88
Generating VC of $ScanLargeArrays
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.190795
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188550
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.354623
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189650
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.459752
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183730
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.827059
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196090
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.40281
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191810
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 3.431391
Added Horn clause: 2 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192690
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.385846
Added Horn clause: 2 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199710
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.73455
Added Horn clause: 2 && 5 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1206760
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.187364
Added Horn clause: 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1223370
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.360877
Added Horn clause: 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193270
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.647414
Added Horn clause: 2 && 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1228070
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.257513
Prover time = 22.24
Number of prover queries = 12
Learner time = 1.32
Number of learner queries = 11
Total time: 23.77
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.58user 2.12system 0:25.17elapsed 14%CPU (0avgtext+0avgdata 58232maxresident)k
0inputs+464outputs (1major+39790minor)pagefaults 0swaps
FILE:AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
#################
Tue May  4 03:13:47 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $writeKernel
Verifying $writeKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.174244
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193570
Verifying $writeKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.07642
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1209230
Verifying $writeKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.117245
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1225640
Verifying $writeKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.276054
Added Horn clause: 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193560
Verifying $writeKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.224129
Added Horn clause: 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186310
Verifying $writeKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.266844
Prover time = 1.13
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 1.83
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.02user 1.31system 0:03.17elapsed 73%CPU (0avgtext+0avgdata 46108maxresident)k
0inputs+176outputs (1major+19353minor)pagefaults 0swaps
FILE:AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
#################
Tue May  4 03:13:50 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 12
Generating VC of $noise_uniform
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.178945
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1219190
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.235553
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189880
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.358752
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197020
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.252436
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1195730
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.333229
Added Horn clause: 4 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192270
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.211472
Prover time = 1.57
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 2.26
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.97user 1.35system 0:03.61elapsed 64%CPU (0avgtext+0avgdata 45520maxresident)k
0inputs+176outputs (1major+19171minor)pagefaults 0swaps
FILE:AMD_SDK/URNG/kernel.bpl.ice2.bpl
#################
Tue May  4 03:13:54 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 12
Generating VC of $noise_uniform
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.177521
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191780
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.294612
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191000
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.189756
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1211120
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.438209
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199100
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.281132
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176910
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.363697
Prover time = 1.74
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 2.43
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.94user 1.38system 0:03.79elapsed 61%CPU (0avgtext+0avgdata 45580maxresident)k
0inputs+184outputs (1major+19527minor)pagefaults 0swaps
FILE:AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
#################
Tue May  4 03:13:57 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 68
Generating VC of $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171093
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1265580
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0002 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0004 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0027 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.292
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1206080
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0027 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.357828
Added Horn clause: 0 && 0 && 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1213900
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0027 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.242826
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199610
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.265705
Added Horn clause: 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1241820
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.347957
Added Horn clause: 1 && 0 && 0 && 2 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229520
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.34425
Added Horn clause: 0 && 0 && 0 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1243040
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.374653
Added Horn clause: 1 && 0 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1208840
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.409188
Added Horn clause: 0 && 7 && 6 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1208440
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.386757
Added Horn clause: 0 && 7 && 6 && 5 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1211010
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.43749
Added Horn clause: 0 && 7 && 6 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189060
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.325701
Added Horn clause: 0 && 7 && 0 && 5 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.0886690
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.642727
Added Horn clause: 0 && 7 && 0 && 9 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1204940
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.446397
Added Horn clause: 0 && 7 && 12 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1245160
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.486096
Added Horn clause: 0 && 7 && 0 && 9 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1207690
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.432993
Added Horn clause: 0 => 15
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229230
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 0.463423
Added Horn clause: 0 && 16 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Command exited with non-zero status 124
2.14user 2.58system 19:58.60elapsed 0%CPU (0avgtext+0avgdata 66252maxresident)k
0inputs+672outputs (1major+56123minor)pagefaults 0swaps
FILE:C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
#################
Tue May  4 03:33:56 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z19bitonic_sort_kernelPfjj
Verifying $_Z19bitonic_sort_kernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,0,1,1,1,1: positive
Prover Time taken = 0.172198
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1166250
Verifying $_Z19bitonic_sort_kernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.109735
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177880
Verifying $_Z19bitonic_sort_kernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,0,1,1,1,1,1: positive
Prover Time taken = 0.099978
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179810
Verifying $_Z19bitonic_sort_kernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.080979
Prover time = 0.46
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 0.90
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.81user 1.19system 0:02.23elapsed 89%CPU (0avgtext+0avgdata 44972maxresident)k
0inputs+120outputs (1major+16451minor)pagefaults 0swaps
FILE:C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
#################
Tue May  4 03:33:58 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z18convolution_tilingPKfS0_Pf
Verifying $_Z18convolution_tilingPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.178576
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179080
Verifying $_Z18convolution_tilingPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.048404
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1221400
Verifying $_Z18convolution_tilingPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.058731
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176740
Verifying $_Z18convolution_tilingPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.050765
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1230520
Verifying $_Z18convolution_tilingPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.103517
Prover time = 0.44
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 1.01
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.88user 1.28system 0:02.35elapsed 91%CPU (0avgtext+0avgdata 44812maxresident)k
0inputs+136outputs (1major+17281minor)pagefaults 0swaps
FILE:C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:01 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z18histo_merge_kernelPjS_
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171969
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176680
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 0.044468
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1207210
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.062941
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1203070
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.060279
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178460
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.067593
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179320
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.013796
Prover time = 0.42
Number of prover queries = 6
Learner time = 0.59
Number of learner queries = 5
Total time: 1.13
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.96user 1.32system 0:02.46elapsed 92%CPU (0avgtext+0avgdata 44808maxresident)k
0inputs+168outputs (1major+18120minor)pagefaults 0swaps
FILE:C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:03 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 14
Generating VC of $_Z13mxm_amp_tiledPKfS0_Pf
Verifying $_Z13mxm_amp_tiledPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167955
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192970
Verifying $_Z13mxm_amp_tiledPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0001 then 0 else 1) * 5000 + (if b0002 then 0 else 1) * 5000 + (if b0003 then 0 else 1) * 5000 + (if b0004 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0006 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0008 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 + (if b0013 then 0 else 1) * 5000 < 441
}
Prover Time taken = 0.085675
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177910
Verifying $_Z13mxm_amp_tiledPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0001 then 0 else 1) * 5000 + (if b0002 then 0 else 1) * 5000 + (if b0003 then 0 else 1) * 5000 + (if b0004 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 + (if b0013 then 0 else 1) * 5000 < 441
}
Prover Time taken = 0.066414
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1175900
Verifying $_Z13mxm_amp_tiledPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0001 then 0 else 1) * 5000 + (if b0003 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 + (if b0013 then 0 else 1) * 5000 < 441
}
Prover Time taken = 0.050638
Prover time = 0.37
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 0.81
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.83user 1.17system 0:02.14elapsed 93%CPU (0avgtext+0avgdata 45220maxresident)k
0inputs+112outputs (1major+16910minor)pagefaults 0swaps
FILE:C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:05 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z17box_muller_kernelPfS_i
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167753
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178960
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.056645
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1238510
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.07011
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1170450
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.047459
Added Horn clause: 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176480
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.059805
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189770
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.041794
Prover time = 0.44
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 1.14
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.91user 1.34system 0:02.45elapsed 92%CPU (0avgtext+0avgdata 44024maxresident)k
0inputs+176outputs (1major+16506minor)pagefaults 0swaps
FILE:C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:08 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 17
Generating VC of $_Z14rand_MT_kernelPfjjjji
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168363
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1200180
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.088367
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179880
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.077073
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1175220
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.075172
Added Horn clause: 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176970
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.080394
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187590
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.067967
Added Horn clause: 5 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1219940
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.032658
Prover time = 0.59
Number of prover queries = 7
Learner time = 0.71
Number of learner queries = 6
Total time: 1.41
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:5
verified

Boogie program verifier finished with 1 verified, 0 errors
1.00user 1.41system 0:02.72elapsed 88%CPU (0avgtext+0avgdata 43984maxresident)k
0inputs+208outputs (1major+17656minor)pagefaults 0swaps
FILE:C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:10 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 12
Generating VC of $_Z21tiling_implementationP6float4S0_S0_S0_iii
Verifying $_Z21tiling_implementationP6float4S0_S0_S0_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168771
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1168720
Verifying $_Z21tiling_implementationP6float4S0_S0_S0_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 2.698888
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1243300
Verifying $_Z21tiling_implementationP6float4S0_S0_S0_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 2.645637
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1260390
Verifying $_Z21tiling_implementationP6float4S0_S0_S0_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 2.085968
Added Horn clause: 2 && 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1216840
Verifying $_Z21tiling_implementationP6float4S0_S0_S0_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.820281
Prover time = 8.42
Number of prover queries = 5
Learner time = 0.49
Number of learner queries = 4
Total time: 9.00
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.11user 1.33system 0:10.53elapsed 23%CPU (0avgtext+0avgdata 62116maxresident)k
0inputs+144outputs (1major+26856minor)pagefaults 0swaps
FILE:C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:21 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage1/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage1/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z32transitive_closure_stage1_kernelPji
Verifying $_Z32transitive_closure_stage1_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.17385
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187930
Verifying $_Z32transitive_closure_stage1_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.079837
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191290
Verifying $_Z32transitive_closure_stage1_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.065914
Prover time = 0.32
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.64
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.76user 1.11system 0:01.97elapsed 94%CPU (0avgtext+0avgdata 44956maxresident)k
0inputs+80outputs (1major+15648minor)pagefaults 0swaps
FILE:C++AMP/TransitiveClosure/stage1/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:23 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z32transitive_closure_stage2_kernelPji
Verifying $_Z32transitive_closure_stage2_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.196265
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1225030
Verifying $_Z32transitive_closure_stage2_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.164138
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1218730
Verifying $_Z32transitive_closure_stage2_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.111067
Prover time = 0.47
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.81
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.85user 1.06system 0:02.18elapsed 87%CPU (0avgtext+0avgdata 46268maxresident)k
0inputs+80outputs (1major+16838minor)pagefaults 0swaps
FILE:C++AMP/TransitiveClosure/stage2/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:25 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage3/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage3/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z32transitive_closure_stage3_kernelPji
Verifying $_Z32transitive_closure_stage3_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.215228
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193630
Verifying $_Z32transitive_closure_stage3_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.111232
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1195750
Verifying $_Z32transitive_closure_stage3_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.075226
Prover time = 0.40
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.72
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.15system 0:02.08elapsed 91%CPU (0avgtext+0avgdata 46444maxresident)k
0inputs+88outputs (1major+16777minor)pagefaults 0swaps
FILE:C++AMP/TransitiveClosure/stage3/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:27 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/bitonicsort/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/bitonicsort/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 18
Generating VC of $_Z13BitonicKernelPi
Verifying $_Z13BitonicKernelPi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.174362
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/bitonicsort/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1235800
Verifying $_Z13BitonicKernelPi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.487761
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/bitonicsort/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1194060
Verifying $_Z13BitonicKernelPi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.375979
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/bitonicsort/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1213710
Verifying $_Z13BitonicKernelPi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.113611
Prover time = 1.15
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.61
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.85user 1.21system 0:02.96elapsed 69%CPU (0avgtext+0avgdata 47292maxresident)k
0inputs+112outputs (1major+18608minor)pagefaults 0swaps
FILE:CUDA20/bitonicsort/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:30 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 25
Generating VC of $_Z17histogram64KernelPjS_i
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169121
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1169940
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.414324
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197090
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.257183
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1200500
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.404247
Added Horn clause: 1 && 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1207180
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.478634
Added Horn clause: 1 && 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188990
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.641784
Added Horn clause: 1 && 2 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184260
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.742051
Added Horn clause: 1 && 0 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199500
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.4201
Prover time = 3.53
Number of prover queries = 8
Learner time = 0.83
Number of learner queries = 7
Total time: 4.51
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
1.17user 1.56system 0:05.88elapsed 46%CPU (0avgtext+0avgdata 51412maxresident)k
0inputs+240outputs (1major+27309minor)pagefaults 0swaps
FILE:CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:36 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z22mergeHistogram64KernelPjS_j
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168877
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184240
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 0.071488
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176620
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.071071
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1227600
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.072667
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188560
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.083506
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192450
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.032638
Prover time = 0.50
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 1.22
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.93user 1.36system 0:02.58elapsed 89%CPU (0avgtext+0avgdata 45220maxresident)k
0inputs+168outputs (1major+18171minor)pagefaults 0swaps
FILE:CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
#################
Tue May  4 03:34:39 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 90
Generating VC of $_Z14scanBestKernelPfS_i
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.194969
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184280
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0014 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.880507
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188550
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.473243
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178920
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.081832
Added Horn clause: 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1232710
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.068529
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179140
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.861693
Added Horn clause: 3 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192350
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 4.089974
Added Horn clause: 5 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186840
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.058299
Added Horn clause: 5 && 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1198850
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.861831
Added Horn clause: 5 && 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1195150
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 0.854579
Added Horn clause: 12 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1180520
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.426317
Added Horn clause: 3 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1247280
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 < 441
}
Prover Time taken = 4.182907
Prover time = 27.03
Number of prover queries = 12
Learner time = 1.32
Number of learner queries = 11
Total time: 28.56
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.61user 2.11system 0:29.95elapsed 12%CPU (0avgtext+0avgdata 58540maxresident)k
0inputs+456outputs (1major+37354minor)pagefaults 0swaps
FILE:CUDA20/scan/best/kernel.bpl.ice2.bpl
#################
Tue May  4 03:35:09 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z6kernelPfS_i
Verifying $_Z6kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.172566
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171760
Verifying $_Z6kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 0.156394
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1166770
Verifying $_Z6kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.135341
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1172970
Verifying $_Z6kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.139127
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176960
Verifying $_Z6kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.069025
Prover time = 0.67
Number of prover queries = 5
Learner time = 0.47
Number of learner queries = 4
Total time: 1.23
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.90user 1.25system 0:02.57elapsed 83%CPU (0avgtext+0avgdata 45824maxresident)k
0inputs+136outputs (1major+18346minor)pagefaults 0swaps
FILE:CUDA20/scan/naive/kernel.bpl.ice2.bpl
#################
Tue May  4 03:35:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 90
Generating VC of $_Z25scan_workefficient_kernelPfS_i
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.189044
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1185410
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0014 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.724427
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202680
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.33967
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1224190
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.62317
Added Horn clause: 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1195490
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.260355
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1194110
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.208119
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229420
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.26966
Added Horn clause: 3 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1211870
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.682852
Added Horn clause: 6 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1239130
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.311349
Added Horn clause: 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1249120
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.964411
Added Horn clause: 6 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1220030
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.304519
Added Horn clause: 6 && 13 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1204160
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.479593
Prover time = 27.36
Number of prover queries = 12
Learner time = 1.34
Number of learner queries = 11
Total time: 28.91
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.58user 2.09system 0:30.28elapsed 12%CPU (0avgtext+0avgdata 58532maxresident)k
0inputs+464outputs (1major+38542minor)pagefaults 0swaps
FILE:CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
#################
Tue May  4 03:35:41 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 91
Generating VC of $_Z1kPfPKfS_iiiii
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.218323
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196880
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0035 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.610028
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184830
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0035 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.106649
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182890
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0035 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.881535
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196890
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0035 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.309138
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187420
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0035 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.883747
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191940
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 4.455291
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192380
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.983641
Added Horn clause: 7 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1211450
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.211392
Added Horn clause: 7 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1210450
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.497232
Added Horn clause: 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197620
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.426029
Added Horn clause: 7 && 10 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176430
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.961725
Added Horn clause: 14 => 15
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192280
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.449813
Prover time = 32.99
Number of prover queries = 13
Learner time = 1.43
Number of learner queries = 12
Total time: 34.71
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.72user 2.21system 0:36.11elapsed 10%CPU (0avgtext+0avgdata 58560maxresident)k
0inputs+488outputs (1major+42275minor)pagefaults 0swaps
FILE:CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
#################
Tue May  4 03:36:18 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 44
Generating VC of $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.177702
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Total learner time was 00:00:00.1264470
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.307622
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Total learner time was 00:00:00.1204290
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.309948
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Total learner time was 00:00:00.1210930
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.240721
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Total learner time was 00:00:00.1170220
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.331999
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Total learner time was 00:00:00.1212310
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.288405
Added Horn clause: 5 && 0 && 0 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Command exited with non-zero status 124
1.05user 1.40system 19:58.63elapsed 0%CPU (0avgtext+0avgdata 53004maxresident)k
0inputs+160outputs (1major+22183minor)pagefaults 0swaps
FILE:CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
#################
Tue May  4 03:56:16 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z15transformKernelPfi
Verifying $_Z15transformKernelPfi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167861
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
Total learner time was 00:00:00.1161640
Verifying $_Z15transformKernelPfi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.168011
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
Total learner time was 00:00:00.1177690
Verifying $_Z15transformKernelPfi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.170006
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
Total learner time was 00:00:00.1172150
Verifying $_Z15transformKernelPfi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.077491
Prover time = 0.58
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 1.01
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.80user 1.19system 0:02.35elapsed 84%CPU (0avgtext+0avgdata 43840maxresident)k
0inputs+120outputs (1major+15746minor)pagefaults 0swaps
FILE:CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
#################
Tue May  4 03:56:19 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleMultiCopy/simpleMultiCopy.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleMultiCopy/simpleMultiCopy.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z9incKernelPiS_ii
Verifying $_Z9incKernelPiS_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.166269
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleMultiCopy/simpleMultiCopy.bpl.ice2.bpl
Total learner time was 00:00:00.1194490
Verifying $_Z9incKernelPiS_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.042582
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleMultiCopy/simpleMultiCopy.bpl.ice2.bpl
Total learner time was 00:00:00.1210120
Verifying $_Z9incKernelPiS_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.052002
Prover time = 0.26
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.58
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.73user 1.09system 0:01.88elapsed 97%CPU (0avgtext+0avgdata 43456maxresident)k
0inputs+80outputs (1major+14045minor)pagefaults 0swaps
FILE:CUDA50/0_Simple/simpleMultiCopy/simpleMultiCopy.bpl.ice2.bpl
#################
Tue May  4 03:56:20 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleStreams/simpleStreams.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleStreams/simpleStreams.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 7
Generating VC of $_Z10init_arrayPiS_i
Verifying $_Z10init_arrayPiS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1: positive
Prover Time taken = 0.166155
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleStreams/simpleStreams.bpl.ice2.bpl
Total learner time was 00:00:00.1191470
Verifying $_Z10init_arrayPiS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.021936
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleStreams/simpleStreams.bpl.ice2.bpl
Total learner time was 00:00:00.1205240
Verifying $_Z10init_arrayPiS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.018781
Prover time = 0.21
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.52
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.80user 1.18system 0:01.84elapsed 108%CPU (0avgtext+0avgdata 42324maxresident)k
0inputs+80outputs (1major+14954minor)pagefaults 0swaps
FILE:CUDA50/0_Simple/simpleStreams/simpleStreams.bpl.ice2.bpl
#################
Tue May  4 03:56:22 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 176
Generating VC of $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  false
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.221396
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1186960
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0001 then 0 else 1) * 70000 + (if b0003 then 0 else 1) * 70000 + (if b0005 then 0 else 1) * 70000 + (if b0007 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0011 then 0 else 1) * 70000 + (if b0012 then 0 else 1) * 70000 + (if b0013 then 0 else 1) * 70000 + (if b0014 then 0 else 1) * 70000 + (if b0015 then 0 else 1) * 70000 + (if b0016 then 0 else 1) * 70000 + (if b0017 then 0 else 1) * 70000 + (if b0018 then 0 else 1) * 70000 + (if b0019 then 0 else 1) * 70000 + (if b0020 then 0 else 1) * 70000 + (if b0021 then 0 else 1) * 70000 + (if b0022 then 0 else 1) * 70000 + (if b0023 then 0 else 1) * 70000 + (if b0024 then 0 else 1) * 70000 + (if b0025 then 0 else 1) * 70000 + (if b0026 then 0 else 1) * 70000 + (if b0027 then 0 else 1) * 70000 + (if b0028 then 0 else 1) * 70000 + (if b0029 then 0 else 1) * 70000 + (if b0030 then 0 else 1) * 70000 + (if b0031 then 0 else 1) * 70000 + (if b0032 then 0 else 1) * 70000 + (if b0033 then 0 else 1) * 70000 + (if b0034 then 0 else 1) * 70000 + (if b0035 then 0 else 1) * 70000 + (if b0036 then 0 else 1) * 70000 + (if b0037 then 0 else 1) * 70000 + (if b0038 then 0 else 1) * 70000 + (if b0039 then 0 else 1) * 70000 + (if b0040 then 0 else 1) * 70000 + (if b0041 then 0 else 1) * 70000 + (if b0042 then 0 else 1) * 70000 + (if b0043 then 0 else 1) * 70000 + (if b0044 then 0 else 1) * 70000 + (if b0045 then 0 else 1) * 70000 + (if b0046 then 0 else 1) * 70000 + (if b0047 then 0 else 1) * 70000 + (if b0048 then 0 else 1) * 70000 + (if b0049 then 0 else 1) * 70000 + (if b0050 then 0 else 1) * 70000 + (if b0051 then 0 else 1) * 70000 + (if b0052 then 0 else 1) * 70000 + (if b0053 then 0 else 1) * 70000 + (if b0054 then 0 else 1) * 70000 + (if b0055 then 0 else 1) * 70000 + (if b0056 then 0 else 1) * 70000 + (if b0057 then 0 else 1) * 70000 + (if b0058 then 0 else 1) * 70000 + (if b0059 then 0 else 1) * 70000 + (if b0060 then 0 else 1) * 70000 + (if b0061 then 0 else 1) * 70000 + (if b0062 then 0 else 1) * 70000 + (if b0063 then 0 else 1) * 70000 + (if b0064 then 0 else 1) * 70000 + (if b0065 then 0 else 1) * 70000 + (if b0066 then 0 else 1) * 70000 + (if b0067 then 0 else 1) * 70000 + (if b0068 then 0 else 1) * 70000 + (if b0069 then 0 else 1) * 70000 + (if b0070 then 0 else 1) * 70000 + (if b0071 then 0 else 1) * 70000 + (if b0072 then 0 else 1) * 70000 + (if b0073 then 0 else 1) * 70000 + (if b0074 then 0 else 1) * 70000 + (if b0075 then 0 else 1) * 70000 + (if b0076 then 0 else 1) * 70000 + (if b0077 then 0 else 1) * 70000 + (if b0078 then 0 else 1) * 70000 + (if b0079 then 0 else 1) * 70000 + (if b0080 then 0 else 1) * 70000 + (if b0081 then 0 else 1) * 70000 + (if b0082 then 0 else 1) * 70000 + (if b0083 then 0 else 1) * 70000 + (if b0084 then 0 else 1) * 70000 + (if b0085 then 0 else 1) * 70000 + (if b0086 then 0 else 1) * 70000 + (if b0087 then 0 else 1) * 70000 + (if b0088 then 0 else 1) * 70000 + (if b0089 then 0 else 1) * 70000 + (if b0090 then 0 else 1) * 70000 + (if b0091 then 0 else 1) * 70000 + (if b0092 then 0 else 1) * 70000 + (if b0093 then 0 else 1) * 70000 + (if b0094 then 0 else 1) * 70000 + (if b0095 then 0 else 1) * 70000 + (if b0096 then 0 else 1) * 70000 + (if b0097 then 0 else 1) * 70000 + (if b0098 then 0 else 1) * 70000 + (if b0099 then 0 else 1) * 70000 + (if b0100 then 0 else 1) * 70000 + (if b0101 then 0 else 1) * 70000 + (if b0102 then 0 else 1) * 70000 + (if b0103 then 0 else 1) * 70000 + (if b0104 then 0 else 1) * 70000 + (if b0105 then 0 else 1) * 70000 + (if b0106 then 0 else 1) * 70000 + (if b0107 then 0 else 1) * 70000 + (if b0108 then 0 else 1) * 70000 + (if b0109 then 0 else 1) * 70000 + (if b0110 then 0 else 1) * 70000 + (if b0111 then 0 else 1) * 70000 + (if b0112 then 0 else 1) * 70000 + (if b0113 then 0 else 1) * 70000 + (if b0114 then 0 else 1) * 70000 + (if b0115 then 0 else 1) * 70000 + (if b0116 then 0 else 1) * 70000 + (if b0117 then 0 else 1) * 70000 + (if b0118 then 0 else 1) * 70000 + (if b0119 then 0 else 1) * 70000 + (if b0120 then 0 else 1) * 70000 + (if b0121 then 0 else 1) * 70000 + (if b0122 then 0 else 1) * 70000 + (if b0123 then 0 else 1) * 70000 + (if b0124 then 0 else 1) * 70000 + (if b0125 then 0 else 1) * 70000 + (if b0126 then 0 else 1) * 70000 + (if b0127 then 0 else 1) * 70000 + (if b0128 then 0 else 1) * 70000 + (if b0129 then 0 else 1) * 70000 + (if b0130 then 0 else 1) * 70000 + (if b0131 then 0 else 1) * 70000 + (if b0132 then 0 else 1) * 70000 + (if b0133 then 0 else 1) * 70000 + (if b0134 then 0 else 1) * 70000 + (if b0135 then 0 else 1) * 70000 + (if b0136 then 0 else 1) * 70000 + (if b0137 then 0 else 1) * 70000 + (if b0138 then 0 else 1) * 70000 + (if b0139 then 0 else 1) * 70000 + (if b0140 then 0 else 1) * 70000 + (if b0141 then 0 else 1) * 70000 + (if b0142 then 0 else 1) * 70000 + (if b0143 then 0 else 1) * 70000 + (if b0144 then 0 else 1) * 70000 + (if b0145 then 0 else 1) * 70000 + (if b0146 then 0 else 1) * 70000 + (if b0147 then 0 else 1) * 70000 + (if b0148 then 0 else 1) * 70000 + (if b0149 then 0 else 1) * 70000 + (if b0150 then 0 else 1) * 70000 + (if b0151 then 0 else 1) * 70000 + (if b0152 then 0 else 1) * 70000 + (if b0153 then 0 else 1) * 70000 + (if b0154 then 0 else 1) * 70000 + (if b0155 then 0 else 1) * 70000 + (if b0156 then 0 else 1) * 70000 + (if b0157 then 0 else 1) * 70000 + (if b0158 then 0 else 1) * 70000 + (if b0159 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Added: my_inv:1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,0,0,0,1,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,0,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 5.34305
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1247980
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0005 then 0 else 1) * 70000 + (if b0007 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0011 then 0 else 1) * 70000 + (if b0012 then 0 else 1) * 70000 + (if b0015 then 0 else 1) * 70000 + (if b0018 then 0 else 1) * 70000 + (if b0020 then 0 else 1) * 70000 + (if b0023 then 0 else 1) * 70000 + (if b0025 then 0 else 1) * 70000 + (if b0030 then 0 else 1) * 70000 + (if b0033 then 0 else 1) * 70000 + (if b0039 then 0 else 1) * 70000 + (if b0044 then 0 else 1) * 70000 + (if b0045 then 0 else 1) * 70000 + (if b0046 then 0 else 1) * 70000 + (if b0047 then 0 else 1) * 70000 + (if b0048 then 0 else 1) * 70000 + (if b0052 then 0 else 1) * 70000 + (if b0053 then 0 else 1) * 70000 + (if b0054 then 0 else 1) * 70000 + (if b0056 then 0 else 1) * 70000 + (if b0058 then 0 else 1) * 70000 + (if b0063 then 0 else 1) * 70000 + (if b0064 then 0 else 1) * 70000 + (if b0065 then 0 else 1) * 70000 + (if b0069 then 0 else 1) * 70000 + (if b0070 then 0 else 1) * 70000 + (if b0073 then 0 else 1) * 70000 + (if b0074 then 0 else 1) * 70000 + (if b0076 then 0 else 1) * 70000 + (if b0080 then 0 else 1) * 70000 + (if b0081 then 0 else 1) * 70000 + (if b0082 then 0 else 1) * 70000 + (if b0083 then 0 else 1) * 70000 + (if b0085 then 0 else 1) * 70000 + (if b0089 then 0 else 1) * 70000 + (if b0090 then 0 else 1) * 70000 + (if b0093 then 0 else 1) * 70000 + (if b0098 then 0 else 1) * 70000 + (if b0101 then 0 else 1) * 70000 + (if b0104 then 0 else 1) * 70000 + (if b0106 then 0 else 1) * 70000 + (if b0109 then 0 else 1) * 70000 + (if b0110 then 0 else 1) * 70000 + (if b0112 then 0 else 1) * 70000 + (if b0114 then 0 else 1) * 70000 + (if b0115 then 0 else 1) * 70000 + (if b0116 then 0 else 1) * 70000 + (if b0119 then 0 else 1) * 70000 + (if b0120 then 0 else 1) * 70000 + (if b0121 then 0 else 1) * 70000 + (if b0130 then 0 else 1) * 70000 + (if b0132 then 0 else 1) * 70000 + (if b0134 then 0 else 1) * 70000 + (if b0136 then 0 else 1) * 70000 + (if b0137 then 0 else 1) * 70000 + (if b0139 then 0 else 1) * 70000 + (if b0143 then 0 else 1) * 70000 + (if b0147 then 0 else 1) * 70000 + (if b0148 then 0 else 1) * 70000 + (if b0150 then 0 else 1) * 70000 + (if b0151 then 0 else 1) * 70000 + (if b0153 then 0 else 1) * 70000 + (if b0159 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.429744
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1225120
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0005 then 0 else 1) * 70000 + (if b0007 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0012 then 0 else 1) * 70000 + (if b0015 then 0 else 1) * 70000 + (if b0018 then 0 else 1) * 70000 + (if b0023 then 0 else 1) * 70000 + (if b0025 then 0 else 1) * 70000 + (if b0046 then 0 else 1) * 70000 + (if b0048 then 0 else 1) * 70000 + (if b0052 then 0 else 1) * 70000 + (if b0054 then 0 else 1) * 70000 + (if b0063 then 0 else 1) * 70000 + (if b0065 then 0 else 1) * 70000 + (if b0069 then 0 else 1) * 70000 + (if b0081 then 0 else 1) * 70000 + (if b0083 then 0 else 1) * 70000 + (if b0090 then 0 else 1) * 70000 + (if b0098 then 0 else 1) * 70000 + (if b0104 then 0 else 1) * 70000 + (if b0106 then 0 else 1) * 70000 + (if b0109 then 0 else 1) * 70000 + (if b0114 then 0 else 1) * 70000 + (if b0116 then 0 else 1) * 70000 + (if b0130 then 0 else 1) * 70000 + (if b0134 then 0 else 1) * 70000 + (if b0148 then 0 else 1) * 70000 + (if b0150 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Added: my_inv:1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.498947
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1212470
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0012 then 0 else 1) * 70000 + (if b0015 then 0 else 1) * 70000 + (if b0023 then 0 else 1) * 70000 + (if b0054 then 0 else 1) * 70000 + (if b0063 then 0 else 1) * 70000 + (if b0098 then 0 else 1) * 70000 + (if b0148 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 11.137226
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1261020
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0012 then 0 else 1) * 70000 + (if b0148 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 5.643822
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1242040
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Prover Time taken = 9.573295
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1283420
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Prover Time taken = 9.024217
Added Horn clause: 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1211170
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Prover Time taken = 14.066545
Added Horn clause: 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1261610
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Prover Time taken = 5.162024
Added Horn clause: 12 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1285400
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Prover Time taken = 0.864853
Prover time = 78.97
Number of prover queries = 11
Learner time = 1.24
Number of learner queries = 10
Total time: 80.44
Number of positive examples:6
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
2.00user 2.48system 1:21.92elapsed 5%CPU (0avgtext+0avgdata 67332maxresident)k
0inputs+576outputs (1major+44035minor)pagefaults 0swaps
FILE:CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
#################
Tue May  4 03:57:44 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 190
Generating VC of $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  false
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.224504
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1270120
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0065 then 0 else 1) * 76000 + (if b0066 then 0 else 1) * 76000 + (if b0067 then 0 else 1) * 76000 + (if b0068 then 0 else 1) * 76000 + (if b0069 then 0 else 1) * 76000 + (if b0070 then 0 else 1) * 76000 + (if b0071 then 0 else 1) * 76000 + (if b0072 then 0 else 1) * 76000 + (if b0073 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0075 then 0 else 1) * 76000 + (if b0076 then 0 else 1) * 76000 + (if b0077 then 0 else 1) * 76000 + (if b0078 then 0 else 1) * 76000 + (if b0079 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0081 then 0 else 1) * 76000 + (if b0082 then 0 else 1) * 76000 + (if b0083 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0087 then 0 else 1) * 76000 + (if b0088 then 0 else 1) * 76000 + (if b0089 then 0 else 1) * 76000 + (if b0090 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0092 then 0 else 1) * 76000 + (if b0093 then 0 else 1) * 76000 + (if b0094 then 0 else 1) * 76000 + (if b0095 then 0 else 1) * 76000 + (if b0096 then 0 else 1) * 76000 + (if b0097 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0099 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,0,1,0,1,0,1,0,1,1,1,1,0,1,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 17.915136
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1210700
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0067 then 0 else 1) * 76000 + (if b0068 then 0 else 1) * 76000 + (if b0071 then 0 else 1) * 76000 + (if b0073 then 0 else 1) * 76000 + (if b0079 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0088 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0099 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 6.390403
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1194710
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0071 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0099 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.323303
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1202960
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.614638
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1207570
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 5.161005
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1222480
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 10.251803
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1216800
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 14.712405
Added Horn clause: 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1215890
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 4.786712
Added Horn clause: 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1230500
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 5.241922
Added Horn clause: 12 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1228490
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 0.81
Prover time = 74.43
Number of prover queries = 11
Learner time = 1.22
Number of learner queries = 10
Total time: 75.98
Number of positive examples:6
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
2.10user 2.46system 1:17.55elapsed 5%CPU (0avgtext+0avgdata 66460maxresident)k
0inputs+568outputs (1major+43352minor)pagefaults 0swaps
FILE:CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
#################
Tue May  4 03:59:02 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_x.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_x.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 13
Generating VC of $_Z18d_boxfilter_rgba_xPjiii
Verifying $_Z18d_boxfilter_rgba_xPjiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.278121
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_x.bpl.ice2.bpl
Total learner time was 00:00:00.1170100
Verifying $_Z18d_boxfilter_rgba_xPjiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0001 then 0 else 1) * 5000 + (if b0002 then 0 else 1) * 5000 + (if b0003 then 0 else 1) * 5000 + (if b0004 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0006 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0008 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 < 441
}
Prover Time taken = 0.804969
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_x.bpl.ice2.bpl
Total learner time was 00:00:00.1199330
Verifying $_Z18d_boxfilter_rgba_xPjiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0002 then 0 else 1) * 5000 + (if b0004 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0006 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0008 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 < 441
}
Prover Time taken = 0.488883
Prover time = 1.57
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 1.90
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.82user 1.16system 0:03.32elapsed 59%CPU (0avgtext+0avgdata 51344maxresident)k
0inputs+80outputs (1major+19204minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_x.bpl.ice2.bpl
#################
Tue May  4 03:59:05 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 27
Generating VC of $_Z18d_boxfilter_rgba_yPjS_iii
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.184538
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1225150
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.357647
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1214080
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 1.851305
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1216190
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.759517
Added Horn clause: 2 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1211940
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.542101
Added Horn clause: 2 && 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1182450
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 1.070021
Added Horn clause: 2 && 1 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1261700
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.726474
Added Horn clause: 2 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1185710
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 2.792762
Added Horn clause: 2 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1181760
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.390015
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1208640
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 1.222049
Added Horn clause: 2 && 9 && 4 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1208010
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.699155
Added Horn clause: 2 && 5 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1189610
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.549548
Added Horn clause: 6 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1183540
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.69272
Added Horn clause: 7 && 13 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1211710
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.610351
Added Horn clause: 2 && 15 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1187860
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.437499
Prover time = 12.89
Number of prover queries = 15
Learner time = 1.69
Number of learner queries = 14
Total time: 14.80
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:13
verified

Boogie program verifier finished with 1 verified, 0 errors
1.64user 2.17system 0:16.19elapsed 23%CPU (0avgtext+0avgdata 58904maxresident)k
0inputs+472outputs (1major+39793minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
#################
Tue May  4 03:59:21 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 27
Generating VC of $_Z20d_boxfilter_x_globalPfS_iii
Verifying $_Z20d_boxfilter_x_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.186494
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
Total learner time was 00:00:00.1188210
Verifying $_Z20d_boxfilter_x_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.148074
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
Total learner time was 00:00:00.1180780
Verifying $_Z20d_boxfilter_x_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.136263
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
Total learner time was 00:00:00.1168380
Verifying $_Z20d_boxfilter_x_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.176994
Added Horn clause: 1 && 2 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
Total learner time was 00:00:00.1181830
Verifying $_Z20d_boxfilter_x_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.296047
Prover time = 0.94
Number of prover queries = 5
Learner time = 0.47
Number of learner queries = 4
Total time: 1.52
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.90user 1.28system 0:02.85elapsed 76%CPU (0avgtext+0avgdata 46068maxresident)k
0inputs+144outputs (1major+18764minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
#################
Tue May  4 03:59:24 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_tex.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_tex.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z17d_boxfilter_x_texPfiii
Verifying $_Z17d_boxfilter_x_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168268
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_tex.bpl.ice2.bpl
Total learner time was 00:00:00.1181120
Verifying $_Z17d_boxfilter_x_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.106751
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_tex.bpl.ice2.bpl
Total learner time was 00:00:00.1188400
Verifying $_Z17d_boxfilter_x_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.155446
Prover time = 0.43
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.76
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.73user 1.12system 0:02.11elapsed 88%CPU (0avgtext+0avgdata 43924maxresident)k
0inputs+80outputs (1major+14515minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_x_tex.bpl.ice2.bpl
#################
Tue May  4 03:59:26 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 27
Generating VC of $_Z20d_boxfilter_y_globalPfS_iii
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169851
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1220000
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.120561
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1217540
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.104461
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1186260
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.152831
Added Horn clause: 1 && 2 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1201450
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.133245
Added Horn clause: 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1177720
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.152276
Added Horn clause: 1 && 2 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1219860
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.188805
Added Horn clause: 1 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1174550
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.117334
Prover time = 1.14
Number of prover queries = 8
Learner time = 0.84
Number of learner queries = 7
Total time: 2.13
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
1.07user 1.55system 0:03.45elapsed 76%CPU (0avgtext+0avgdata 47320maxresident)k
0inputs+248outputs (1major+22293minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
#################
Tue May  4 03:59:30 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z17d_boxfilter_y_texPfiii
Verifying $_Z17d_boxfilter_y_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169503
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
Total learner time was 00:00:00.1193760
Verifying $_Z17d_boxfilter_y_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.070232
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
Total learner time was 00:00:00.1195250
Verifying $_Z17d_boxfilter_y_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.091558
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
Total learner time was 00:00:00.1180820
Verifying $_Z17d_boxfilter_y_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.049714
Prover time = 0.38
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 0.82
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.80user 1.20system 0:02.14elapsed 93%CPU (0avgtext+0avgdata 43876maxresident)k
0inputs+112outputs (1major+15194minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
#################
Tue May  4 03:59:32 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z24convolutionColumnsKernelPfS_iii
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167921
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1175690
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.14102
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193880
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.153399
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1231120
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.171572
Added Horn clause: 1 && 2 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1180350
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.163396
Added Horn clause: 1 && 2 && 3 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202820
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.312371
Added Horn clause: 1 && 2 && 3 && 0 && 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1201960
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.203698
Added Horn clause: 1 && 2 && 3 && 0 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191030
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.206234
Added Horn clause: 1 && 2 && 3 && 0 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178730
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 3.490964
Prover time = 5.01
Number of prover queries = 9
Learner time = 0.96
Number of learner queries = 8
Total time: 6.19
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:7
verified

Boogie program verifier finished with 1 verified, 0 errors
1.22user 1.66system 0:07.56elapsed 38%CPU (0avgtext+0avgdata 53328maxresident)k
0inputs+272outputs (1major+29616minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
#################
Tue May  4 03:59:39 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z21convolutionRowsKernelPfS_iii
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170517
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179440
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.251278
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192290
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.157593
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1239510
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.169499
Added Horn clause: 1 && 2 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1211540
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.167114
Added Horn clause: 1 && 2 && 3 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1223070
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.258833
Added Horn clause: 1 && 2 && 3 && 0 && 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183680
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.157635
Added Horn clause: 1 && 2 && 3 && 0 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1174210
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.198205
Added Horn clause: 1 && 2 && 3 && 0 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192900
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 2.34873
Prover time = 3.88
Number of prover queries = 9
Learner time = 0.96
Number of learner queries = 8
Total time: 5.02
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:7
verified

Boogie program verifier finished with 1 verified, 0 errors
1.23user 1.64system 0:06.38elapsed 45%CPU (0avgtext+0avgdata 53196maxresident)k
0inputs+272outputs (1major+29936minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
#################
Tue May  4 03:59:46 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 17
Generating VC of $_Z14CUDAkernel1DCTPfiii
Verifying $_Z14CUDAkernel1DCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.175952
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
Total learner time was 00:00:00.1209200
Verifying $_Z14CUDAkernel1DCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.159563
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
Total learner time was 00:00:00.1216220
Verifying $_Z14CUDAkernel1DCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.170891
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
Total learner time was 00:00:00.1194250
Verifying $_Z14CUDAkernel1DCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.146981
Added Horn clause: 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
Total learner time was 00:00:00.1187360
Verifying $_Z14CUDAkernel1DCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.201259
Added Horn clause: 1 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
Total learner time was 00:00:00.1232780
Verifying $_Z14CUDAkernel1DCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.150745
Added Horn clause: 1 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
Total learner time was 00:00:00.1175730
Verifying $_Z14CUDAkernel1DCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.171687
Prover time = 1.18
Number of prover queries = 7
Learner time = 0.72
Number of learner queries = 6
Total time: 2.00
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:5
verified

Boogie program verifier finished with 1 verified, 0 errors
1.04user 1.48system 0:03.37elapsed 74%CPU (0avgtext+0avgdata 47752maxresident)k
0inputs+216outputs (1major+22018minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
#################
Tue May  4 03:59:49 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $_Z15CUDAkernel1IDCTPfiii
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.182009
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1174990
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.204984
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1219790
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.266406
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1213040
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.1973
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1193270
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.152377
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1256360
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.235698
Added Horn clause: 4 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1182150
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.215718
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1176250
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.152472
Added Horn clause: 4 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1186010
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.170155
Added Horn clause: 4 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1177390
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.222985
Added Horn clause: 4 && 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1174950
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.181484
Prover time = 2.18
Number of prover queries = 11
Learner time = 1.20
Number of learner queries = 10
Total time: 3.52
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:7
verified

Boogie program verifier finished with 1 verified, 0 errors
1.27user 1.85system 0:04.90elapsed 63%CPU (0avgtext+0avgdata 49996maxresident)k
0inputs+320outputs (1major+28394minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
#################
Tue May  4 03:59:54 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 35
Generating VC of $_Z9dwtHaar1DPfS_S_jji
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1: positive
Prover Time taken = 0.214702
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1167450
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0020 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0028 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1: positive
Prover Time taken = 0.856533
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1186190
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,1,1,1,1: positive
Prover Time taken = 1.314732
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1208150
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1: positive
Prover Time taken = 0.655391
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1178110
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1: positive
Prover Time taken = 0.395273
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1167080
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 0.539007
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1182940
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 0.530543
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1196200
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 0.622504
Added Horn clause: 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1199150
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 0.788248
Added Horn clause: 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1242980
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.52607
Prover time = 7.44
Number of prover queries = 10
Learner time = 1.07
Number of learner queries = 9
Total time: 8.75
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.35user 1.80system 0:10.12elapsed 31%CPU (0avgtext+0avgdata 50880maxresident)k
0inputs+280outputs (1major+28466minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
#################
Tue May  4 04:00:04 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 28
Generating VC of $_Z18histogram256KernelPjS_j
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167628
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1157500
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.451987
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1178940
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.657817
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1178130
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.463417
Added Horn clause: 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1197220
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.715649
Added Horn clause: 1 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1210750
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 1.202362
Added Horn clause: 1 && 3 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1185850
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.729203
Added Horn clause: 1 && 0 && 0 && 0 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1182010
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.611955
Added Horn clause: 1 && 2 && 6 && 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1180730
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.812852
Added Horn clause: 1 && 3 && 0 && 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1181240
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 1.162878
Added Horn clause: 1 && 0 && 7 && 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1205610
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 2.012519
Prover time = 8.99
Number of prover queries = 11
Learner time = 1.19
Number of learner queries = 10
Total time: 10.36
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.30user 1.87system 0:11.71elapsed 27%CPU (0avgtext+0avgdata 53996maxresident)k
0inputs+336outputs (1major+33171minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
#################
Tue May  4 04:00:16 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z23mergeHistogram256KernelPjS_j
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.17141
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1195110
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 0.051731
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187730
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.07305
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179800
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.074757
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1223030
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.075262
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178460
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.040749
Prover time = 0.49
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 1.21
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.92user 1.37system 0:02.56elapsed 89%CPU (0avgtext+0avgdata 45136maxresident)k
0inputs+168outputs (1major+18112minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
#################
Tue May  4 04:00:18 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z22mergeHistogram64KernelPjS_j
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.177073
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1209260
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 0.067847
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202280
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.07374
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183130
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.062328
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1208270
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.081086
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199260
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.040807
Prover time = 0.50
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 1.20
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.95user 1.34system 0:02.52elapsed 91%CPU (0avgtext+0avgdata 44836maxresident)k
0inputs+168outputs (1major+18125minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
#################
Tue May  4 04:00:21 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/imageDenoising/imageDenoising_nlm2_kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/imageDenoising/imageDenoising_nlm2_kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z4NLM2Pjiiff
Verifying $_Z4NLM2Pjiiff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.311095
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/imageDenoising/imageDenoising_nlm2_kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1217050
Verifying $_Z4NLM2Pjiiff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.324301
Prover time = 0.64
Number of prover queries = 2
Learner time = 0.12
Number of learner queries = 1
Total time: 0.84
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:0
verified

Boogie program verifier finished with 1 verified, 0 errors
0.76user 1.03system 0:02.25elapsed 80%CPU (0avgtext+0avgdata 50664maxresident)k
0inputs+48outputs (1major+16709minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/imageDenoising/imageDenoising_nlm2_kernel.bpl.ice2.bpl
#################
Tue May  4 04:00:23 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 28
Generating VC of $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff
Verifying $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.250959
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1173480
Verifying $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 17.737307
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1219250
Verifying $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 12.093455
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1264280
Verifying $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 46.179267
Added Horn clause: 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1188450
Verifying $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 47.502369
Added Horn clause: 0 && 0 && 0 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1183900
Verifying $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 19.449629
Added Horn clause: 0 && 0 && 0 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
Command exited with non-zero status 124
1.62user 1.66system 19:58.69elapsed 0%CPU (0avgtext+0avgdata 71692maxresident)k
0inputs+216outputs (1major+33673minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
#################
Tue May  4 04:20:22 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 28
Generating VC of $_Z22d_simpleRecursive_rgbaPjS_iif
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.182067
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1177520
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 6.328753
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1220090
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 7.354355
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1229210
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 18.650044
Added Horn clause: 0 && 0 && 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1217510
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 42.960667
Added Horn clause: 0 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1207390
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 17.796086
Added Horn clause: 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1187510
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 20.959681
Added Horn clause: 0 && 0 && 0 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1196150
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 7.233987
Added Horn clause: 0 && 0 && 0 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1190470
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 9.122699
Added Horn clause: 0 && 0 && 0 && 6 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1239010
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 1.988799
Prover time = 132.58
Number of prover queries = 10
Learner time = 1.09
Number of learner queries = 9
Total time: 133.85
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.73user 1.90system 2:15.28elapsed 2%CPU (0avgtext+0avgdata 65624maxresident)k
0inputs+328outputs (1major+41840minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
#################
Tue May  4 04:22:37 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z14SobelCopyImagePhjiif
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.166304
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1172040
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.193873
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1169760
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.696833
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1166660
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.936101
Prover time = 1.99
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 2.45
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.87user 1.15system 0:03.81elapsed 53%CPU (0avgtext+0avgdata 45500maxresident)k
0inputs+112outputs (1major+17071minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
#################
Tue May  4 04:22:41 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $_Z11SobelSharedP6uchar4tssssf
Verifying $_Z11SobelSharedP6uchar4tssssf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170351
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
Total learner time was 00:00:00.1191750
Verifying $_Z11SobelSharedP6uchar4tssssf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 15.463468
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
Total learner time was 00:00:00.1199990
Verifying $_Z11SobelSharedP6uchar4tssssf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 6.000724
Added Horn clause: 0 && 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
Total learner time was 00:00:00.1178640
Verifying $_Z11SobelSharedP6uchar4tssssf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 4.719918
Added Horn clause: 1 && 0 && 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
Total learner time was 00:00:00.1215730
Verifying $_Z11SobelSharedP6uchar4tssssf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 5.452023
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
Total learner time was 00:00:00.1199450
Verifying $_Z11SobelSharedP6uchar4tssssf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 16.774851
Prover time = 48.58
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 49.31
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.23user 1.51system 0:50.79elapsed 5%CPU (0avgtext+0avgdata 61976maxresident)k
0inputs+184outputs (1major+31687minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
#################
Tue May  4 04:23:32 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z8SobelTexPhjiif
Verifying $_Z8SobelTexPhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.16787
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
Total learner time was 00:00:00.1186780
Verifying $_Z8SobelTexPhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.463995
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
Total learner time was 00:00:00.1178910
Verifying $_Z8SobelTexPhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.554152
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
Total learner time was 00:00:00.1174400
Verifying $_Z8SobelTexPhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.933548
Prover time = 2.12
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 2.56
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.88user 1.21system 0:03.95elapsed 53%CPU (0avgtext+0avgdata 51368maxresident)k
0inputs+120outputs (1major+20626minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
#################
Tue May  4 04:23:36 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 48
Generating VC of $_Z21stereoDisparityKernelPjS_S_iiii
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.179485
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1174170
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 19000 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0010 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0012 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0015 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0017 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.272797
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1193230
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0010 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0012 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0015 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0017 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.805208
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1206460
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0015 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0017 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.575264
Added Horn clause: 0 && 2 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1186260
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.419769
Added Horn clause: 1 && 2 && 3 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1234590
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.686522
Added Horn clause: 0 && 2 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1226650
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.475912
Added Horn clause: 1 && 2 && 3 && 0 && 4 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1187420
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.552837
Added Horn clause: 0 && 2 && 3 && 0 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1178320
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.369904
Added Horn clause: 0 && 2 && 3 && 0 && 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1178330
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.825534
Added Horn clause: 0 && 5 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1175200
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.712366
Added Horn clause: 1 && 2 && 3 && 8 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1180520
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.772268
Added Horn clause: 0 && 2 && 3 && 8 && 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1216010
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.407475
Added Horn clause: 0 && 2 && 3 && 8 && 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1182550
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.700953
Added Horn clause: 1 && 2 && 3 && 8 && 12 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1184400
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.313766
Added Horn clause: 13 && 2 && 3 && 8 && 12 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1228970
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.02638
Added Horn clause: 15 && 2 && 3 && 8 && 7 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1252250
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.69132
Added Horn clause: 14 && 2 && 3 && 8 && 12 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1202180
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.417576
Added Horn clause: 15 && 2 && 3 && 8 && 12 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1242370
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.644242
Added Horn clause: 15 && 2 && 3 && 8 && 12 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1210190
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 < 441
}
Prover Time taken = 0.950959
Added Horn clause: 14 && 2 && 3 && 8 && 12 => 20
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1193430
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0005 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.69042
Prover time = 13.49
Number of prover queries = 21
Learner time = 2.40
Number of learner queries = 20
Total time: 16.30
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:18
verified

Boogie program verifier finished with 1 verified, 0 errors
2.31user 2.86system 0:17.74elapsed 29%CPU (0avgtext+0avgdata 66300maxresident)k
0inputs+648outputs (1major+67138minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
#################
Tue May  4 04:23:54 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 70
Generating VC of $_Z21binomialOptionsKernelP13__TOptionDataPfS1_
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.177125
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1165490
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0002 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0004 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0009 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0011 then 0 else 1) * 28000 + (if b0012 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0014 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0016 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0018 then 0 else 1) * 28000 + (if b0019 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0021 then 0 else 1) * 28000 + (if b0022 then 0 else 1) * 28000 + (if b0023 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0029 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0047 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0056 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0064 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0066 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 0.267326
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1224690
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0009 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0011 then 0 else 1) * 28000 + (if b0012 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0014 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0016 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0018 then 0 else 1) * 28000 + (if b0019 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0021 then 0 else 1) * 28000 + (if b0022 then 0 else 1) * 28000 + (if b0023 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0029 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0047 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0056 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0064 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0066 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 0.427038
Added Horn clause: 0 && 0 && 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1203760
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0009 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0011 then 0 else 1) * 28000 + (if b0012 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0014 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0016 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0018 then 0 else 1) * 28000 + (if b0019 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0022 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0029 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0047 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0056 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0064 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0066 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 0.357159
Added Horn clause: 0 && 0 && 0 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1209340
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0009 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0011 then 0 else 1) * 28000 + (if b0012 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0014 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0016 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0019 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0022 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0029 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0047 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0056 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0064 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0066 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 0.25422
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1188430
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0009 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0011 then 0 else 1) * 28000 + (if b0012 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0014 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0016 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0019 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0022 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0047 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0056 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0064 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0066 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 0.518098
Added Horn clause: 0 && 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1241200
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0009 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0011 then 0 else 1) * 28000 + (if b0012 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0014 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0016 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0019 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0022 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0056 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0064 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0066 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 0.415331
Added Horn clause: 0 && 0 && 0 && 3 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1219450
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0009 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0011 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0019 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0022 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0056 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0064 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0066 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 0.339768
Added Horn clause: 0 && 0 && 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Command exited with non-zero status 124
1.33user 1.66system 19:58.65elapsed 0%CPU (0avgtext+0avgdata 57804maxresident)k
0inputs+320outputs (1major+31550minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
#################
Tue May  4 04:43:52 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z15BlackScholesGPUPfS_S_S_S_ffi
Verifying $_Z15BlackScholesGPUPfS_S_S_S_ffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167619
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
Total learner time was 00:00:00.1166410
Verifying $_Z15BlackScholesGPUPfS_S_S_S_ffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.230772
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
Total learner time was 00:00:00.1184000
Verifying $_Z15BlackScholesGPUPfS_S_S_S_ffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.267277
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
Total learner time was 00:00:00.1190160
Verifying $_Z15BlackScholesGPUPfS_S_S_S_ffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.324862
Added Horn clause: 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
Total learner time was 00:00:00.1177980
Verifying $_Z15BlackScholesGPUPfS_S_S_S_ffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.209108
Prover time = 2.20
Number of prover queries = 5
Learner time = 0.47
Number of learner queries = 4
Total time: 2.78
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.89user 1.25system 0:04.12elapsed 52%CPU (0avgtext+0avgdata 44920maxresident)k
0inputs+152outputs (1major+17428minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
#################
Tue May  4 04:43:56 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 101
Generating VC of $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.202363
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1171320
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0054 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0057 then 0 else 1) * 40000 + (if b0058 then 0 else 1) * 40000 + (if b0059 then 0 else 1) * 40000 + (if b0060 then 0 else 1) * 40000 + (if b0061 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0063 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0065 then 0 else 1) * 40000 + (if b0066 then 0 else 1) * 40000 + (if b0067 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0069 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 39.181251
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1227440
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0054 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0057 then 0 else 1) * 40000 + (if b0058 then 0 else 1) * 40000 + (if b0059 then 0 else 1) * 40000 + (if b0060 then 0 else 1) * 40000 + (if b0061 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0063 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0065 then 0 else 1) * 40000 + (if b0066 then 0 else 1) * 40000 + (if b0067 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0069 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 61.351836
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1253470
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0054 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0057 then 0 else 1) * 40000 + (if b0058 then 0 else 1) * 40000 + (if b0059 then 0 else 1) * 40000 + (if b0060 then 0 else 1) * 40000 + (if b0061 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0063 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0065 then 0 else 1) * 40000 + (if b0066 then 0 else 1) * 40000 + (if b0067 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0069 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 38.917005
Added Horn clause: 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1207890
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0058 then 0 else 1) * 40000 + (if b0061 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0063 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0067 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 49.768332
Added Horn clause: 3 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1200580
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 48.636316
Added Horn clause: 3 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1190560
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 16.096425
Added Horn clause: 3 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1190810
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 54.188794
Added Horn clause: 3 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1224850
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 72.14519
Added Horn clause: 3 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1235390
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 39.151925
Added Horn clause: 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1256050
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 87.813265
Added Horn clause: 3 && 12 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1199410
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 21.146099
Added Horn clause: 3 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1205360
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 17.338853
Added Horn clause: 3 => 15
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1207500
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 14.189851
Added Horn clause: 3 && 16 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1209900
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 27.676836
Added Horn clause: 3 && 18 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1200270
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 27.779182
Prover time = 615.58
Number of prover queries = 16
Learner time = 1.82
Number of learner queries = 15
Total time: 617.88
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:12
verified

Boogie program verifier finished with 1 verified, 0 errors
4.26user 3.46system 10:19.66elapsed 1%CPU (0avgtext+0avgdata 84992maxresident)k
0inputs+696outputs (1major+89366minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
#################
Tue May  4 04:54:16 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 18
Generating VC of $_Z16inverseCNDKernelPfPjj
Verifying $_Z16inverseCNDKernelPfPjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171095
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178400
Verifying $_Z16inverseCNDKernelPfPjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.1499
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177110
Verifying $_Z16inverseCNDKernelPfPjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.149081
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1198460
Verifying $_Z16inverseCNDKernelPfPjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.269652
Prover time = 0.74
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.19
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.87user 1.16system 0:02.54elapsed 80%CPU (0avgtext+0avgdata 45616maxresident)k
0inputs+112outputs (1major+17840minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
#################
Tue May  4 04:54:19 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 12
Generating VC of $_Z26quasirandomGeneratorKernelPfjj
Verifying $_Z26quasirandomGeneratorKernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,0,1,0,1,1: positive
Prover Time taken = 0.168581
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187020
Verifying $_Z26quasirandomGeneratorKernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,0,1,0,1,1,1: positive
Prover Time taken = 0.127613
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177490
Verifying $_Z26quasirandomGeneratorKernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.09876
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179910
Verifying $_Z26quasirandomGeneratorKernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.162616
Prover time = 0.56
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 1.01
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.82user 1.16system 0:02.33elapsed 85%CPU (0avgtext+0avgdata 43652maxresident)k
0inputs+112outputs (1major+14963minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
#################
Tue May  4 04:54:21 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z15sobolGPU_kerneljjPjPf
Verifying $_Z15sobolGPU_kerneljjPjPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1: positive
Prover Time taken = 0.177748
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Total learner time was 00:00:00.1249530
Verifying $_Z15sobolGPU_kerneljjPjPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1: positive
Prover Time taken = 0.351944
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Total learner time was 00:00:00.1183980
Verifying $_Z15sobolGPU_kerneljjPjPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.282224
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Total learner time was 00:00:00.1187910
Verifying $_Z15sobolGPU_kerneljjPjPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.348023
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Total learner time was 00:00:00.1182240
Verifying $_Z15sobolGPU_kerneljjPjPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.413214
Added Horn clause: 6 && 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Command exited with non-zero status 124
0.92user 1.27system 19:58.65elapsed 0%CPU (0avgtext+0avgdata 47696maxresident)k
0inputs+152outputs (1major+16997minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
#################
Tue May  4 05:14:20 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 21
Generating VC of $_Z17advectParticles_kP6float2S0_iifij
Verifying $_Z17advectParticles_kP6float2S0_iifij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.17132
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
Total learner time was 00:00:00.1158390
Verifying $_Z17advectParticles_kP6float2S0_iifij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 8000 + (if b0001 then 0 else 1) * 8000 + (if b0002 then 0 else 1) * 8000 + (if b0003 then 0 else 1) * 8000 + (if b0004 then 0 else 1) * 8000 + (if b0005 then 0 else 1) * 8000 + (if b0006 then 0 else 1) * 8000 + (if b0007 then 0 else 1) * 8000 + (if b0008 then 0 else 1) * 8000 + (if b0009 then 0 else 1) * 8000 + (if b0010 then 0 else 1) * 8000 + (if b0011 then 0 else 1) * 8000 + (if b0012 then 0 else 1) * 8000 + (if b0013 then 0 else 1) * 8000 + (if b0014 then 0 else 1) * 8000 + (if b0015 then 0 else 1) * 8000 + (if b0016 then 0 else 1) * 8000 + (if b0017 then 0 else 1) * 8000 + (if b0018 then 0 else 1) * 8000 + (if b0019 then 0 else 1) * 8000 + (if b0020 then 0 else 1) * 8000 < 441
}
Prover Time taken = 0.256127
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
Total learner time was 00:00:00.1181510
Verifying $_Z17advectParticles_kP6float2S0_iifij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 8000 + (if b0002 then 0 else 1) * 8000 + (if b0004 then 0 else 1) * 8000 + (if b0005 then 0 else 1) * 8000 + (if b0006 then 0 else 1) * 8000 + (if b0007 then 0 else 1) * 8000 + (if b0008 then 0 else 1) * 8000 + (if b0009 then 0 else 1) * 8000 + (if b0010 then 0 else 1) * 8000 + (if b0011 then 0 else 1) * 8000 + (if b0012 then 0 else 1) * 8000 + (if b0013 then 0 else 1) * 8000 + (if b0014 then 0 else 1) * 8000 + (if b0015 then 0 else 1) * 8000 + (if b0016 then 0 else 1) * 8000 + (if b0017 then 0 else 1) * 8000 + (if b0018 then 0 else 1) * 8000 + (if b0019 then 0 else 1) * 8000 + (if b0020 then 0 else 1) * 8000 < 441
}
Prover Time taken = 0.517558
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
Total learner time was 00:00:00.1191330
Verifying $_Z17advectParticles_kP6float2S0_iifij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 8000 + (if b0002 then 0 else 1) * 8000 + (if b0004 then 0 else 1) * 8000 + (if b0005 then 0 else 1) * 8000 + (if b0006 then 0 else 1) * 8000 + (if b0007 then 0 else 1) * 8000 + (if b0008 then 0 else 1) * 8000 + (if b0009 then 0 else 1) * 8000 + (if b0010 then 0 else 1) * 8000 + (if b0011 then 0 else 1) * 8000 + (if b0012 then 0 else 1) * 8000 + (if b0015 then 0 else 1) * 8000 + (if b0016 then 0 else 1) * 8000 + (if b0017 then 0 else 1) * 8000 + (if b0018 then 0 else 1) * 8000 + (if b0019 then 0 else 1) * 8000 + (if b0020 then 0 else 1) * 8000 < 441
}
Prover Time taken = 0.774018
Added Horn clause: 0 && 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
Total learner time was 00:00:00.1175260
Verifying $_Z17advectParticles_kP6float2S0_iifij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 8000 + (if b0002 then 0 else 1) * 8000 + (if b0004 then 0 else 1) * 8000 + (if b0005 then 0 else 1) * 8000 + (if b0006 then 0 else 1) * 8000 + (if b0007 then 0 else 1) * 8000 + (if b0008 then 0 else 1) * 8000 + (if b0009 then 0 else 1) * 8000 + (if b0010 then 0 else 1) * 8000 + (if b0011 then 0 else 1) * 8000 + (if b0012 then 0 else 1) * 8000 + (if b0015 then 0 else 1) * 8000 + (if b0016 then 0 else 1) * 8000 + (if b0019 then 0 else 1) * 8000 + (if b0020 then 0 else 1) * 8000 < 441
}
Prover Time taken = 0.552848
Prover time = 2.27
Number of prover queries = 5
Learner time = 0.47
Number of learner queries = 4
Total time: 2.85
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.94user 1.27system 0:04.20elapsed 52%CPU (0avgtext+0avgdata 47304maxresident)k
0inputs+152outputs (1major+20336minor)pagefaults 0swaps
FILE:CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
#################
Tue May  4 05:14:24 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z16advectVelocity_kP6float2PfS1_iiifi
Verifying $_Z16advectVelocity_kP6float2PfS1_iiifi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.172283
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
Total learner time was 00:00:00.1190610
Verifying $_Z16advectVelocity_kP6float2PfS1_iiifi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.406115
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
Total learner time was 00:00:00.1185010
Verifying $_Z16advectVelocity_kP6float2PfS1_iiifi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.884344
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
Total learner time was 00:00:00.1256630
Verifying $_Z16advectVelocity_kP6float2PfS1_iiifi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 8.964685
Prover time = 10.43
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 10.88
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.90user 1.19system 0:12.23elapsed 17%CPU (0avgtext+0avgdata 46520maxresident)k
0inputs+112outputs (1major+18357minor)pagefaults 0swaps
FILE:CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
#################
Tue May  4 05:14:36 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 35
Generating VC of $_Z16diffuseProject_kP6float2S0_iiffi
Verifying $_Z16diffuseProject_kP6float2S0_iiffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.175192
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
Total learner time was 00:00:00.1166940
Verifying $_Z16diffuseProject_kP6float2S0_iiffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0020 then 0 else 1) * 14000 + (if b0021 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0023 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0027 then 0 else 1) * 14000 + (if b0028 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 0.319907
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
Total learner time was 00:00:00.1201440
Verifying $_Z16diffuseProject_kP6float2S0_iiffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0020 then 0 else 1) * 14000 + (if b0021 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0023 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0027 then 0 else 1) * 14000 + (if b0028 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.088826
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
Total learner time was 00:00:00.1201900
Verifying $_Z16diffuseProject_kP6float2S0_iiffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0021 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0023 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 0.612159
Prover time = 2.20
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 2.69
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.87user 1.24system 0:04.03elapsed 52%CPU (0avgtext+0avgdata 49460maxresident)k
0inputs+112outputs (1major+20689minor)pagefaults 0swaps
FILE:CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
#################
Tue May  4 05:14:40 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/updateVelocity_k.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/updateVelocity_k.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 12
Generating VC of $_Z16updateVelocity_kP6float2PfS1_iiiij
Verifying $_Z16updateVelocity_kP6float2PfS1_iiiij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169842
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/updateVelocity_k.bpl.ice2.bpl
Total learner time was 00:00:00.1166020
Verifying $_Z16updateVelocity_kP6float2PfS1_iiiij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.679494
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/updateVelocity_k.bpl.ice2.bpl
Total learner time was 00:00:00.1245740
Verifying $_Z16updateVelocity_kP6float2PfS1_iiiij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.374293
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/updateVelocity_k.bpl.ice2.bpl
Total learner time was 00:00:00.1222740
Verifying $_Z16updateVelocity_kP6float2PfS1_iiiij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.655379
Prover time = 1.88
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 2.34
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.87user 1.20system 0:03.69elapsed 56%CPU (0avgtext+0avgdata 46868maxresident)k
0inputs+112outputs (1major+18532minor)pagefaults 0swaps
FILE:CUDA50/5_Simulations/fluidsGL/updateVelocity_k.bpl.ice2.bpl
#################
Tue May  4 05:14:44 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 114
Generating VC of $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.213704
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1179920
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 45000 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0018 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0021 then 0 else 1) * 45000 + (if b0022 then 0 else 1) * 45000 + (if b0023 then 0 else 1) * 45000 + (if b0024 then 0 else 1) * 45000 + (if b0025 then 0 else 1) * 45000 + (if b0026 then 0 else 1) * 45000 + (if b0027 then 0 else 1) * 45000 + (if b0028 then 0 else 1) * 45000 + (if b0029 then 0 else 1) * 45000 + (if b0030 then 0 else 1) * 45000 + (if b0031 then 0 else 1) * 45000 + (if b0032 then 0 else 1) * 45000 + (if b0033 then 0 else 1) * 45000 + (if b0034 then 0 else 1) * 45000 + (if b0035 then 0 else 1) * 45000 + (if b0036 then 0 else 1) * 45000 + (if b0037 then 0 else 1) * 45000 + (if b0038 then 0 else 1) * 45000 + (if b0039 then 0 else 1) * 45000 + (if b0040 then 0 else 1) * 45000 + (if b0041 then 0 else 1) * 45000 + (if b0042 then 0 else 1) * 45000 + (if b0043 then 0 else 1) * 45000 + (if b0044 then 0 else 1) * 45000 + (if b0045 then 0 else 1) * 45000 + (if b0046 then 0 else 1) * 45000 + (if b0047 then 0 else 1) * 45000 + (if b0048 then 0 else 1) * 45000 + (if b0049 then 0 else 1) * 45000 + (if b0050 then 0 else 1) * 45000 + (if b0051 then 0 else 1) * 45000 + (if b0052 then 0 else 1) * 45000 + (if b0053 then 0 else 1) * 45000 + (if b0054 then 0 else 1) * 45000 + (if b0055 then 0 else 1) * 45000 + (if b0056 then 0 else 1) * 45000 + (if b0057 then 0 else 1) * 45000 + (if b0058 then 0 else 1) * 45000 + (if b0059 then 0 else 1) * 45000 + (if b0060 then 0 else 1) * 45000 + (if b0061 then 0 else 1) * 45000 + (if b0062 then 0 else 1) * 45000 + (if b0063 then 0 else 1) * 45000 + (if b0064 then 0 else 1) * 45000 + (if b0065 then 0 else 1) * 45000 + (if b0066 then 0 else 1) * 45000 + (if b0067 then 0 else 1) * 45000 + (if b0068 then 0 else 1) * 45000 + (if b0069 then 0 else 1) * 45000 + (if b0070 then 0 else 1) * 45000 + (if b0071 then 0 else 1) * 45000 + (if b0072 then 0 else 1) * 45000 + (if b0073 then 0 else 1) * 45000 + (if b0074 then 0 else 1) * 45000 + (if b0075 then 0 else 1) * 45000 + (if b0076 then 0 else 1) * 45000 + (if b0077 then 0 else 1) * 45000 + (if b0078 then 0 else 1) * 45000 + (if b0079 then 0 else 1) * 45000 + (if b0080 then 0 else 1) * 45000 + (if b0081 then 0 else 1) * 45000 + (if b0082 then 0 else 1) * 45000 + (if b0083 then 0 else 1) * 45000 + (if b0084 then 0 else 1) * 45000 + (if b0085 then 0 else 1) * 45000 + (if b0086 then 0 else 1) * 45000 + (if b0087 then 0 else 1) * 45000 + (if b0088 then 0 else 1) * 45000 + (if b0089 then 0 else 1) * 45000 + (if b0090 then 0 else 1) * 45000 + (if b0091 then 0 else 1) * 45000 + (if b0092 then 0 else 1) * 45000 + (if b0093 then 0 else 1) * 45000 + (if b0094 then 0 else 1) * 45000 + (if b0095 then 0 else 1) * 45000 + (if b0096 then 0 else 1) * 45000 + (if b0097 then 0 else 1) * 45000 + (if b0098 then 0 else 1) * 45000 + (if b0099 then 0 else 1) * 45000 + (if b0100 then 0 else 1) * 45000 + (if b0101 then 0 else 1) * 45000 + (if b0102 then 0 else 1) * 45000 + (if b0103 then 0 else 1) * 45000 + (if b0104 then 0 else 1) * 45000 + (if b0105 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,0,0,1,0,1,1,0,0,1,0,0,1,1,0,1,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 17.401563
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1255350
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 45000 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0018 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0021 then 0 else 1) * 45000 + (if b0022 then 0 else 1) * 45000 + (if b0024 then 0 else 1) * 45000 + (if b0026 then 0 else 1) * 45000 + (if b0027 then 0 else 1) * 45000 + (if b0029 then 0 else 1) * 45000 + (if b0030 then 0 else 1) * 45000 + (if b0031 then 0 else 1) * 45000 + (if b0032 then 0 else 1) * 45000 + (if b0034 then 0 else 1) * 45000 + (if b0035 then 0 else 1) * 45000 + (if b0036 then 0 else 1) * 45000 + (if b0039 then 0 else 1) * 45000 + (if b0040 then 0 else 1) * 45000 + (if b0042 then 0 else 1) * 45000 + (if b0043 then 0 else 1) * 45000 + (if b0044 then 0 else 1) * 45000 + (if b0046 then 0 else 1) * 45000 + (if b0047 then 0 else 1) * 45000 + (if b0050 then 0 else 1) * 45000 + (if b0051 then 0 else 1) * 45000 + (if b0053 then 0 else 1) * 45000 + (if b0054 then 0 else 1) * 45000 + (if b0056 then 0 else 1) * 45000 + (if b0057 then 0 else 1) * 45000 + (if b0058 then 0 else 1) * 45000 + (if b0059 then 0 else 1) * 45000 + (if b0061 then 0 else 1) * 45000 + (if b0062 then 0 else 1) * 45000 + (if b0063 then 0 else 1) * 45000 + (if b0064 then 0 else 1) * 45000 + (if b0065 then 0 else 1) * 45000 + (if b0067 then 0 else 1) * 45000 + (if b0068 then 0 else 1) * 45000 + (if b0069 then 0 else 1) * 45000 + (if b0071 then 0 else 1) * 45000 + (if b0073 then 0 else 1) * 45000 + (if b0074 then 0 else 1) * 45000 + (if b0075 then 0 else 1) * 45000 + (if b0076 then 0 else 1) * 45000 + (if b0077 then 0 else 1) * 45000 + (if b0081 then 0 else 1) * 45000 + (if b0083 then 0 else 1) * 45000 + (if b0084 then 0 else 1) * 45000 + (if b0087 then 0 else 1) * 45000 + (if b0090 then 0 else 1) * 45000 + (if b0091 then 0 else 1) * 45000 + (if b0093 then 0 else 1) * 45000 + (if b0094 then 0 else 1) * 45000 + (if b0095 then 0 else 1) * 45000 + (if b0096 then 0 else 1) * 45000 + (if b0097 then 0 else 1) * 45000 + (if b0099 then 0 else 1) * 45000 + (if b0102 then 0 else 1) * 45000 + (if b0104 then 0 else 1) * 45000 + (if b0105 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,1,1,0,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.648812
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1191370
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 45000 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0018 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.384943
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1193020
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 45000 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.81584
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1216430
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Prover Time taken = 0.725767
Added Horn clause: 5 && 0 && 0 && 0 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Command exited with non-zero status 124
1.36user 1.53system 19:58.60elapsed 0%CPU (0avgtext+0avgdata 65956maxresident)k
0inputs+248outputs (1major+29091minor)pagefaults 0swaps
FILE:CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
#################
Tue May  4 05:34:42 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z10testKernelIiEvPT_S1_i
Verifying $_Z10testKernelIiEvPT_S1_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167683
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
Total learner time was 00:00:00.1158750
Verifying $_Z10testKernelIiEvPT_S1_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.052327
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
Total learner time was 00:00:00.1211690
Verifying $_Z10testKernelIiEvPT_S1_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.077233
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
Total learner time was 00:00:00.1215130
Verifying $_Z10testKernelIiEvPT_S1_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.162303
Prover time = 0.46
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 0.92
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.16system 0:02.22elapsed 87%CPU (0avgtext+0avgdata 43644maxresident)k
0inputs+120outputs (1major+14625minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
#################
Tue May  4 05:34:45 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z3sumPji
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167709
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1184630
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.128781
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1181450
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.124666
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1226510
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.11952
Added Horn clause: 0 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1185050
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.134857
Added Horn clause: 1 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1176040
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.116413
Prover time = 0.79
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 1.49
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.98user 1.37system 0:02.87elapsed 82%CPU (0avgtext+0avgdata 45956maxresident)k
0inputs+176outputs (1major+19182minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
#################
Tue May  4 05:34:47 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 124
Generating VC of $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.203951
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1166480
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0055 then 0 else 1) * 49000 + (if b0056 then 0 else 1) * 49000 + (if b0057 then 0 else 1) * 49000 + (if b0058 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0060 then 0 else 1) * 49000 + (if b0061 then 0 else 1) * 49000 + (if b0062 then 0 else 1) * 49000 + (if b0063 then 0 else 1) * 49000 + (if b0064 then 0 else 1) * 49000 + (if b0065 then 0 else 1) * 49000 + (if b0066 then 0 else 1) * 49000 + (if b0067 then 0 else 1) * 49000 + (if b0068 then 0 else 1) * 49000 + (if b0069 then 0 else 1) * 49000 + (if b0070 then 0 else 1) * 49000 + (if b0071 then 0 else 1) * 49000 + (if b0072 then 0 else 1) * 49000 + (if b0073 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.759831
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1243780
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0056 then 0 else 1) * 49000 + (if b0057 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0061 then 0 else 1) * 49000 + (if b0062 then 0 else 1) * 49000 + (if b0063 then 0 else 1) * 49000 + (if b0064 then 0 else 1) * 49000 + (if b0068 then 0 else 1) * 49000 + (if b0069 then 0 else 1) * 49000 + (if b0070 then 0 else 1) * 49000 + (if b0071 then 0 else 1) * 49000 + (if b0072 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.914454
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1198170
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0056 then 0 else 1) * 49000 + (if b0057 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0061 then 0 else 1) * 49000 + (if b0062 then 0 else 1) * 49000 + (if b0063 then 0 else 1) * 49000 + (if b0064 then 0 else 1) * 49000 + (if b0068 then 0 else 1) * 49000 + (if b0069 then 0 else 1) * 49000 + (if b0070 then 0 else 1) * 49000 + (if b0071 then 0 else 1) * 49000 + (if b0072 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.846927
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1215570
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0056 then 0 else 1) * 49000 + (if b0057 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0061 then 0 else 1) * 49000 + (if b0063 then 0 else 1) * 49000 + (if b0064 then 0 else 1) * 49000 + (if b0068 then 0 else 1) * 49000 + (if b0069 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.019131
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1181770
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0057 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0061 then 0 else 1) * 49000 + (if b0063 then 0 else 1) * 49000 + (if b0069 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.76718
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1186980
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0063 then 0 else 1) * 49000 + (if b0069 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.528433
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1197910
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.548346
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1197210
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 1.161184
Added Horn clause: 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1212250
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 1.472771
Added Horn clause: 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1203550
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 2.093594
Added Horn clause: 0 && 0 && 8 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1213180
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 1.458802
Added Horn clause: 12 && 0 && 8 && 0 && 11 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Command exited with non-zero status 124
2.05user 2.14system 19:58.61elapsed 0%CPU (0avgtext+0avgdata 71816maxresident)k
0inputs+504outputs (1major+55799minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
#################
Tue May  4 05:54:46 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 44
Generating VC of $_Z15fwtBatch1KernelPfS_i
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169296
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1164020
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 5.317423
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183140
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.889062
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191050
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.922569
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192400
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.173758
Added Horn clause: 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178300
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 2.909067
Added Horn clause: 0 && 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183810
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 2.206001
Added Horn clause: 0 && 4 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186120
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 3.557115
Added Horn clause: 0 && 4 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1172010
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 < 441
}
Prover Time taken = 9.120787
Added Horn clause: 0 && 4 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1240600
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.37803
Added Horn clause: 0 && 4 && 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1194800
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 < 441
}
Prover Time taken = 3.142154
Added Horn clause: 0 && 4 && 11 && 0 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Command exited with non-zero status 124
1.48user 1.91system 19:58.71elapsed 0%CPU (0avgtext+0avgdata 58344maxresident)k
0inputs+360outputs (1major+35985minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
#################
Tue May  4 06:14:45 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z14modulateKernelPfS_i
Verifying $_Z14modulateKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.16873
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197560
Verifying $_Z14modulateKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.061258
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192130
Verifying $_Z14modulateKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.119944
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182390
Verifying $_Z14modulateKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.105175
Prover time = 0.46
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 0.92
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.18system 0:02.21elapsed 88%CPU (0avgtext+0avgdata 43572maxresident)k
0inputs+120outputs (1major+14745minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
#################
Tue May  4 06:14:47 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z14SobelCopyImagePhjiif
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167966
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1258620
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.181891
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1196500
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.148485
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1190370
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.550006
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1224610
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.176797
Prover time = 2.23
Number of prover queries = 5
Learner time = 0.49
Number of learner queries = 4
Total time: 2.82
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.89user 1.30system 0:04.17elapsed 52%CPU (0avgtext+0avgdata 46628maxresident)k
0inputs+144outputs (1major+19014minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
#################
Tue May  4 06:14:51 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 64
Generating VC of $_Z23bitonicSortSharedKernelPjS_S_S_jj
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.210058
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.0875210
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0014 then 0 else 1) * 25000 + (if b0047 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 17.898373
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1274770
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0014 then 0 else 1) * 25000 + (if b0047 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.128216
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1218650
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0014 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.404641
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1208080
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 17.65775
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229920
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 6.71836
Added Horn clause: 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1282720
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 21.619813
Added Horn clause: 1 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1218610
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 4.8451
Added Horn clause: 4 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1277430
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 0.378671
Prover time = 86.86
Number of prover queries = 9
Learner time = 0.96
Number of learner queries = 8
Total time: 87.98
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.49user 1.85system 1:29.41elapsed 3%CPU (0avgtext+0avgdata 58628maxresident)k
0inputs+328outputs (1major+37053minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
#################
Tue May  4 06:16:21 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z7reduce0IiEvPT_S1_j
Verifying $_Z7reduce0IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.173943
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce0.bpl.ice2.bpl
Total learner time was 00:00:00.1171030
Verifying $_Z7reduce0IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.077473
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce0.bpl.ice2.bpl
Total learner time was 00:00:00.1175330
Verifying $_Z7reduce0IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.064405
Prover time = 0.32
Number of prover queries = 3
Learner time = 0.23
Number of learner queries = 2
Total time: 0.63
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.76user 1.09system 0:01.96elapsed 94%CPU (0avgtext+0avgdata 44272maxresident)k
0inputs+80outputs (1major+15504minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/reduction/reduce0.bpl.ice2.bpl
#################
Tue May  4 06:16:23 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z7reduce1IiEvPT_S1_j
Verifying $_Z7reduce1IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.173059
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce1.bpl.ice2.bpl
Total learner time was 00:00:00.1171880
Verifying $_Z7reduce1IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.140798
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce1.bpl.ice2.bpl
Total learner time was 00:00:00.1187400
Verifying $_Z7reduce1IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.176064
Prover time = 0.49
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.81
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.80user 1.07system 0:02.14elapsed 87%CPU (0avgtext+0avgdata 44676maxresident)k
0inputs+80outputs (1major+16072minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/reduction/reduce1.bpl.ice2.bpl
#################
Tue May  4 06:16:25 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z7reduce2IiEvPT_S1_j
Verifying $_Z7reduce2IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.173289
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
Total learner time was 00:00:00.1219880
Verifying $_Z7reduce2IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.094544
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
Total learner time was 00:00:00.1214550
Verifying $_Z7reduce2IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.09891
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
Total learner time was 00:00:00.1178010
Verifying $_Z7reduce2IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.028568
Prover time = 0.40
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 0.84
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.81user 1.19system 0:02.17elapsed 92%CPU (0avgtext+0avgdata 44824maxresident)k
0inputs+112outputs (1major+16231minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
#################
Tue May  4 06:16:27 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z7reduce3IiEvPT_S1_j
Verifying $_Z7reduce3IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.191094
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
Total learner time was 00:00:00.1161470
Verifying $_Z7reduce3IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.085043
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
Total learner time was 00:00:00.1211810
Verifying $_Z7reduce3IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.078501
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
Total learner time was 00:00:00.1203390
Verifying $_Z7reduce3IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.032432
Prover time = 0.39
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 0.84
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.85user 1.15system 0:02.16elapsed 92%CPU (0avgtext+0avgdata 44552maxresident)k
0inputs+112outputs (1major+16349minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
#################
Tue May  4 06:16:29 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce4.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce4.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 15
Generating VC of $_Z7reduce4IiLj256EEvPT_S1_j
Verifying $_Z7reduce4IiLj256EEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.204688
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce4.bpl.ice2.bpl
Total learner time was 00:00:00.1214770
Verifying $_Z7reduce4IiLj256EEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 < 441
}
Prover Time taken = 2.052275
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce4.bpl.ice2.bpl
Total learner time was 00:00:00.1194400
Verifying $_Z7reduce4IiLj256EEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.199601
Prover time = 2.46
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 2.78
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.82user 1.14system 0:04.18elapsed 47%CPU (0avgtext+0avgdata 51116maxresident)k
0inputs+80outputs (1major+19559minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/reduction/reduce4.bpl.ice2.bpl
#################
Tue May  4 06:16:33 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 146
Generating VC of $_Z13scalarProdGPUPfS_S_ii
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.178884
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1180720
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0004 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0006 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0013 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0015 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0024 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0026 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0033 then 0 else 1) * 58000 + (if b0034 then 0 else 1) * 58000 + (if b0035 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0037 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0045 then 0 else 1) * 58000 + (if b0047 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0052 then 0 else 1) * 58000 + (if b0053 then 0 else 1) * 58000 + (if b0054 then 0 else 1) * 58000 + (if b0055 then 0 else 1) * 58000 + (if b0056 then 0 else 1) * 58000 + (if b0057 then 0 else 1) * 58000 + (if b0058 then 0 else 1) * 58000 + (if b0059 then 0 else 1) * 58000 + (if b0060 then 0 else 1) * 58000 + (if b0061 then 0 else 1) * 58000 + (if b0062 then 0 else 1) * 58000 + (if b0063 then 0 else 1) * 58000 + (if b0064 then 0 else 1) * 58000 + (if b0065 then 0 else 1) * 58000 + (if b0066 then 0 else 1) * 58000 + (if b0067 then 0 else 1) * 58000 + (if b0068 then 0 else 1) * 58000 + (if b0069 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0085 then 0 else 1) * 58000 + (if b0086 then 0 else 1) * 58000 + (if b0087 then 0 else 1) * 58000 + (if b0088 then 0 else 1) * 58000 + (if b0089 then 0 else 1) * 58000 + (if b0090 then 0 else 1) * 58000 + (if b0091 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0102 then 0 else 1) * 58000 + (if b0103 then 0 else 1) * 58000 + (if b0104 then 0 else 1) * 58000 + (if b0105 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0109 then 0 else 1) * 58000 + (if b0110 then 0 else 1) * 58000 + (if b0111 then 0 else 1) * 58000 + (if b0112 then 0 else 1) * 58000 + (if b0113 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0120 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0128 then 0 else 1) * 58000 + (if b0129 then 0 else 1) * 58000 + (if b0130 then 0 else 1) * 58000 + (if b0131 then 0 else 1) * 58000 + (if b0132 then 0 else 1) * 58000 + (if b0133 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0142 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.185628
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1192040
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0004 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0006 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0013 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0015 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0024 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0026 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0033 then 0 else 1) * 58000 + (if b0034 then 0 else 1) * 58000 + (if b0035 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0037 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0054 then 0 else 1) * 58000 + (if b0058 then 0 else 1) * 58000 + (if b0064 then 0 else 1) * 58000 + (if b0067 then 0 else 1) * 58000 + (if b0069 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0085 then 0 else 1) * 58000 + (if b0086 then 0 else 1) * 58000 + (if b0087 then 0 else 1) * 58000 + (if b0088 then 0 else 1) * 58000 + (if b0089 then 0 else 1) * 58000 + (if b0090 then 0 else 1) * 58000 + (if b0091 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0102 then 0 else 1) * 58000 + (if b0103 then 0 else 1) * 58000 + (if b0104 then 0 else 1) * 58000 + (if b0105 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0109 then 0 else 1) * 58000 + (if b0110 then 0 else 1) * 58000 + (if b0111 then 0 else 1) * 58000 + (if b0112 then 0 else 1) * 58000 + (if b0113 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0120 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0128 then 0 else 1) * 58000 + (if b0129 then 0 else 1) * 58000 + (if b0130 then 0 else 1) * 58000 + (if b0131 then 0 else 1) * 58000 + (if b0132 then 0 else 1) * 58000 + (if b0133 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0142 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.938164
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1191850
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0004 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0006 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0013 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0015 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0024 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0026 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0033 then 0 else 1) * 58000 + (if b0034 then 0 else 1) * 58000 + (if b0035 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0037 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0069 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0085 then 0 else 1) * 58000 + (if b0086 then 0 else 1) * 58000 + (if b0087 then 0 else 1) * 58000 + (if b0088 then 0 else 1) * 58000 + (if b0089 then 0 else 1) * 58000 + (if b0090 then 0 else 1) * 58000 + (if b0091 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0102 then 0 else 1) * 58000 + (if b0103 then 0 else 1) * 58000 + (if b0104 then 0 else 1) * 58000 + (if b0105 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0109 then 0 else 1) * 58000 + (if b0110 then 0 else 1) * 58000 + (if b0111 then 0 else 1) * 58000 + (if b0112 then 0 else 1) * 58000 + (if b0113 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0120 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0128 then 0 else 1) * 58000 + (if b0129 then 0 else 1) * 58000 + (if b0130 then 0 else 1) * 58000 + (if b0131 then 0 else 1) * 58000 + (if b0132 then 0 else 1) * 58000 + (if b0133 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0142 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 0.707929
Added Horn clause: 3 && 4 && 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Command exited with non-zero status 124
1.17user 1.31system 19:58.56elapsed 0%CPU (0avgtext+0avgdata 69764maxresident)k
0inputs+160outputs (1major+28823minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
#################
Tue May  4 06:36:32 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z19scanExclusiveSharedP5uint4S0_j
Verifying $_Z19scanExclusiveSharedP5uint4S0_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.192514
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
Total learner time was 00:00:00.1159140
Verifying $_Z19scanExclusiveSharedP5uint4S0_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Added: my_inv:1,1,1,1,1,1,0,0: positive
Prover Time taken = 0.303486
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
Total learner time was 00:00:00.1199870
Verifying $_Z19scanExclusiveSharedP5uint4S0_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.285586
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
Total learner time was 00:00:00.1184750
Verifying $_Z19scanExclusiveSharedP5uint4S0_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.828581
Prover time = 1.61
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 2.05
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.82user 1.19system 0:03.39elapsed 59%CPU (0avgtext+0avgdata 46080maxresident)k
0inputs+112outputs (1major+17577minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
#################
Tue May  4 06:36:35 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z20scanExclusiveShared2PjS_S_jj
Verifying $_Z20scanExclusiveShared2PjS_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.181028
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
Total learner time was 00:00:00.1198350
Verifying $_Z20scanExclusiveShared2PjS_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.169044
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
Total learner time was 00:00:00.1189310
Verifying $_Z20scanExclusiveShared2PjS_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Added: my_inv:1,1,1,1,1,1,0,1: positive
Prover Time taken = 0.145823
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
Total learner time was 00:00:00.1178460
Verifying $_Z20scanExclusiveShared2PjS_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.299593
Added Horn clause: 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
Total learner time was 00:00:00.1178770
Verifying $_Z20scanExclusiveShared2PjS_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Added: my_inv:1,1,1,1,1,1,0,0: positive
Prover Time taken = 0.198881
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
Total learner time was 00:00:00.1209480
Verifying $_Z20scanExclusiveShared2PjS_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.431694
Prover time = 1.43
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 2.11
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.94user 1.34system 0:03.44elapsed 66%CPU (0avgtext+0avgdata 44908maxresident)k
0inputs+176outputs (1major+18009minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
#################
Tue May  4 06:36:39 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $_Z18shfl_vertical_shflPjii
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.177105
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1172370
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.282842
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1176460
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.222769
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1240680
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.441158
Added Horn clause: 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1171210
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.307731
Added Horn clause: 3 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1239620
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 23.185782
Prover time = 24.62
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 25.32
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.02user 1.43system 0:26.67elapsed 9%CPU (0avgtext+0avgdata 47584maxresident)k
0inputs+168outputs (1major+21568minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
#################
Tue May  4 06:37:05 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z3sumPji
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167824
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1166680
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.15123
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1167060
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.115941
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1223950
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.119864
Added Horn clause: 0 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1194480
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.130152
Added Horn clause: 1 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1174840
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.115753
Prover time = 0.80
Number of prover queries = 6
Learner time = 0.59
Number of learner queries = 5
Total time: 1.50
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.97user 1.33system 0:02.83elapsed 81%CPU (0avgtext+0avgdata 45912maxresident)k
0inputs+184outputs (1major+19305minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
#################
Tue May  4 06:37:08 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z18bitonicMergeSharedPjS_S_S_jjj
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.194734
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1197620
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 2.240388
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1180020
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.042873
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1193140
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,0: positive
Prover Time taken = 0.794658
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1173580
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.616261
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1166970
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.669081
Added Horn clause: 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1176030
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.22008
Added Horn clause: 0 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1183090
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.447947
Prover time = 8.23
Number of prover queries = 8
Learner time = 0.83
Number of learner queries = 7
Total time: 9.18
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.13user 1.59system 0:10.54elapsed 25%CPU (0avgtext+0avgdata 50716maxresident)k
0inputs+232outputs (1major+25442minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
#################
Tue May  4 06:37:19 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 64
Generating VC of $_Z17bitonicSortSharedPjS_S_S_jj
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.215367
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1181410
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0014 then 0 else 1) * 25000 + (if b0047 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.664475
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1220290
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 11.564989
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1190000
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.904404
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1176290
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 11.495469
Added Horn clause: 0 && 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Command exited with non-zero status 124
1.10user 1.40system 19:58.78elapsed 0%CPU (0avgtext+0avgdata 58336maxresident)k
0inputs+176outputs (1major+23205minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
#################
Tue May  4 06:57:18 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 64
Generating VC of $_Z18bitonicSortShared1PjS_S_S_
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.207546
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1180820
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0014 then 0 else 1) * 25000 + (if b0047 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 12.14607
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1183580
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 7.18117
Added Horn clause: 0 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Command exited with non-zero status 124
0.94user 1.12system 19:58.55elapsed 0%CPU (0avgtext+0avgdata 55308maxresident)k
0inputs+112outputs (1major+18104minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
#################
Tue May  4 07:17:16 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 56
Generating VC of $_Z22oddEvenMergeSortSharedPjS_S_S_jj
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.20876
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1207750
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0045 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0051 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 12.725909
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1197270
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0045 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0051 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 12.615586
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1192640
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0051 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Prover Time taken = 11.031241
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1209920
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Prover Time taken = 17.157633
Added Horn clause: 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1199590
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1: positive
Prover Time taken = 11.817407
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1190500
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Prover Time taken = 6.662453
Added Horn clause: 6 && 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Command exited with non-zero status 124
1.29user 1.66system 19:58.57elapsed 0%CPU (0avgtext+0avgdata 58824maxresident)k
0inputs+280outputs (1major+28039minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
#################
Tue May  4 07:37:15 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z4copyPfS_iii
Verifying $_Z4copyPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169348
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
Total learner time was 00:00:00.1157010
Verifying $_Z4copyPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.167333
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
Total learner time was 00:00:00.1166520
Verifying $_Z4copyPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.111744
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
Total learner time was 00:00:00.1176540
Verifying $_Z4copyPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.449094
Prover time = 0.90
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 1.36
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.79user 1.20system 0:02.67elapsed 74%CPU (0avgtext+0avgdata 43712maxresident)k
0inputs+120outputs (1major+15119minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
#################
Tue May  4 07:37:17 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 26
Generating VC of $_Z13copySharedMemPfS_iii
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169601
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1191850
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.09288
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1225250
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.119788
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1173410
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.061907
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1195760
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.090116
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1189210
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.114133
Added Horn clause: 0 && 1 && 2 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1201980
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.125758
Prover time = 0.77
Number of prover queries = 7
Learner time = 0.72
Number of learner queries = 6
Total time: 1.62
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:5
verified

Boogie program verifier finished with 1 verified, 0 errors
1.05user 1.42system 0:02.96elapsed 83%CPU (0avgtext+0avgdata 47448maxresident)k
0inputs+208outputs (1major+21595minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
#################
Tue May  4 07:37:20 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z18transposeCoalescedPfS_iii
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169961
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Total learner time was 00:00:00.1179600
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.172313
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Total learner time was 00:00:00.1244260
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.212844
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Total learner time was 00:00:00.1181060
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.110643
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Total learner time was 00:00:00.1202230
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.129556
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Total learner time was 00:00:00.1202370
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.785516
Prover time = 1.58
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 2.30
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.98user 1.37system 0:03.64elapsed 64%CPU (0avgtext+0avgdata 48352maxresident)k
0inputs+176outputs (1major+22047minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
#################
Tue May  4 07:37:24 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z22transposeCoarseGrainedPfS_iii
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171145
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1172950
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.216657
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1185930
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.21325
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1198730
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.188113
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1202160
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.22191
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1187300
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.396426
Prover time = 2.41
Number of prover queries = 6
Learner time = 0.59
Number of learner queries = 5
Total time: 3.16
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.03user 1.32system 0:04.49elapsed 52%CPU (0avgtext+0avgdata 48224maxresident)k
0inputs+184outputs (1major+22064minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
#################
Tue May  4 07:37:28 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $_Z17transposeDiagonalPfS_iii
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168545
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Total learner time was 00:00:00.1196770
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.118979
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Total learner time was 00:00:00.1191550
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.095903
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Total learner time was 00:00:00.1179450
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.07246
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Total learner time was 00:00:00.1206570
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.10099
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Total learner time was 00:00:00.1181660
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.427138
Prover time = 0.98
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 1.70
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.95user 1.38system 0:03.04elapsed 76%CPU (0avgtext+0avgdata 47120maxresident)k
0inputs+176outputs (1major+20626minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
#################
Tue May  4 07:37:32 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z20transposeFineGrainedPfS_iii
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169368
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1170750
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.183049
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1181030
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.178395
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1202620
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.12646
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1198800
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.336179
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1189240
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.506453
Prover time = 2.50
Number of prover queries = 6
Learner time = 0.59
Number of learner queries = 5
Total time: 3.22
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.00user 1.37system 0:04.56elapsed 52%CPU (0avgtext+0avgdata 48088maxresident)k
0inputs+176outputs (1major+21961minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
#################
Tue May  4 07:37:36 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z14transposeNaivePfS_iii
Verifying $_Z14transposeNaivePfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.174718
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
Total learner time was 00:00:00.1157850
Verifying $_Z14transposeNaivePfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.131032
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
Total learner time was 00:00:00.1182380
Verifying $_Z14transposeNaivePfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.076746
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
Total learner time was 00:00:00.1213850
Verifying $_Z14transposeNaivePfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.502158
Prover time = 0.88
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.33
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.81user 1.18system 0:02.64elapsed 75%CPU (0avgtext+0avgdata 43840maxresident)k
0inputs+112outputs (1major+15049minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
#################
Tue May  4 07:37:39 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z24transposeNoBankConflictsPfS_iii
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.172213
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Total learner time was 00:00:00.1173410
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.188368
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Total learner time was 00:00:00.1189290
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.229577
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Total learner time was 00:00:00.1221270
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.216997
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Total learner time was 00:00:00.1206140
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.198635
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Total learner time was 00:00:00.1227660
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.464759
Prover time = 2.47
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 3.22
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.01user 1.39system 0:04.60elapsed 52%CPU (0avgtext+0avgdata 48076maxresident)k
0inputs+176outputs (1major+21752minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
#################
Tue May  4 07:37:43 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z12computeValueIfEvPjP17curandStateXORWOWj
Verifying $_Z12computeValueIfEvPjP17curandStateXORWOWj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.177686
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
Total learner time was 00:00:00.1167800
Verifying $_Z12computeValueIfEvPjP17curandStateXORWOWj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.107076
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
Total learner time was 00:00:00.1171270
Verifying $_Z12computeValueIfEvPjP17curandStateXORWOWj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.090626
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
Total learner time was 00:00:00.1185680
Verifying $_Z12computeValueIfEvPjP17curandStateXORWOWj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.051102
Prover time = 0.43
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 0.86
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.79user 1.21system 0:02.19elapsed 91%CPU (0avgtext+0avgdata 45016maxresident)k
0inputs+120outputs (1major+16635minor)pagefaults 0swaps
FILE:CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
#################
Tue May  4 07:37:46 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z25MaxwellsGPU_SURF_Kernel3DPfS_
Verifying $_Z25MaxwellsGPU_SURF_Kernel3DPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.306454
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186540
Verifying $_Z25MaxwellsGPU_SURF_Kernel3DPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 7.524972
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189330
Verifying $_Z25MaxwellsGPU_SURF_Kernel3DPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 22.204632
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1219030
Verifying $_Z25MaxwellsGPU_SURF_Kernel3DPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.415247
Prover time = 34.45
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 34.91
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.35user 1.32system 0:36.53elapsed 7%CPU (0avgtext+0avgdata 75248maxresident)k
0inputs+120outputs (1major+34084minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
#################
Tue May  4 07:38:22 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 5
Generating VC of $_Z24MaxwellsGPU_VOL_Kernel3DPf
Verifying $_Z24MaxwellsGPU_VOL_Kernel3DPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1: positive
Prover Time taken = 0.811371
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1166810
Verifying $_Z24MaxwellsGPU_VOL_Kernel3DPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 4.425898
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183250
Verifying $_Z24MaxwellsGPU_VOL_Kernel3DPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 33.632437
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1205810
Verifying $_Z24MaxwellsGPU_VOL_Kernel3DPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.508853
Prover time = 39.38
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 39.82
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.00user 1.28system 0:41.27elapsed 5%CPU (0avgtext+0avgdata 59136maxresident)k
0inputs+120outputs (1major+24613minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
#################
Tue May  4 07:39:03 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z28Pathcalc_Portfolio_KernelGPUPfS_
Verifying $_Z28Pathcalc_Portfolio_KernelGPUPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168774
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1216270
Verifying $_Z28Pathcalc_Portfolio_KernelGPUPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 2.679117
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192260
Verifying $_Z28Pathcalc_Portfolio_KernelGPUPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.312715
Prover time = 4.16
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 4.48
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.81user 1.13system 0:05.85elapsed 33%CPU (0avgtext+0avgdata 51380maxresident)k
0inputs+80outputs (1major+19461minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU/kernel.bpl.ice2.bpl
#################
Tue May  4 07:39:09 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z29Pathcalc_Portfolio_KernelGPU2Pf
Verifying $_Z29Pathcalc_Portfolio_KernelGPU2Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.1722
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1237510
Verifying $_Z29Pathcalc_Portfolio_KernelGPU2Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.517366
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229170
Verifying $_Z29Pathcalc_Portfolio_KernelGPU2Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.273567
Prover time = 0.96
Number of prover queries = 3
Learner time = 0.25
Number of learner queries = 2
Total time: 1.30
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.79user 1.07system 0:02.63elapsed 71%CPU (0avgtext+0avgdata 45572maxresident)k
0inputs+80outputs (1major+16031minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU2/kernel.bpl.ice2.bpl
#################
Tue May  4 07:39:12 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z13GPU_laplace3diiiiPfS_
Verifying $_Z13GPU_laplace3diiiiPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.245763
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1168850
Verifying $_Z13GPU_laplace3diiiiPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.896637
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171850
Verifying $_Z13GPU_laplace3diiiiPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,0,1,0: positive
Prover Time taken = 2.340774
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
Total learner time was 00:00:00.0855730
Verifying $_Z13GPU_laplace3diiiiPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 < 441
}
Prover Time taken = 12.764025
Added Horn clause: 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1223050
Verifying $_Z13GPU_laplace3diiiiPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 < 441
}
Prover Time taken = 20.809964
Prover time = 37.06
Number of prover queries = 5
Learner time = 0.44
Number of learner queries = 4
Total time: 37.59
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.01user 1.33system 0:38.98elapsed 6%CPU (0avgtext+0avgdata 52432maxresident)k
0inputs+144outputs (1major+22668minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
#################
Tue May  4 07:39:51 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/RAY/renderPixel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/RAY/renderPixel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 18
Generating VC of $_Z11renderPixelPjP4Nodejjff
Verifying $_Z11renderPixelPjP4Nodejjff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.002193
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/RAY/renderPixel.bpl.ice2.bpl
Total learner time was 00:00:00.1182720
Verifying $_Z11renderPixelPjP4Nodejjff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 25.470878
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/RAY/renderPixel.bpl.ice2.bpl
Total learner time was 00:00:00.1205220
Verifying $_Z11renderPixelPjP4Nodejjff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 5.414638
Prover time = 33.89
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 34.21
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
1.37user 1.20system 0:35.93elapsed 7%CPU (0avgtext+0avgdata 80148maxresident)k
0inputs+88outputs (1major+35639minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/RAY/renderPixel.bpl.ice2.bpl
#################
Tue May  4 07:40:27 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 111
Generating VC of $opencl_cutoff_potential_lattice
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.275543
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1185070
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0041 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0045 then 0 else 1) * 44000 + (if b0046 then 0 else 1) * 44000 + (if b0047 then 0 else 1) * 44000 + (if b0048 then 0 else 1) * 44000 + (if b0049 then 0 else 1) * 44000 + (if b0050 then 0 else 1) * 44000 + (if b0051 then 0 else 1) * 44000 + (if b0052 then 0 else 1) * 44000 + (if b0053 then 0 else 1) * 44000 + (if b0054 then 0 else 1) * 44000 + (if b0055 then 0 else 1) * 44000 + (if b0056 then 0 else 1) * 44000 + (if b0057 then 0 else 1) * 44000 + (if b0058 then 0 else 1) * 44000 + (if b0059 then 0 else 1) * 44000 + (if b0060 then 0 else 1) * 44000 + (if b0061 then 0 else 1) * 44000 + (if b0062 then 0 else 1) * 44000 + (if b0063 then 0 else 1) * 44000 + (if b0064 then 0 else 1) * 44000 + (if b0065 then 0 else 1) * 44000 + (if b0066 then 0 else 1) * 44000 + (if b0067 then 0 else 1) * 44000 + (if b0068 then 0 else 1) * 44000 + (if b0069 then 0 else 1) * 44000 + (if b0070 then 0 else 1) * 44000 + (if b0071 then 0 else 1) * 44000 + (if b0072 then 0 else 1) * 44000 + (if b0073 then 0 else 1) * 44000 + (if b0074 then 0 else 1) * 44000 + (if b0075 then 0 else 1) * 44000 + (if b0076 then 0 else 1) * 44000 + (if b0077 then 0 else 1) * 44000 + (if b0078 then 0 else 1) * 44000 + (if b0079 then 0 else 1) * 44000 + (if b0080 then 0 else 1) * 44000 + (if b0081 then 0 else 1) * 44000 + (if b0082 then 0 else 1) * 44000 + (if b0083 then 0 else 1) * 44000 + (if b0084 then 0 else 1) * 44000 + (if b0085 then 0 else 1) * 44000 + (if b0086 then 0 else 1) * 44000 + (if b0087 then 0 else 1) * 44000 + (if b0088 then 0 else 1) * 44000 + (if b0089 then 0 else 1) * 44000 + (if b0090 then 0 else 1) * 44000 + (if b0091 then 0 else 1) * 44000 + (if b0092 then 0 else 1) * 44000 + (if b0093 then 0 else 1) * 44000 + (if b0094 then 0 else 1) * 44000 + (if b0095 then 0 else 1) * 44000 + (if b0096 then 0 else 1) * 44000 + (if b0097 then 0 else 1) * 44000 + (if b0098 then 0 else 1) * 44000 + (if b0099 then 0 else 1) * 44000 + (if b0100 then 0 else 1) * 44000 + (if b0101 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.987506
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1209760
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0041 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0047 then 0 else 1) * 44000 + (if b0052 then 0 else 1) * 44000 + (if b0057 then 0 else 1) * 44000 + (if b0059 then 0 else 1) * 44000 + (if b0060 then 0 else 1) * 44000 + (if b0063 then 0 else 1) * 44000 + (if b0064 then 0 else 1) * 44000 + (if b0065 then 0 else 1) * 44000 + (if b0068 then 0 else 1) * 44000 + (if b0069 then 0 else 1) * 44000 + (if b0077 then 0 else 1) * 44000 + (if b0079 then 0 else 1) * 44000 + (if b0080 then 0 else 1) * 44000 + (if b0084 then 0 else 1) * 44000 + (if b0085 then 0 else 1) * 44000 + (if b0087 then 0 else 1) * 44000 + (if b0090 then 0 else 1) * 44000 + (if b0091 then 0 else 1) * 44000 + (if b0096 then 0 else 1) * 44000 + (if b0097 then 0 else 1) * 44000 + (if b0098 then 0 else 1) * 44000 + (if b0099 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.202483
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1203670
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0047 then 0 else 1) * 44000 + (if b0057 then 0 else 1) * 44000 + (if b0059 then 0 else 1) * 44000 + (if b0080 then 0 else 1) * 44000 + (if b0085 then 0 else 1) * 44000 + (if b0087 then 0 else 1) * 44000 + (if b0091 then 0 else 1) * 44000 + (if b0096 then 0 else 1) * 44000 + (if b0099 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.36974
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1226330
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0057 then 0 else 1) * 44000 + (if b0080 then 0 else 1) * 44000 + (if b0085 then 0 else 1) * 44000 + (if b0099 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.924998
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187450
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0080 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.471889
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1239310
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.036845
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184340
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.654339
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1247450
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Prover Time taken = 3.310987
Added Horn clause: 8 && 9 && 9 && 9 && 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Command exited with non-zero status 124
1.63user 1.86system 19:58.66elapsed 0%CPU (0avgtext+0avgdata 70472maxresident)k
0inputs+368outputs (1major+42679minor)pagefaults 0swaps
FILE:parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
#################
Tue May  4 08:00:25 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $histo_intermediates_kernel
Verifying $histo_intermediates_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.177493
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184230
Verifying $histo_intermediates_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.16464
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171980
Verifying $histo_intermediates_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.624299
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199860
Verifying $histo_intermediates_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 < 441
}
Prover Time taken = 145.760591
Prover time = 148.73
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 149.16
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.97user 1.44system 2:30.49elapsed 1%CPU (0avgtext+0avgdata 45556maxresident)k
0inputs+120outputs (1major+17903minor)pagefaults 0swaps
FILE:parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
#################
Tue May  4 08:02:56 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 34
Generating VC of $histo_main_kernel
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169025
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1173570
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0016 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0022 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 2.156191
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191640
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0016 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0022 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 2.591591
Added Horn clause: 1 && 0 && 0 && 0 && 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178790
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0022 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 3.364445
Added Horn clause: 0 && 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183980
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 2.815617
Added Horn clause: 1 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179720
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 2.533616
Added Horn clause: 0 && 0 && 3 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229140
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 3.25971
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186350
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 3.0546
Added Horn clause: 0 && 0 && 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1190730
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 3.278037
Added Horn clause: 0 && 0 && 5 && 0 && 6 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202090
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 3.319271
Added Horn clause: 0 && 0 && 0 && 0 && 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1263790
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 1.876453
Prover time = 28.42
Number of prover queries = 11
Learner time = 1.20
Number of learner queries = 10
Total time: 29.87
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.60user 1.88system 0:31.29elapsed 11%CPU (0avgtext+0avgdata 61324maxresident)k
0inputs+344outputs (1major+42644minor)pagefaults 0swaps
FILE:parboil/histo/histo_main/kernel.bpl.ice2.bpl
#################
Tue May  4 08:03:27 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $histo_prescan_kernel
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.249777
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179800
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 9.032448
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1204010
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 8.717724
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1180600
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 5.451983
Added Horn clause: 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177320
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.172128
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188050
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1: positive
Prover Time taken = 7.794769
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1206580
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.646032
Prover time = 35.06
Number of prover queries = 7
Learner time = 0.71
Number of learner queries = 6
Total time: 35.93
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.32user 1.61system 0:37.44elapsed 7%CPU (0avgtext+0avgdata 66776maxresident)k
0inputs+216outputs (1major+35456minor)pagefaults 0swaps
FILE:parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
#################
Tue May  4 08:04:05 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 46
Generating VC of $scan_inter1_kernel
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1: positive
Prover Time taken = 0.205366
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202510
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0001 then 0 else 1) * 18000 + (if b0002 then 0 else 1) * 18000 + (if b0003 then 0 else 1) * 18000 + (if b0004 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0025 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 + (if b0041 then 0 else 1) * 18000 + (if b0042 then 0 else 1) * 18000 + (if b0043 then 0 else 1) * 18000 + (if b0044 then 0 else 1) * 18000 + (if b0045 then 0 else 1) * 18000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0: positive
Prover Time taken = 0.598611
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171940
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0001 then 0 else 1) * 18000 + (if b0002 then 0 else 1) * 18000 + (if b0003 then 0 else 1) * 18000 + (if b0004 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0025 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 < 441
}
Prover Time taken = 0.379755
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1227160
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0002 then 0 else 1) * 18000 + (if b0004 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0025 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 < 441
}
Prover Time taken = 0.447421
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1180320
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0002 then 0 else 1) * 18000 + (if b0004 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0025 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 < 441
}
Prover Time taken = 1.068624
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192340
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0002 then 0 else 1) * 18000 + (if b0004 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0025 then 0 else 1) * 18000 < 441
}
Prover Time taken = 1.521756
Prover time = 4.22
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 4.92
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.03user 1.38system 0:06.28elapsed 38%CPU (0avgtext+0avgdata 46600maxresident)k
0inputs+168outputs (1major+20219minor)pagefaults 0swaps
FILE:parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
#################
Tue May  4 08:04:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 44
Generating VC of $scan_inter2_kernel
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1: positive
Prover Time taken = 0.199672
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1180150
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1: positive
Prover Time taken = 0.386271
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229500
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0: positive
Prover Time taken = 0.369267
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186150
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.502128
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192690
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.439074
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1201300
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 < 441
}
Prover Time taken = 2.465266
Prover time = 4.36
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 5.05
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.96user 1.44system 0:06.40elapsed 37%CPU (0avgtext+0avgdata 46952maxresident)k
0inputs+168outputs (1major+20441minor)pagefaults 0swaps
FILE:parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
#################
Tue May  4 08:04:17 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 90
Generating VC of $scan_L1_kernel
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.217829
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1174600
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0024 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0045 then 0 else 1) * 36000 + (if b0046 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 4.374526
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1185290
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0024 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0045 then 0 else 1) * 36000 + (if b0046 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 6.158724
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1200930
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0024 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0046 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.240791
Added Horn clause: 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1216110
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0024 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 4.632709
Added Horn clause: 1 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188130
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.963742
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192090
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.603639
Added Horn clause: 4 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186220
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.96037
Added Horn clause: 4 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189880
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.00806
Added Horn clause: 1 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184700
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 4.497285
Added Horn clause: 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1173560
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 4.086393
Added Horn clause: 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1232710
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 < 441
}
Prover Time taken = 8.926376
Prover time = 48.67
Number of prover queries = 12
Learner time = 1.31
Number of learner queries = 11
Total time: 50.21
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.66user 2.12system 0:51.61elapsed 7%CPU (0avgtext+0avgdata 58192maxresident)k
0inputs+464outputs (1major+40240minor)pagefaults 0swaps
FILE:parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
#################
Tue May  4 08:05:09 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 18
Generating VC of $ComputeQ_GPU
Verifying $ComputeQ_GPU: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169178
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188980
Verifying $ComputeQ_GPU: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.093705
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183870
Verifying $ComputeQ_GPU: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.113136
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1220820
Verifying $ComputeQ_GPU: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.306884
Prover time = 0.68
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.13
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.85user 1.16system 0:02.45elapsed 82%CPU (0avgtext+0avgdata 44960maxresident)k
0inputs+112outputs (1major+16826minor)pagefaults 0swaps
FILE:parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
#################
Tue May  4 08:05:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/sad/larger_sad_calc_16/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/sad/larger_sad_calc_16/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 7
Generating VC of $larger_sad_calc_16
Verifying $larger_sad_calc_16: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1: positive
Prover Time taken = 0.171267
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/sad/larger_sad_calc_16/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1168690
Verifying $larger_sad_calc_16: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 12.87459
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/sad/larger_sad_calc_16/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186350
Verifying $larger_sad_calc_16: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 197.300163
Prover time = 210.35
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 210.67
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
1.03user 1.33system 3:32.02elapsed 1%CPU (0avgtext+0avgdata 47336maxresident)k
0inputs+88outputs (1major+17964minor)pagefaults 0swaps
FILE:parboil/sad/larger_sad_calc_16/kernel.bpl.ice2.bpl
#################
Tue May  4 08:08:43 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 89
Generating VC of $gen_hists
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170778
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1168670
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.635891
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182840
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.783451
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1208340
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.909072
Added Horn clause: 1 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188120
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.968963
Added Horn clause: 1 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179770
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.61879
Added Horn clause: 1 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179180
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.733525
Added Horn clause: 1 && 0 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189410
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.922737
Added Horn clause: 1 && 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192770
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.734467
Added Horn clause: 1 && 0 && 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197040
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.773512
Added Horn clause: 1 && 8 && 0 && 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184000
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.587705
Added Horn clause: 1 && 8 && 0 && 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1245430
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.772139
Added Horn clause: 1 && 8 && 0 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179040
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.586559
Added Horn clause: 1 && 8 && 10 && 9 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192960
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.80274
Added Horn clause: 1 && 11 && 13 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1203850
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.802411
Added Horn clause: 1 && 8 && 14 => 15
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193090
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.964936
Added Horn clause: 1 && 11 && 10 && 9 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188630
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.114112
Added Horn clause: 1 && 11 && 0 && 16 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197660
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.484967
Added Horn clause: 1 && 11 && 0 && 9 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1201380
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.380729
Added Horn clause: 1 && 8 && 10 && 18 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188570
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.302097
Added Horn clause: 1 && 11 && 10 && 0 => 20
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197330
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.076188
Added Horn clause: 1 && 11 && 10 && 20 => 21
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191380
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.119784
Prover time = 19.25
Number of prover queries = 22
Learner time = 2.50
Number of learner queries = 21
Total time: 22.31
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:20
verified

Boogie program verifier finished with 1 verified, 0 errors
2.98user 3.06system 0:23.73elapsed 25%CPU (0avgtext+0avgdata 68272maxresident)k
0inputs+864outputs (1major+87647minor)pagefaults 0swaps
FILE:parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
#################
Tue May  4 08:09:07 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 55
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.177178
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1197550
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0011 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0013 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0019 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0021 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0026 then 0 else 1) * 22000 + (if b0027 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0029 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0035 then 0 else 1) * 22000 + (if b0036 then 0 else 1) * 22000 + (if b0037 then 0 else 1) * 22000 + (if b0038 then 0 else 1) * 22000 + (if b0039 then 0 else 1) * 22000 + (if b0040 then 0 else 1) * 22000 + (if b0041 then 0 else 1) * 22000 + (if b0042 then 0 else 1) * 22000 + (if b0043 then 0 else 1) * 22000 + (if b0044 then 0 else 1) * 22000 + (if b0045 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0051 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,1,0,1,1: positive
Prover Time taken = 0.33568
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1168110
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0011 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0013 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0019 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0021 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0026 then 0 else 1) * 22000 + (if b0027 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0029 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0035 then 0 else 1) * 22000 + (if b0038 then 0 else 1) * 22000 + (if b0040 then 0 else 1) * 22000 + (if b0041 then 0 else 1) * 22000 + (if b0042 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0051 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,0,0,1,1,1: positive
Prover Time taken = 0.343525
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1184180
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0011 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0013 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0019 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0021 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0026 then 0 else 1) * 22000 + (if b0027 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0029 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0035 then 0 else 1) * 22000 + (if b0042 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1: positive
Prover Time taken = 0.415772
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1210300
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0011 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0013 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0019 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0021 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0026 then 0 else 1) * 22000 + (if b0027 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0029 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0035 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.301399
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1199100
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0011 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0013 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0019 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0021 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0026 then 0 else 1) * 22000 + (if b0027 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0029 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Prover Time taken = 0.389668
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1179090
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0011 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0013 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0019 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0021 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0026 then 0 else 1) * 22000 + (if b0027 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0029 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Prover Time taken = 0.309354
Added Horn clause: 7 && 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Command exited with non-zero status 124
1.18user 1.46system 19:58.63elapsed 0%CPU (0avgtext+0avgdata 57408maxresident)k
0inputs+248outputs (1major+25152minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel0.bpl.ice2.bpl
#################
Tue May  4 08:29:06 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168687
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1211540
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.070297
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1191380
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.171825
Prover time = 0.41
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.74
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.77user 1.06system 0:02.04elapsed 89%CPU (0avgtext+0avgdata 43348maxresident)k
0inputs+88outputs (1major+13925minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel1.bpl.ice2.bpl
#################
Tue May  4 08:29:08 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 180
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.190855
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1184070
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0067 then 0 else 1) * 72000 + (if b0068 then 0 else 1) * 72000 + (if b0069 then 0 else 1) * 72000 + (if b0070 then 0 else 1) * 72000 + (if b0071 then 0 else 1) * 72000 + (if b0072 then 0 else 1) * 72000 + (if b0073 then 0 else 1) * 72000 + (if b0074 then 0 else 1) * 72000 + (if b0075 then 0 else 1) * 72000 + (if b0076 then 0 else 1) * 72000 + (if b0077 then 0 else 1) * 72000 + (if b0078 then 0 else 1) * 72000 + (if b0079 then 0 else 1) * 72000 + (if b0080 then 0 else 1) * 72000 + (if b0081 then 0 else 1) * 72000 + (if b0082 then 0 else 1) * 72000 + (if b0083 then 0 else 1) * 72000 + (if b0084 then 0 else 1) * 72000 + (if b0085 then 0 else 1) * 72000 + (if b0086 then 0 else 1) * 72000 + (if b0087 then 0 else 1) * 72000 + (if b0088 then 0 else 1) * 72000 + (if b0089 then 0 else 1) * 72000 + (if b0090 then 0 else 1) * 72000 + (if b0091 then 0 else 1) * 72000 + (if b0092 then 0 else 1) * 72000 + (if b0093 then 0 else 1) * 72000 + (if b0094 then 0 else 1) * 72000 + (if b0095 then 0 else 1) * 72000 + (if b0096 then 0 else 1) * 72000 + (if b0097 then 0 else 1) * 72000 + (if b0098 then 0 else 1) * 72000 + (if b0099 then 0 else 1) * 72000 + (if b0100 then 0 else 1) * 72000 + (if b0101 then 0 else 1) * 72000 + (if b0102 then 0 else 1) * 72000 + (if b0103 then 0 else 1) * 72000 + (if b0104 then 0 else 1) * 72000 + (if b0105 then 0 else 1) * 72000 + (if b0106 then 0 else 1) * 72000 + (if b0107 then 0 else 1) * 72000 + (if b0108 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.351743
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1198520
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0067 then 0 else 1) * 72000 + (if b0068 then 0 else 1) * 72000 + (if b0069 then 0 else 1) * 72000 + (if b0076 then 0 else 1) * 72000 + (if b0078 then 0 else 1) * 72000 + (if b0081 then 0 else 1) * 72000 + (if b0082 then 0 else 1) * 72000 + (if b0083 then 0 else 1) * 72000 + (if b0084 then 0 else 1) * 72000 + (if b0097 then 0 else 1) * 72000 + (if b0102 then 0 else 1) * 72000 + (if b0103 then 0 else 1) * 72000 + (if b0105 then 0 else 1) * 72000 + (if b0107 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.015038
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1196540
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0067 then 0 else 1) * 72000 + (if b0081 then 0 else 1) * 72000 + (if b0082 then 0 else 1) * 72000 + (if b0102 then 0 else 1) * 72000 + (if b0103 then 0 else 1) * 72000 + (if b0107 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.373634
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1176400
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0067 then 0 else 1) * 72000 + (if b0081 then 0 else 1) * 72000 + (if b0102 then 0 else 1) * 72000 + (if b0103 then 0 else 1) * 72000 + (if b0107 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.021352
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1182990
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0081 then 0 else 1) * 72000 + (if b0102 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.563593
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1182550
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 1.816566
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1187880
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 2.460214
Added Horn clause: 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1198260
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 1.425204
Added Horn clause: 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1188800
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 1.418985
Added Horn clause: 12 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1252900
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 1.273424
Added Horn clause: 14 && 15 && 0 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Command exited with non-zero status 124
2.80user 2.05system 19:58.64elapsed 0%CPU (0avgtext+0avgdata 81100maxresident)k
0inputs+576outputs (1major+79370minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel2.bpl.ice2.bpl
#################
Tue May  4 08:49:07 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel3.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel3.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $kernel3
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.173367
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1179780
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.091628
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1177440
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.148034
Prover time = 0.41
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.73
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.74user 1.09system 0:02.03elapsed 90%CPU (0avgtext+0avgdata 43628maxresident)k
0inputs+88outputs (1major+14149minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel3.bpl.ice2.bpl
#################
Tue May  4 08:49:09 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel4.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel4.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $kernel4
Verifying $kernel4: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.165902
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel4.bpl.ice2.bpl
Total learner time was 00:00:00.1173620
Verifying $kernel4: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.165268
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel4.bpl.ice2.bpl
Total learner time was 00:00:00.1222230
Verifying $kernel4: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.211853
Prover time = 0.54
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.86
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.73user 1.11system 0:02.19elapsed 84%CPU (0avgtext+0avgdata 43992maxresident)k
0inputs+80outputs (1major+14701minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel4.bpl.ice2.bpl
#################
Tue May  4 08:49:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 119
Generating VC of $kernel5
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.181129
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1185470
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0059 then 0 else 1) * 47000 + (if b0060 then 0 else 1) * 47000 + (if b0061 then 0 else 1) * 47000 + (if b0062 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0064 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0066 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0069 then 0 else 1) * 47000 + (if b0070 then 0 else 1) * 47000 + (if b0071 then 0 else 1) * 47000 + (if b0072 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.908185
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1192990
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0066 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.756269
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1244030
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0066 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.877494
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1228510
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.812969
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1206820
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 1.017166
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1219980
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 0.910013
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Command exited with non-zero status 124
1.51user 1.57system 19:58.81elapsed 0%CPU (0avgtext+0avgdata 68200maxresident)k
0inputs+288outputs (1major+38778minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel5.bpl.ice2.bpl
#################
Tue May  4 09:09:10 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 217
Generating VC of $kernel6
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.19389
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1166460
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0065 then 0 else 1) * 86000 + (if b0066 then 0 else 1) * 86000 + (if b0067 then 0 else 1) * 86000 + (if b0068 then 0 else 1) * 86000 + (if b0069 then 0 else 1) * 86000 + (if b0070 then 0 else 1) * 86000 + (if b0071 then 0 else 1) * 86000 + (if b0072 then 0 else 1) * 86000 + (if b0073 then 0 else 1) * 86000 + (if b0074 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0076 then 0 else 1) * 86000 + (if b0077 then 0 else 1) * 86000 + (if b0078 then 0 else 1) * 86000 + (if b0079 then 0 else 1) * 86000 + (if b0080 then 0 else 1) * 86000 + (if b0081 then 0 else 1) * 86000 + (if b0082 then 0 else 1) * 86000 + (if b0083 then 0 else 1) * 86000 + (if b0084 then 0 else 1) * 86000 + (if b0085 then 0 else 1) * 86000 + (if b0086 then 0 else 1) * 86000 + (if b0087 then 0 else 1) * 86000 + (if b0088 then 0 else 1) * 86000 + (if b0089 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0091 then 0 else 1) * 86000 + (if b0092 then 0 else 1) * 86000 + (if b0093 then 0 else 1) * 86000 + (if b0094 then 0 else 1) * 86000 + (if b0095 then 0 else 1) * 86000 + (if b0096 then 0 else 1) * 86000 + (if b0097 then 0 else 1) * 86000 + (if b0098 then 0 else 1) * 86000 + (if b0099 then 0 else 1) * 86000 + (if b0100 then 0 else 1) * 86000 + (if b0101 then 0 else 1) * 86000 + (if b0102 then 0 else 1) * 86000 + (if b0103 then 0 else 1) * 86000 + (if b0104 then 0 else 1) * 86000 + (if b0105 then 0 else 1) * 86000 + (if b0106 then 0 else 1) * 86000 + (if b0107 then 0 else 1) * 86000 + (if b0108 then 0 else 1) * 86000 + (if b0109 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.84748
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1189130
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0065 then 0 else 1) * 86000 + (if b0066 then 0 else 1) * 86000 + (if b0071 then 0 else 1) * 86000 + (if b0072 then 0 else 1) * 86000 + (if b0074 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0076 then 0 else 1) * 86000 + (if b0077 then 0 else 1) * 86000 + (if b0082 then 0 else 1) * 86000 + (if b0083 then 0 else 1) * 86000 + (if b0086 then 0 else 1) * 86000 + (if b0088 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0091 then 0 else 1) * 86000 + (if b0092 then 0 else 1) * 86000 + (if b0094 then 0 else 1) * 86000 + (if b0095 then 0 else 1) * 86000 + (if b0096 then 0 else 1) * 86000 + (if b0097 then 0 else 1) * 86000 + (if b0098 then 0 else 1) * 86000 + (if b0101 then 0 else 1) * 86000 + (if b0103 then 0 else 1) * 86000 + (if b0104 then 0 else 1) * 86000 + (if b0105 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.04309
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1201910
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0071 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0076 then 0 else 1) * 86000 + (if b0077 then 0 else 1) * 86000 + (if b0082 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0094 then 0 else 1) * 86000 + (if b0095 then 0 else 1) * 86000 + (if b0098 then 0 else 1) * 86000 + (if b0105 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.51615
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1216160
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0071 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0082 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0098 then 0 else 1) * 86000 + (if b0105 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.638298
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1233010
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0082 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.259531
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1193330
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Prover Time taken = 2.581022
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1220270
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Prover Time taken = 2.200212
Added Horn clause: 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1228700
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Prover Time taken = 1.558985
Added Horn clause: 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1209920
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Prover Time taken = 4.10424
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Command exited with non-zero status 124
2.93user 2.03system 19:58.51elapsed 0%CPU (0avgtext+0avgdata 83856maxresident)k
0inputs+600outputs (1major+81382minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel6.bpl.ice2.bpl
#################
Tue May  4 09:29:08 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 128
Generating VC of $kernel7
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.181178
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1168620
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0053 then 0 else 1) * 51000 + (if b0054 then 0 else 1) * 51000 + (if b0055 then 0 else 1) * 51000 + (if b0056 then 0 else 1) * 51000 + (if b0057 then 0 else 1) * 51000 + (if b0058 then 0 else 1) * 51000 + (if b0059 then 0 else 1) * 51000 + (if b0060 then 0 else 1) * 51000 + (if b0061 then 0 else 1) * 51000 + (if b0062 then 0 else 1) * 51000 + (if b0063 then 0 else 1) * 51000 + (if b0064 then 0 else 1) * 51000 + (if b0065 then 0 else 1) * 51000 + (if b0066 then 0 else 1) * 51000 + (if b0067 then 0 else 1) * 51000 + (if b0068 then 0 else 1) * 51000 + (if b0069 then 0 else 1) * 51000 + (if b0070 then 0 else 1) * 51000 + (if b0071 then 0 else 1) * 51000 + (if b0072 then 0 else 1) * 51000 + (if b0073 then 0 else 1) * 51000 + (if b0074 then 0 else 1) * 51000 + (if b0075 then 0 else 1) * 51000 + (if b0076 then 0 else 1) * 51000 + (if b0077 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.260632
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1216820
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0055 then 0 else 1) * 51000 + (if b0056 then 0 else 1) * 51000 + (if b0057 then 0 else 1) * 51000 + (if b0058 then 0 else 1) * 51000 + (if b0060 then 0 else 1) * 51000 + (if b0061 then 0 else 1) * 51000 + (if b0065 then 0 else 1) * 51000 + (if b0066 then 0 else 1) * 51000 + (if b0067 then 0 else 1) * 51000 + (if b0072 then 0 else 1) * 51000 + (if b0073 then 0 else 1) * 51000 + (if b0074 then 0 else 1) * 51000 + (if b0075 then 0 else 1) * 51000 + (if b0077 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.925016
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1203130
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0057 then 0 else 1) * 51000 + (if b0061 then 0 else 1) * 51000 + (if b0066 then 0 else 1) * 51000 + (if b0067 then 0 else 1) * 51000 + (if b0072 then 0 else 1) * 51000 + (if b0075 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.346126
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1197180
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0066 then 0 else 1) * 51000 + (if b0072 then 0 else 1) * 51000 + (if b0075 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.289917
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1205870
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0066 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.433431
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1203620
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 3.275979
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1228640
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 4.948253
Added Horn clause: 8 && 9 && 0 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Command exited with non-zero status 124
1.72user 1.72system 19:58.60elapsed 0%CPU (0avgtext+0avgdata 71040maxresident)k
0inputs+368outputs (1major+46094minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel7.bpl.ice2.bpl
#################
Tue May  4 09:49:07 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel8.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel8.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 7
Generating VC of $kernel8
Verifying $kernel8: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1: positive
Prover Time taken = 0.166702
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel8.bpl.ice2.bpl
Total learner time was 00:00:00.1177410
Verifying $kernel8: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.097942
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel8.bpl.ice2.bpl
Total learner time was 00:00:00.1202730
Verifying $kernel8: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.288718
Prover time = 0.55
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.87
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.73user 1.10system 0:02.19elapsed 83%CPU (0avgtext+0avgdata 43444maxresident)k
0inputs+88outputs (1major+13983minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel8.bpl.ice2.bpl
#################
Tue May  4 09:49:09 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171289
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1176630
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.076449
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1169660
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.127998
Prover time = 0.38
Number of prover queries = 3
Learner time = 0.23
Number of learner queries = 2
Total time: 0.69
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.77user 1.07system 0:02.01elapsed 91%CPU (0avgtext+0avgdata 43344maxresident)k
0inputs+80outputs (1major+14509minor)pagefaults 0swaps
FILE:polybench/datamining/covariance/kernel0.bpl.ice2.bpl
#################
Tue May  4 09:49:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 93
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.181295
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1166550
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0004 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0006 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0010 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0050 then 0 else 1) * 37000 + (if b0051 then 0 else 1) * 37000 + (if b0052 then 0 else 1) * 37000 + (if b0053 then 0 else 1) * 37000 + (if b0054 then 0 else 1) * 37000 + (if b0055 then 0 else 1) * 37000 + (if b0056 then 0 else 1) * 37000 + (if b0057 then 0 else 1) * 37000 + (if b0058 then 0 else 1) * 37000 + (if b0059 then 0 else 1) * 37000 + (if b0060 then 0 else 1) * 37000 + (if b0061 then 0 else 1) * 37000 + (if b0062 then 0 else 1) * 37000 + (if b0063 then 0 else 1) * 37000 + (if b0064 then 0 else 1) * 37000 + (if b0065 then 0 else 1) * 37000 + (if b0066 then 0 else 1) * 37000 + (if b0067 then 0 else 1) * 37000 + (if b0068 then 0 else 1) * 37000 + (if b0069 then 0 else 1) * 37000 + (if b0070 then 0 else 1) * 37000 + (if b0071 then 0 else 1) * 37000 + (if b0072 then 0 else 1) * 37000 + (if b0073 then 0 else 1) * 37000 + (if b0074 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.715455
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1241670
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0004 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0006 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0010 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0052 then 0 else 1) * 37000 + (if b0054 then 0 else 1) * 37000 + (if b0055 then 0 else 1) * 37000 + (if b0060 then 0 else 1) * 37000 + (if b0061 then 0 else 1) * 37000 + (if b0064 then 0 else 1) * 37000 + (if b0065 then 0 else 1) * 37000 + (if b0066 then 0 else 1) * 37000 + (if b0070 then 0 else 1) * 37000 + (if b0074 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.803311
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1205560
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0004 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0006 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0010 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0054 then 0 else 1) * 37000 + (if b0061 then 0 else 1) * 37000 + (if b0070 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.592709
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1178850
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0004 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0006 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0010 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0054 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.497492
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1166920
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0004 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0006 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0010 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 0.921531
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1196440
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0004 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0006 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 0.848118
Added Horn clause: 5 && 0 && 0 && 0 && 0 && 0 && 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1228870
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 0.880073
Added Horn clause: 8 && 0 && 6 && 0 && 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Command exited with non-zero status 124
1.54user 1.63system 19:58.76elapsed 0%CPU (0avgtext+0avgdata 67340maxresident)k
0inputs+288outputs (1major+38624minor)pagefaults 0swaps
FILE:polybench/datamining/covariance/kernel1.bpl.ice2.bpl
#################
Tue May  4 10:09:10 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 32
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168927
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1172700
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.955556
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1181240
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.627638
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1204750
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.651992
Added Horn clause: 0 && 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1174430
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 2.755142
Added Horn clause: 0 && 0 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1186140
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 2.727565
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1187080
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 4.138883
Added Horn clause: 0 && 0 && 0 && 0 && 3 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1189940
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 15.424198
Prover time = 29.45
Number of prover queries = 8
Learner time = 0.83
Number of learner queries = 7
Total time: 30.43
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
1.16user 1.62system 0:31.80elapsed 8%CPU (0avgtext+0avgdata 54736maxresident)k
0inputs+256outputs (1major+29592minor)pagefaults 0swaps
FILE:polybench/datamining/covariance/kernel2.bpl.ice2.bpl
#################
Tue May  4 10:09:42 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 216
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.192298
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1216020
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0065 then 0 else 1) * 86000 + (if b0066 then 0 else 1) * 86000 + (if b0067 then 0 else 1) * 86000 + (if b0068 then 0 else 1) * 86000 + (if b0069 then 0 else 1) * 86000 + (if b0070 then 0 else 1) * 86000 + (if b0071 then 0 else 1) * 86000 + (if b0072 then 0 else 1) * 86000 + (if b0073 then 0 else 1) * 86000 + (if b0074 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0076 then 0 else 1) * 86000 + (if b0077 then 0 else 1) * 86000 + (if b0078 then 0 else 1) * 86000 + (if b0079 then 0 else 1) * 86000 + (if b0080 then 0 else 1) * 86000 + (if b0081 then 0 else 1) * 86000 + (if b0082 then 0 else 1) * 86000 + (if b0083 then 0 else 1) * 86000 + (if b0084 then 0 else 1) * 86000 + (if b0085 then 0 else 1) * 86000 + (if b0086 then 0 else 1) * 86000 + (if b0087 then 0 else 1) * 86000 + (if b0088 then 0 else 1) * 86000 + (if b0089 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0091 then 0 else 1) * 86000 + (if b0092 then 0 else 1) * 86000 + (if b0093 then 0 else 1) * 86000 + (if b0094 then 0 else 1) * 86000 + (if b0095 then 0 else 1) * 86000 + (if b0096 then 0 else 1) * 86000 + (if b0097 then 0 else 1) * 86000 + (if b0098 then 0 else 1) * 86000 + (if b0099 then 0 else 1) * 86000 + (if b0100 then 0 else 1) * 86000 + (if b0101 then 0 else 1) * 86000 + (if b0102 then 0 else 1) * 86000 + (if b0103 then 0 else 1) * 86000 + (if b0104 then 0 else 1) * 86000 + (if b0105 then 0 else 1) * 86000 + (if b0106 then 0 else 1) * 86000 + (if b0107 then 0 else 1) * 86000 + (if b0108 then 0 else 1) * 86000 + (if b0109 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.553213
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1193310
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0065 then 0 else 1) * 86000 + (if b0069 then 0 else 1) * 86000 + (if b0070 then 0 else 1) * 86000 + (if b0074 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0076 then 0 else 1) * 86000 + (if b0081 then 0 else 1) * 86000 + (if b0084 then 0 else 1) * 86000 + (if b0085 then 0 else 1) * 86000 + (if b0089 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0094 then 0 else 1) * 86000 + (if b0095 then 0 else 1) * 86000 + (if b0098 then 0 else 1) * 86000 + (if b0099 then 0 else 1) * 86000 + (if b0102 then 0 else 1) * 86000 + (if b0103 then 0 else 1) * 86000 + (if b0104 then 0 else 1) * 86000 + (if b0105 then 0 else 1) * 86000 + (if b0107 then 0 else 1) * 86000 + (if b0108 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.430987
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1196010
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0084 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0094 then 0 else 1) * 86000 + (if b0095 then 0 else 1) * 86000 + (if b0098 then 0 else 1) * 86000 + (if b0103 then 0 else 1) * 86000 + (if b0105 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.28631
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1233360
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0084 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.127896
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1224640
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0084 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.274929
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1239480
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Prover Time taken = 2.609942
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1213390
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Prover Time taken = 2.178181
Added Horn clause: 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1224070
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Prover Time taken = 2.493112
Added Horn clause: 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1232190
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Prover Time taken = 1.761879
Added Horn clause: 12 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1254930
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Prover Time taken = 2.298157
Added Horn clause: 14 && 15 && 0 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Command exited with non-zero status 124
3.03user 2.09system 19:58.64elapsed 0%CPU (0avgtext+0avgdata 82540maxresident)k
0inputs+672outputs (1major+86323minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
#################
Tue May  4 10:29:40 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 227
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.191615
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1208720
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0004 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0006 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0013 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0015 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0029 then 0 else 1) * 90000 + (if b0030 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0032 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0056 then 0 else 1) * 90000 + (if b0057 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0059 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0068 then 0 else 1) * 90000 + (if b0069 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0071 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0080 then 0 else 1) * 90000 + (if b0081 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0083 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0091 then 0 else 1) * 90000 + (if b0092 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0094 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0102 then 0 else 1) * 90000 + (if b0103 then 0 else 1) * 90000 + (if b0104 then 0 else 1) * 90000 + (if b0105 then 0 else 1) * 90000 + (if b0106 then 0 else 1) * 90000 + (if b0107 then 0 else 1) * 90000 + (if b0108 then 0 else 1) * 90000 + (if b0109 then 0 else 1) * 90000 + (if b0110 then 0 else 1) * 90000 + (if b0111 then 0 else 1) * 90000 + (if b0112 then 0 else 1) * 90000 + (if b0113 then 0 else 1) * 90000 + (if b0114 then 0 else 1) * 90000 + (if b0115 then 0 else 1) * 90000 + (if b0116 then 0 else 1) * 90000 + (if b0117 then 0 else 1) * 90000 + (if b0118 then 0 else 1) * 90000 + (if b0119 then 0 else 1) * 90000 + (if b0120 then 0 else 1) * 90000 + (if b0121 then 0 else 1) * 90000 + (if b0122 then 0 else 1) * 90000 + (if b0123 then 0 else 1) * 90000 + (if b0124 then 0 else 1) * 90000 + (if b0125 then 0 else 1) * 90000 + (if b0126 then 0 else 1) * 90000 + (if b0127 then 0 else 1) * 90000 + (if b0128 then 0 else 1) * 90000 + (if b0129 then 0 else 1) * 90000 + (if b0130 then 0 else 1) * 90000 + (if b0131 then 0 else 1) * 90000 + (if b0132 then 0 else 1) * 90000 + (if b0133 then 0 else 1) * 90000 + (if b0134 then 0 else 1) * 90000 + (if b0135 then 0 else 1) * 90000 + (if b0136 then 0 else 1) * 90000 + (if b0137 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0164 then 0 else 1) * 90000 + (if b0165 then 0 else 1) * 90000 + (if b0166 then 0 else 1) * 90000 + (if b0167 then 0 else 1) * 90000 + (if b0168 then 0 else 1) * 90000 + (if b0169 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0174 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0177 then 0 else 1) * 90000 + (if b0178 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0183 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0186 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.746311
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1207560
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0004 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0006 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0013 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0015 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0029 then 0 else 1) * 90000 + (if b0030 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0032 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0056 then 0 else 1) * 90000 + (if b0057 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0059 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0068 then 0 else 1) * 90000 + (if b0069 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0071 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0080 then 0 else 1) * 90000 + (if b0081 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0083 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0091 then 0 else 1) * 90000 + (if b0092 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0094 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0107 then 0 else 1) * 90000 + (if b0108 then 0 else 1) * 90000 + (if b0114 then 0 else 1) * 90000 + (if b0117 then 0 else 1) * 90000 + (if b0119 then 0 else 1) * 90000 + (if b0127 then 0 else 1) * 90000 + (if b0128 then 0 else 1) * 90000 + (if b0132 then 0 else 1) * 90000 + (if b0135 then 0 else 1) * 90000 + (if b0137 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0164 then 0 else 1) * 90000 + (if b0165 then 0 else 1) * 90000 + (if b0166 then 0 else 1) * 90000 + (if b0167 then 0 else 1) * 90000 + (if b0168 then 0 else 1) * 90000 + (if b0169 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0174 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0177 then 0 else 1) * 90000 + (if b0178 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0183 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0186 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 6.503706
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1238470
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0004 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0006 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0013 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0015 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0029 then 0 else 1) * 90000 + (if b0030 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0032 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0056 then 0 else 1) * 90000 + (if b0057 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0059 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0068 then 0 else 1) * 90000 + (if b0069 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0071 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0080 then 0 else 1) * 90000 + (if b0081 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0083 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0091 then 0 else 1) * 90000 + (if b0092 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0094 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0108 then 0 else 1) * 90000 + (if b0114 then 0 else 1) * 90000 + (if b0119 then 0 else 1) * 90000 + (if b0132 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0164 then 0 else 1) * 90000 + (if b0165 then 0 else 1) * 90000 + (if b0166 then 0 else 1) * 90000 + (if b0167 then 0 else 1) * 90000 + (if b0168 then 0 else 1) * 90000 + (if b0169 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0174 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0177 then 0 else 1) * 90000 + (if b0178 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0183 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0186 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.453513
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1223570
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0004 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0006 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0013 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0015 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0029 then 0 else 1) * 90000 + (if b0030 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0032 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0056 then 0 else 1) * 90000 + (if b0057 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0059 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0068 then 0 else 1) * 90000 + (if b0069 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0071 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0080 then 0 else 1) * 90000 + (if b0081 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0083 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0091 then 0 else 1) * 90000 + (if b0092 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0094 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0114 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0164 then 0 else 1) * 90000 + (if b0165 then 0 else 1) * 90000 + (if b0166 then 0 else 1) * 90000 + (if b0167 then 0 else 1) * 90000 + (if b0168 then 0 else 1) * 90000 + (if b0169 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0174 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0177 then 0 else 1) * 90000 + (if b0178 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0183 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0186 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.514733
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1224360
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0004 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0006 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0013 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0015 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0029 then 0 else 1) * 90000 + (if b0030 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0032 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0056 then 0 else 1) * 90000 + (if b0057 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0059 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0068 then 0 else 1) * 90000 + (if b0069 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0071 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0080 then 0 else 1) * 90000 + (if b0081 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0083 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0091 then 0 else 1) * 90000 + (if b0092 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0094 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0164 then 0 else 1) * 90000 + (if b0165 then 0 else 1) * 90000 + (if b0166 then 0 else 1) * 90000 + (if b0167 then 0 else 1) * 90000 + (if b0168 then 0 else 1) * 90000 + (if b0169 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0174 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0177 then 0 else 1) * 90000 + (if b0178 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0183 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0186 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 2.884989
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1189590
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0004 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0006 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0013 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0015 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0029 then 0 else 1) * 90000 + (if b0030 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0032 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0056 then 0 else 1) * 90000 + (if b0057 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0059 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0068 then 0 else 1) * 90000 + (if b0069 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0071 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0081 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0083 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0091 then 0 else 1) * 90000 + (if b0092 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0094 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0164 then 0 else 1) * 90000 + (if b0165 then 0 else 1) * 90000 + (if b0166 then 0 else 1) * 90000 + (if b0167 then 0 else 1) * 90000 + (if b0168 then 0 else 1) * 90000 + (if b0169 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0174 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0177 then 0 else 1) * 90000 + (if b0178 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0183 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0186 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 4.52878
Added Horn clause: 7 && 0 && 6 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Command exited with non-zero status 124
2.74user 1.69system 19:58.66elapsed 0%CPU (0avgtext+0avgdata 91692maxresident)k
0inputs+400outputs (1major+76058minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
#################
Tue May  4 10:49:39 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 88
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.182335
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1173080
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.557709
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1190620
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.883983
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1201730
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.486041
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1183710
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.448649
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1206000
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.286789
Added Horn clause: 6 && 7 && 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Command exited with non-zero status 124
1.24user 1.39system 19:58.61elapsed 0%CPU (0avgtext+0avgdata 58552maxresident)k
0inputs+216outputs (1major+28264minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
#################
Tue May  4 11:09:37 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 106
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.183238
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1229640
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0045 then 0 else 1) * 42000 + (if b0046 then 0 else 1) * 42000 + (if b0047 then 0 else 1) * 42000 + (if b0048 then 0 else 1) * 42000 + (if b0049 then 0 else 1) * 42000 + (if b0050 then 0 else 1) * 42000 + (if b0051 then 0 else 1) * 42000 + (if b0052 then 0 else 1) * 42000 + (if b0053 then 0 else 1) * 42000 + (if b0054 then 0 else 1) * 42000 + (if b0055 then 0 else 1) * 42000 + (if b0056 then 0 else 1) * 42000 + (if b0057 then 0 else 1) * 42000 + (if b0058 then 0 else 1) * 42000 + (if b0059 then 0 else 1) * 42000 + (if b0060 then 0 else 1) * 42000 + (if b0061 then 0 else 1) * 42000 + (if b0062 then 0 else 1) * 42000 + (if b0063 then 0 else 1) * 42000 + (if b0064 then 0 else 1) * 42000 + (if b0065 then 0 else 1) * 42000 + (if b0066 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.673481
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1184800
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0045 then 0 else 1) * 42000 + (if b0047 then 0 else 1) * 42000 + (if b0056 then 0 else 1) * 42000 + (if b0057 then 0 else 1) * 42000 + (if b0063 then 0 else 1) * 42000 + (if b0064 then 0 else 1) * 42000 + (if b0066 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.746197
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1208160
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0057 then 0 else 1) * 42000 + (if b0063 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.850579
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1193110
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 0.817399
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1191730
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 0.844209
Added Horn clause: 6 && 0 && 0 && 0 && 0 && 0 && 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Command exited with non-zero status 124
1.36user 1.45system 19:58.64elapsed 0%CPU (0avgtext+0avgdata 70752maxresident)k
0inputs+256outputs (1major+34212minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
#################
Tue May  4 11:29:36 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 119
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.185404
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1225220
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0059 then 0 else 1) * 47000 + (if b0060 then 0 else 1) * 47000 + (if b0061 then 0 else 1) * 47000 + (if b0062 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0064 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0066 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0069 then 0 else 1) * 47000 + (if b0070 then 0 else 1) * 47000 + (if b0071 then 0 else 1) * 47000 + (if b0072 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.894839
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1180070
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0059 then 0 else 1) * 47000 + (if b0060 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0066 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0069 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.759037
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1184200
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0059 then 0 else 1) * 47000 + (if b0060 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.847787
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1214180
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0059 then 0 else 1) * 47000 + (if b0060 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.629627
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1209050
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 0.905833
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1200540
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 0.964913
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1206460
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 0.880494
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Command exited with non-zero status 124
1.66user 1.65system 19:58.61elapsed 0%CPU (0avgtext+0avgdata 69696maxresident)k
0inputs+344outputs (1major+41738minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
#################
Tue May  4 11:49:35 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 194
Generating VC of $kernel3
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.185571
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1189460
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0064 then 0 else 1) * 77000 + (if b0065 then 0 else 1) * 77000 + (if b0066 then 0 else 1) * 77000 + (if b0067 then 0 else 1) * 77000 + (if b0068 then 0 else 1) * 77000 + (if b0069 then 0 else 1) * 77000 + (if b0070 then 0 else 1) * 77000 + (if b0071 then 0 else 1) * 77000 + (if b0072 then 0 else 1) * 77000 + (if b0073 then 0 else 1) * 77000 + (if b0074 then 0 else 1) * 77000 + (if b0075 then 0 else 1) * 77000 + (if b0076 then 0 else 1) * 77000 + (if b0077 then 0 else 1) * 77000 + (if b0078 then 0 else 1) * 77000 + (if b0079 then 0 else 1) * 77000 + (if b0080 then 0 else 1) * 77000 + (if b0081 then 0 else 1) * 77000 + (if b0082 then 0 else 1) * 77000 + (if b0083 then 0 else 1) * 77000 + (if b0084 then 0 else 1) * 77000 + (if b0085 then 0 else 1) * 77000 + (if b0086 then 0 else 1) * 77000 + (if b0087 then 0 else 1) * 77000 + (if b0088 then 0 else 1) * 77000 + (if b0089 then 0 else 1) * 77000 + (if b0090 then 0 else 1) * 77000 + (if b0091 then 0 else 1) * 77000 + (if b0092 then 0 else 1) * 77000 + (if b0093 then 0 else 1) * 77000 + (if b0094 then 0 else 1) * 77000 + (if b0095 then 0 else 1) * 77000 + (if b0096 then 0 else 1) * 77000 + (if b0097 then 0 else 1) * 77000 + (if b0098 then 0 else 1) * 77000 + (if b0099 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0111 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.903066
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1214650
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0067 then 0 else 1) * 77000 + (if b0072 then 0 else 1) * 77000 + (if b0073 then 0 else 1) * 77000 + (if b0077 then 0 else 1) * 77000 + (if b0079 then 0 else 1) * 77000 + (if b0080 then 0 else 1) * 77000 + (if b0081 then 0 else 1) * 77000 + (if b0083 then 0 else 1) * 77000 + (if b0085 then 0 else 1) * 77000 + (if b0087 then 0 else 1) * 77000 + (if b0088 then 0 else 1) * 77000 + (if b0089 then 0 else 1) * 77000 + (if b0090 then 0 else 1) * 77000 + (if b0093 then 0 else 1) * 77000 + (if b0096 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0111 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.268051
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1222630
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0079 then 0 else 1) * 77000 + (if b0083 then 0 else 1) * 77000 + (if b0087 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0111 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.45635
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1183930
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0079 then 0 else 1) * 77000 + (if b0087 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0111 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.54856
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1188440
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0087 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0111 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.684335
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1201840
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0111 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Prover Time taken = 3.106141
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1194460
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Prover Time taken = 2.953593
Added Horn clause: 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1205740
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Prover Time taken = 1.712251
Added Horn clause: 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1199770
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Prover Time taken = 2.378805
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Command exited with non-zero status 124
2.65user 2.02system 19:58.62elapsed 0%CPU (0avgtext+0avgdata 79492maxresident)k
0inputs+528outputs (1major+76148minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
#################
Tue May  4 12:09:33 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 228
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.191378
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1204080
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0065 then 0 else 1) * 91000 + (if b0066 then 0 else 1) * 91000 + (if b0067 then 0 else 1) * 91000 + (if b0068 then 0 else 1) * 91000 + (if b0069 then 0 else 1) * 91000 + (if b0070 then 0 else 1) * 91000 + (if b0071 then 0 else 1) * 91000 + (if b0072 then 0 else 1) * 91000 + (if b0073 then 0 else 1) * 91000 + (if b0074 then 0 else 1) * 91000 + (if b0075 then 0 else 1) * 91000 + (if b0076 then 0 else 1) * 91000 + (if b0077 then 0 else 1) * 91000 + (if b0078 then 0 else 1) * 91000 + (if b0079 then 0 else 1) * 91000 + (if b0080 then 0 else 1) * 91000 + (if b0081 then 0 else 1) * 91000 + (if b0082 then 0 else 1) * 91000 + (if b0083 then 0 else 1) * 91000 + (if b0084 then 0 else 1) * 91000 + (if b0085 then 0 else 1) * 91000 + (if b0086 then 0 else 1) * 91000 + (if b0087 then 0 else 1) * 91000 + (if b0088 then 0 else 1) * 91000 + (if b0089 then 0 else 1) * 91000 + (if b0090 then 0 else 1) * 91000 + (if b0091 then 0 else 1) * 91000 + (if b0092 then 0 else 1) * 91000 + (if b0093 then 0 else 1) * 91000 + (if b0094 then 0 else 1) * 91000 + (if b0095 then 0 else 1) * 91000 + (if b0096 then 0 else 1) * 91000 + (if b0097 then 0 else 1) * 91000 + (if b0098 then 0 else 1) * 91000 + (if b0099 then 0 else 1) * 91000 + (if b0100 then 0 else 1) * 91000 + (if b0101 then 0 else 1) * 91000 + (if b0102 then 0 else 1) * 91000 + (if b0103 then 0 else 1) * 91000 + (if b0104 then 0 else 1) * 91000 + (if b0105 then 0 else 1) * 91000 + (if b0106 then 0 else 1) * 91000 + (if b0107 then 0 else 1) * 91000 + (if b0108 then 0 else 1) * 91000 + (if b0109 then 0 else 1) * 91000 + (if b0110 then 0 else 1) * 91000 + (if b0111 then 0 else 1) * 91000 + (if b0112 then 0 else 1) * 91000 + (if b0113 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0125 then 0 else 1) * 91000 + (if b0126 then 0 else 1) * 91000 + (if b0127 then 0 else 1) * 91000 + (if b0128 then 0 else 1) * 91000 + (if b0129 then 0 else 1) * 91000 + (if b0130 then 0 else 1) * 91000 + (if b0131 then 0 else 1) * 91000 + (if b0132 then 0 else 1) * 91000 + (if b0133 then 0 else 1) * 91000 + (if b0134 then 0 else 1) * 91000 + (if b0135 then 0 else 1) * 91000 + (if b0136 then 0 else 1) * 91000 + (if b0137 then 0 else 1) * 91000 + (if b0138 then 0 else 1) * 91000 + (if b0139 then 0 else 1) * 91000 + (if b0140 then 0 else 1) * 91000 + (if b0141 then 0 else 1) * 91000 + (if b0142 then 0 else 1) * 91000 + (if b0143 then 0 else 1) * 91000 + (if b0144 then 0 else 1) * 91000 + (if b0145 then 0 else 1) * 91000 + (if b0146 then 0 else 1) * 91000 + (if b0147 then 0 else 1) * 91000 + (if b0148 then 0 else 1) * 91000 + (if b0149 then 0 else 1) * 91000 + (if b0150 then 0 else 1) * 91000 + (if b0151 then 0 else 1) * 91000 + (if b0152 then 0 else 1) * 91000 + (if b0153 then 0 else 1) * 91000 + (if b0154 then 0 else 1) * 91000 + (if b0155 then 0 else 1) * 91000 + (if b0156 then 0 else 1) * 91000 + (if b0157 then 0 else 1) * 91000 + (if b0158 then 0 else 1) * 91000 + (if b0159 then 0 else 1) * 91000 + (if b0160 then 0 else 1) * 91000 + (if b0161 then 0 else 1) * 91000 + (if b0162 then 0 else 1) * 91000 + (if b0163 then 0 else 1) * 91000 + (if b0164 then 0 else 1) * 91000 + (if b0165 then 0 else 1) * 91000 + (if b0166 then 0 else 1) * 91000 + (if b0167 then 0 else 1) * 91000 + (if b0168 then 0 else 1) * 91000 + (if b0169 then 0 else 1) * 91000 + (if b0170 then 0 else 1) * 91000 + (if b0171 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,0,1,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.341173
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1184320
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0068 then 0 else 1) * 91000 + (if b0069 then 0 else 1) * 91000 + (if b0071 then 0 else 1) * 91000 + (if b0075 then 0 else 1) * 91000 + (if b0077 then 0 else 1) * 91000 + (if b0079 then 0 else 1) * 91000 + (if b0081 then 0 else 1) * 91000 + (if b0082 then 0 else 1) * 91000 + (if b0084 then 0 else 1) * 91000 + (if b0085 then 0 else 1) * 91000 + (if b0088 then 0 else 1) * 91000 + (if b0089 then 0 else 1) * 91000 + (if b0090 then 0 else 1) * 91000 + (if b0091 then 0 else 1) * 91000 + (if b0093 then 0 else 1) * 91000 + (if b0095 then 0 else 1) * 91000 + (if b0096 then 0 else 1) * 91000 + (if b0101 then 0 else 1) * 91000 + (if b0104 then 0 else 1) * 91000 + (if b0105 then 0 else 1) * 91000 + (if b0106 then 0 else 1) * 91000 + (if b0107 then 0 else 1) * 91000 + (if b0108 then 0 else 1) * 91000 + (if b0109 then 0 else 1) * 91000 + (if b0111 then 0 else 1) * 91000 + (if b0113 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0125 then 0 else 1) * 91000 + (if b0126 then 0 else 1) * 91000 + (if b0127 then 0 else 1) * 91000 + (if b0128 then 0 else 1) * 91000 + (if b0129 then 0 else 1) * 91000 + (if b0130 then 0 else 1) * 91000 + (if b0131 then 0 else 1) * 91000 + (if b0132 then 0 else 1) * 91000 + (if b0133 then 0 else 1) * 91000 + (if b0134 then 0 else 1) * 91000 + (if b0135 then 0 else 1) * 91000 + (if b0136 then 0 else 1) * 91000 + (if b0137 then 0 else 1) * 91000 + (if b0138 then 0 else 1) * 91000 + (if b0139 then 0 else 1) * 91000 + (if b0140 then 0 else 1) * 91000 + (if b0141 then 0 else 1) * 91000 + (if b0142 then 0 else 1) * 91000 + (if b0143 then 0 else 1) * 91000 + (if b0144 then 0 else 1) * 91000 + (if b0145 then 0 else 1) * 91000 + (if b0146 then 0 else 1) * 91000 + (if b0147 then 0 else 1) * 91000 + (if b0148 then 0 else 1) * 91000 + (if b0149 then 0 else 1) * 91000 + (if b0150 then 0 else 1) * 91000 + (if b0151 then 0 else 1) * 91000 + (if b0152 then 0 else 1) * 91000 + (if b0153 then 0 else 1) * 91000 + (if b0154 then 0 else 1) * 91000 + (if b0155 then 0 else 1) * 91000 + (if b0156 then 0 else 1) * 91000 + (if b0157 then 0 else 1) * 91000 + (if b0158 then 0 else 1) * 91000 + (if b0159 then 0 else 1) * 91000 + (if b0160 then 0 else 1) * 91000 + (if b0161 then 0 else 1) * 91000 + (if b0162 then 0 else 1) * 91000 + (if b0163 then 0 else 1) * 91000 + (if b0164 then 0 else 1) * 91000 + (if b0165 then 0 else 1) * 91000 + (if b0166 then 0 else 1) * 91000 + (if b0167 then 0 else 1) * 91000 + (if b0168 then 0 else 1) * 91000 + (if b0169 then 0 else 1) * 91000 + (if b0170 then 0 else 1) * 91000 + (if b0171 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.379622
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1206120
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0068 then 0 else 1) * 91000 + (if b0075 then 0 else 1) * 91000 + (if b0081 then 0 else 1) * 91000 + (if b0084 then 0 else 1) * 91000 + (if b0085 then 0 else 1) * 91000 + (if b0090 then 0 else 1) * 91000 + (if b0093 then 0 else 1) * 91000 + (if b0096 then 0 else 1) * 91000 + (if b0106 then 0 else 1) * 91000 + (if b0108 then 0 else 1) * 91000 + (if b0111 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0125 then 0 else 1) * 91000 + (if b0126 then 0 else 1) * 91000 + (if b0127 then 0 else 1) * 91000 + (if b0128 then 0 else 1) * 91000 + (if b0129 then 0 else 1) * 91000 + (if b0130 then 0 else 1) * 91000 + (if b0131 then 0 else 1) * 91000 + (if b0132 then 0 else 1) * 91000 + (if b0133 then 0 else 1) * 91000 + (if b0134 then 0 else 1) * 91000 + (if b0135 then 0 else 1) * 91000 + (if b0136 then 0 else 1) * 91000 + (if b0137 then 0 else 1) * 91000 + (if b0138 then 0 else 1) * 91000 + (if b0139 then 0 else 1) * 91000 + (if b0140 then 0 else 1) * 91000 + (if b0141 then 0 else 1) * 91000 + (if b0142 then 0 else 1) * 91000 + (if b0143 then 0 else 1) * 91000 + (if b0144 then 0 else 1) * 91000 + (if b0145 then 0 else 1) * 91000 + (if b0146 then 0 else 1) * 91000 + (if b0147 then 0 else 1) * 91000 + (if b0148 then 0 else 1) * 91000 + (if b0149 then 0 else 1) * 91000 + (if b0150 then 0 else 1) * 91000 + (if b0151 then 0 else 1) * 91000 + (if b0152 then 0 else 1) * 91000 + (if b0153 then 0 else 1) * 91000 + (if b0154 then 0 else 1) * 91000 + (if b0155 then 0 else 1) * 91000 + (if b0156 then 0 else 1) * 91000 + (if b0157 then 0 else 1) * 91000 + (if b0158 then 0 else 1) * 91000 + (if b0159 then 0 else 1) * 91000 + (if b0160 then 0 else 1) * 91000 + (if b0161 then 0 else 1) * 91000 + (if b0162 then 0 else 1) * 91000 + (if b0163 then 0 else 1) * 91000 + (if b0164 then 0 else 1) * 91000 + (if b0165 then 0 else 1) * 91000 + (if b0166 then 0 else 1) * 91000 + (if b0167 then 0 else 1) * 91000 + (if b0168 then 0 else 1) * 91000 + (if b0169 then 0 else 1) * 91000 + (if b0170 then 0 else 1) * 91000 + (if b0171 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.056172
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1191360
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0075 then 0 else 1) * 91000 + (if b0090 then 0 else 1) * 91000 + (if b0108 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0125 then 0 else 1) * 91000 + (if b0126 then 0 else 1) * 91000 + (if b0127 then 0 else 1) * 91000 + (if b0128 then 0 else 1) * 91000 + (if b0129 then 0 else 1) * 91000 + (if b0130 then 0 else 1) * 91000 + (if b0131 then 0 else 1) * 91000 + (if b0132 then 0 else 1) * 91000 + (if b0133 then 0 else 1) * 91000 + (if b0134 then 0 else 1) * 91000 + (if b0135 then 0 else 1) * 91000 + (if b0136 then 0 else 1) * 91000 + (if b0137 then 0 else 1) * 91000 + (if b0138 then 0 else 1) * 91000 + (if b0139 then 0 else 1) * 91000 + (if b0140 then 0 else 1) * 91000 + (if b0141 then 0 else 1) * 91000 + (if b0142 then 0 else 1) * 91000 + (if b0143 then 0 else 1) * 91000 + (if b0144 then 0 else 1) * 91000 + (if b0145 then 0 else 1) * 91000 + (if b0146 then 0 else 1) * 91000 + (if b0147 then 0 else 1) * 91000 + (if b0148 then 0 else 1) * 91000 + (if b0149 then 0 else 1) * 91000 + (if b0150 then 0 else 1) * 91000 + (if b0151 then 0 else 1) * 91000 + (if b0152 then 0 else 1) * 91000 + (if b0153 then 0 else 1) * 91000 + (if b0154 then 0 else 1) * 91000 + (if b0155 then 0 else 1) * 91000 + (if b0156 then 0 else 1) * 91000 + (if b0157 then 0 else 1) * 91000 + (if b0158 then 0 else 1) * 91000 + (if b0159 then 0 else 1) * 91000 + (if b0160 then 0 else 1) * 91000 + (if b0161 then 0 else 1) * 91000 + (if b0162 then 0 else 1) * 91000 + (if b0163 then 0 else 1) * 91000 + (if b0164 then 0 else 1) * 91000 + (if b0165 then 0 else 1) * 91000 + (if b0166 then 0 else 1) * 91000 + (if b0167 then 0 else 1) * 91000 + (if b0168 then 0 else 1) * 91000 + (if b0169 then 0 else 1) * 91000 + (if b0170 then 0 else 1) * 91000 + (if b0171 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.028794
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1200010
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0075 then 0 else 1) * 91000 + (if b0090 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0125 then 0 else 1) * 91000 + (if b0126 then 0 else 1) * 91000 + (if b0127 then 0 else 1) * 91000 + (if b0128 then 0 else 1) * 91000 + (if b0129 then 0 else 1) * 91000 + (if b0130 then 0 else 1) * 91000 + (if b0131 then 0 else 1) * 91000 + (if b0132 then 0 else 1) * 91000 + (if b0133 then 0 else 1) * 91000 + (if b0134 then 0 else 1) * 91000 + (if b0135 then 0 else 1) * 91000 + (if b0136 then 0 else 1) * 91000 + (if b0137 then 0 else 1) * 91000 + (if b0138 then 0 else 1) * 91000 + (if b0139 then 0 else 1) * 91000 + (if b0140 then 0 else 1) * 91000 + (if b0141 then 0 else 1) * 91000 + (if b0142 then 0 else 1) * 91000 + (if b0143 then 0 else 1) * 91000 + (if b0144 then 0 else 1) * 91000 + (if b0145 then 0 else 1) * 91000 + (if b0146 then 0 else 1) * 91000 + (if b0147 then 0 else 1) * 91000 + (if b0148 then 0 else 1) * 91000 + (if b0149 then 0 else 1) * 91000 + (if b0150 then 0 else 1) * 91000 + (if b0151 then 0 else 1) * 91000 + (if b0152 then 0 else 1) * 91000 + (if b0153 then 0 else 1) * 91000 + (if b0154 then 0 else 1) * 91000 + (if b0155 then 0 else 1) * 91000 + (if b0156 then 0 else 1) * 91000 + (if b0157 then 0 else 1) * 91000 + (if b0158 then 0 else 1) * 91000 + (if b0159 then 0 else 1) * 91000 + (if b0160 then 0 else 1) * 91000 + (if b0161 then 0 else 1) * 91000 + (if b0162 then 0 else 1) * 91000 + (if b0163 then 0 else 1) * 91000 + (if b0164 then 0 else 1) * 91000 + (if b0165 then 0 else 1) * 91000 + (if b0166 then 0 else 1) * 91000 + (if b0167 then 0 else 1) * 91000 + (if b0168 then 0 else 1) * 91000 + (if b0169 then 0 else 1) * 91000 + (if b0170 then 0 else 1) * 91000 + (if b0171 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.356231
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1218020
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0125 then 0 else 1) * 91000 + (if b0126 then 0 else 1) * 91000 + (if b0127 then 0 else 1) * 91000 + (if b0128 then 0 else 1) * 91000 + (if b0129 then 0 else 1) * 91000 + (if b0130 then 0 else 1) * 91000 + (if b0131 then 0 else 1) * 91000 + (if b0132 then 0 else 1) * 91000 + (if b0133 then 0 else 1) * 91000 + (if b0134 then 0 else 1) * 91000 + (if b0135 then 0 else 1) * 91000 + (if b0136 then 0 else 1) * 91000 + (if b0137 then 0 else 1) * 91000 + (if b0138 then 0 else 1) * 91000 + (if b0139 then 0 else 1) * 91000 + (if b0140 then 0 else 1) * 91000 + (if b0141 then 0 else 1) * 91000 + (if b0142 then 0 else 1) * 91000 + (if b0143 then 0 else 1) * 91000 + (if b0144 then 0 else 1) * 91000 + (if b0145 then 0 else 1) * 91000 + (if b0146 then 0 else 1) * 91000 + (if b0147 then 0 else 1) * 91000 + (if b0148 then 0 else 1) * 91000 + (if b0149 then 0 else 1) * 91000 + (if b0150 then 0 else 1) * 91000 + (if b0151 then 0 else 1) * 91000 + (if b0152 then 0 else 1) * 91000 + (if b0153 then 0 else 1) * 91000 + (if b0154 then 0 else 1) * 91000 + (if b0155 then 0 else 1) * 91000 + (if b0156 then 0 else 1) * 91000 + (if b0157 then 0 else 1) * 91000 + (if b0158 then 0 else 1) * 91000 + (if b0159 then 0 else 1) * 91000 + (if b0160 then 0 else 1) * 91000 + (if b0161 then 0 else 1) * 91000 + (if b0162 then 0 else 1) * 91000 + (if b0163 then 0 else 1) * 91000 + (if b0164 then 0 else 1) * 91000 + (if b0165 then 0 else 1) * 91000 + (if b0166 then 0 else 1) * 91000 + (if b0167 then 0 else 1) * 91000 + (if b0168 then 0 else 1) * 91000 + (if b0169 then 0 else 1) * 91000 + (if b0170 then 0 else 1) * 91000 + (if b0171 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Prover Time taken = 2.593457
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1200750
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Prover Time taken = 2.088467
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Command exited with non-zero status 124
2.66user 1.69system 19:58.64elapsed 0%CPU (0avgtext+0avgdata 86464maxresident)k
0inputs+456outputs (1major+70343minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
#################
Tue May  4 12:29:32 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 221
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.189179
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1283010
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0066 then 0 else 1) * 88000 + (if b0067 then 0 else 1) * 88000 + (if b0068 then 0 else 1) * 88000 + (if b0069 then 0 else 1) * 88000 + (if b0070 then 0 else 1) * 88000 + (if b0071 then 0 else 1) * 88000 + (if b0072 then 0 else 1) * 88000 + (if b0073 then 0 else 1) * 88000 + (if b0074 then 0 else 1) * 88000 + (if b0075 then 0 else 1) * 88000 + (if b0076 then 0 else 1) * 88000 + (if b0077 then 0 else 1) * 88000 + (if b0078 then 0 else 1) * 88000 + (if b0079 then 0 else 1) * 88000 + (if b0080 then 0 else 1) * 88000 + (if b0081 then 0 else 1) * 88000 + (if b0082 then 0 else 1) * 88000 + (if b0083 then 0 else 1) * 88000 + (if b0084 then 0 else 1) * 88000 + (if b0085 then 0 else 1) * 88000 + (if b0086 then 0 else 1) * 88000 + (if b0087 then 0 else 1) * 88000 + (if b0088 then 0 else 1) * 88000 + (if b0089 then 0 else 1) * 88000 + (if b0090 then 0 else 1) * 88000 + (if b0091 then 0 else 1) * 88000 + (if b0092 then 0 else 1) * 88000 + (if b0093 then 0 else 1) * 88000 + (if b0094 then 0 else 1) * 88000 + (if b0095 then 0 else 1) * 88000 + (if b0096 then 0 else 1) * 88000 + (if b0097 then 0 else 1) * 88000 + (if b0098 then 0 else 1) * 88000 + (if b0099 then 0 else 1) * 88000 + (if b0100 then 0 else 1) * 88000 + (if b0101 then 0 else 1) * 88000 + (if b0102 then 0 else 1) * 88000 + (if b0103 then 0 else 1) * 88000 + (if b0104 then 0 else 1) * 88000 + (if b0105 then 0 else 1) * 88000 + (if b0106 then 0 else 1) * 88000 + (if b0107 then 0 else 1) * 88000 + (if b0108 then 0 else 1) * 88000 + (if b0109 then 0 else 1) * 88000 + (if b0110 then 0 else 1) * 88000 + (if b0111 then 0 else 1) * 88000 + (if b0112 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.746906
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1186470
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0066 then 0 else 1) * 88000 + (if b0067 then 0 else 1) * 88000 + (if b0068 then 0 else 1) * 88000 + (if b0069 then 0 else 1) * 88000 + (if b0072 then 0 else 1) * 88000 + (if b0073 then 0 else 1) * 88000 + (if b0074 then 0 else 1) * 88000 + (if b0075 then 0 else 1) * 88000 + (if b0076 then 0 else 1) * 88000 + (if b0077 then 0 else 1) * 88000 + (if b0078 then 0 else 1) * 88000 + (if b0082 then 0 else 1) * 88000 + (if b0084 then 0 else 1) * 88000 + (if b0087 then 0 else 1) * 88000 + (if b0088 then 0 else 1) * 88000 + (if b0089 then 0 else 1) * 88000 + (if b0090 then 0 else 1) * 88000 + (if b0091 then 0 else 1) * 88000 + (if b0092 then 0 else 1) * 88000 + (if b0093 then 0 else 1) * 88000 + (if b0095 then 0 else 1) * 88000 + (if b0096 then 0 else 1) * 88000 + (if b0097 then 0 else 1) * 88000 + (if b0098 then 0 else 1) * 88000 + (if b0099 then 0 else 1) * 88000 + (if b0100 then 0 else 1) * 88000 + (if b0105 then 0 else 1) * 88000 + (if b0106 then 0 else 1) * 88000 + (if b0108 then 0 else 1) * 88000 + (if b0111 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.614106
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1233620
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0068 then 0 else 1) * 88000 + (if b0069 then 0 else 1) * 88000 + (if b0072 then 0 else 1) * 88000 + (if b0074 then 0 else 1) * 88000 + (if b0082 then 0 else 1) * 88000 + (if b0087 then 0 else 1) * 88000 + (if b0091 then 0 else 1) * 88000 + (if b0093 then 0 else 1) * 88000 + (if b0099 then 0 else 1) * 88000 + (if b0105 then 0 else 1) * 88000 + (if b0106 then 0 else 1) * 88000 + (if b0108 then 0 else 1) * 88000 + (if b0111 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.957198
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1198980
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0093 then 0 else 1) * 88000 + (if b0108 then 0 else 1) * 88000 + (if b0111 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.188648
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1181100
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0093 then 0 else 1) * 88000 + (if b0111 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.595893
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1214090
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0111 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.488592
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1203230
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Prover Time taken = 1.98636
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1204660
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Prover Time taken = 2.239497
Added Horn clause: 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1200860
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Prover Time taken = 2.722598
Added Horn clause: 11 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Command exited with non-zero status 124
2.90user 1.97system 19:58.74elapsed 0%CPU (0avgtext+0avgdata 83984maxresident)k
0inputs+584outputs (1major+82450minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
#################
Tue May  4 12:49:31 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 365
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.191903
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1180620
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0163 then 0 else 1) * 146000 + (if b0164 then 0 else 1) * 146000 + (if b0165 then 0 else 1) * 146000 + (if b0166 then 0 else 1) * 146000 + (if b0167 then 0 else 1) * 146000 + (if b0168 then 0 else 1) * 146000 + (if b0169 then 0 else 1) * 146000 + (if b0170 then 0 else 1) * 146000 + (if b0171 then 0 else 1) * 146000 + (if b0172 then 0 else 1) * 146000 + (if b0173 then 0 else 1) * 146000 + (if b0174 then 0 else 1) * 146000 + (if b0175 then 0 else 1) * 146000 + (if b0176 then 0 else 1) * 146000 + (if b0177 then 0 else 1) * 146000 + (if b0178 then 0 else 1) * 146000 + (if b0179 then 0 else 1) * 146000 + (if b0180 then 0 else 1) * 146000 + (if b0181 then 0 else 1) * 146000 + (if b0182 then 0 else 1) * 146000 + (if b0183 then 0 else 1) * 146000 + (if b0184 then 0 else 1) * 146000 + (if b0185 then 0 else 1) * 146000 + (if b0186 then 0 else 1) * 146000 + (if b0187 then 0 else 1) * 146000 + (if b0188 then 0 else 1) * 146000 + (if b0189 then 0 else 1) * 146000 + (if b0190 then 0 else 1) * 146000 + (if b0191 then 0 else 1) * 146000 + (if b0192 then 0 else 1) * 146000 + (if b0193 then 0 else 1) * 146000 + (if b0194 then 0 else 1) * 146000 + (if b0195 then 0 else 1) * 146000 + (if b0196 then 0 else 1) * 146000 + (if b0197 then 0 else 1) * 146000 + (if b0198 then 0 else 1) * 146000 + (if b0199 then 0 else 1) * 146000 + (if b0200 then 0 else 1) * 146000 + (if b0201 then 0 else 1) * 146000 + (if b0202 then 0 else 1) * 146000 + (if b0203 then 0 else 1) * 146000 + (if b0204 then 0 else 1) * 146000 + (if b0205 then 0 else 1) * 146000 + (if b0206 then 0 else 1) * 146000 + (if b0207 then 0 else 1) * 146000 + (if b0208 then 0 else 1) * 146000 + (if b0209 then 0 else 1) * 146000 + (if b0210 then 0 else 1) * 146000 + (if b0211 then 0 else 1) * 146000 + (if b0212 then 0 else 1) * 146000 + (if b0213 then 0 else 1) * 146000 + (if b0214 then 0 else 1) * 146000 + (if b0215 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0226 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0229 then 0 else 1) * 146000 + (if b0230 then 0 else 1) * 146000 + (if b0231 then 0 else 1) * 146000 + (if b0232 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0236 then 0 else 1) * 146000 + (if b0237 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0240 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0242 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0244 then 0 else 1) * 146000 + (if b0245 then 0 else 1) * 146000 + (if b0246 then 0 else 1) * 146000 + (if b0247 then 0 else 1) * 146000 + (if b0248 then 0 else 1) * 146000 + (if b0249 then 0 else 1) * 146000 + (if b0250 then 0 else 1) * 146000 + (if b0251 then 0 else 1) * 146000 + (if b0252 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0254 then 0 else 1) * 146000 + (if b0255 then 0 else 1) * 146000 + (if b0256 then 0 else 1) * 146000 + (if b0257 then 0 else 1) * 146000 + (if b0258 then 0 else 1) * 146000 + (if b0259 then 0 else 1) * 146000 + (if b0260 then 0 else 1) * 146000 + (if b0261 then 0 else 1) * 146000 + (if b0262 then 0 else 1) * 146000 + (if b0263 then 0 else 1) * 146000 + (if b0264 then 0 else 1) * 146000 + (if b0265 then 0 else 1) * 146000 + (if b0266 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0268 then 0 else 1) * 146000 + (if b0269 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0273 then 0 else 1) * 146000 + (if b0274 then 0 else 1) * 146000 + (if b0275 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.875632
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1195270
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0165 then 0 else 1) * 146000 + (if b0166 then 0 else 1) * 146000 + (if b0167 then 0 else 1) * 146000 + (if b0169 then 0 else 1) * 146000 + (if b0172 then 0 else 1) * 146000 + (if b0173 then 0 else 1) * 146000 + (if b0174 then 0 else 1) * 146000 + (if b0175 then 0 else 1) * 146000 + (if b0176 then 0 else 1) * 146000 + (if b0178 then 0 else 1) * 146000 + (if b0179 then 0 else 1) * 146000 + (if b0181 then 0 else 1) * 146000 + (if b0182 then 0 else 1) * 146000 + (if b0184 then 0 else 1) * 146000 + (if b0187 then 0 else 1) * 146000 + (if b0188 then 0 else 1) * 146000 + (if b0196 then 0 else 1) * 146000 + (if b0199 then 0 else 1) * 146000 + (if b0200 then 0 else 1) * 146000 + (if b0201 then 0 else 1) * 146000 + (if b0204 then 0 else 1) * 146000 + (if b0205 then 0 else 1) * 146000 + (if b0212 then 0 else 1) * 146000 + (if b0214 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0226 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0229 then 0 else 1) * 146000 + (if b0230 then 0 else 1) * 146000 + (if b0231 then 0 else 1) * 146000 + (if b0232 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0236 then 0 else 1) * 146000 + (if b0237 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0240 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0242 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0244 then 0 else 1) * 146000 + (if b0245 then 0 else 1) * 146000 + (if b0246 then 0 else 1) * 146000 + (if b0247 then 0 else 1) * 146000 + (if b0248 then 0 else 1) * 146000 + (if b0249 then 0 else 1) * 146000 + (if b0250 then 0 else 1) * 146000 + (if b0251 then 0 else 1) * 146000 + (if b0252 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0254 then 0 else 1) * 146000 + (if b0255 then 0 else 1) * 146000 + (if b0256 then 0 else 1) * 146000 + (if b0257 then 0 else 1) * 146000 + (if b0258 then 0 else 1) * 146000 + (if b0259 then 0 else 1) * 146000 + (if b0260 then 0 else 1) * 146000 + (if b0261 then 0 else 1) * 146000 + (if b0262 then 0 else 1) * 146000 + (if b0263 then 0 else 1) * 146000 + (if b0264 then 0 else 1) * 146000 + (if b0265 then 0 else 1) * 146000 + (if b0266 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0268 then 0 else 1) * 146000 + (if b0269 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0273 then 0 else 1) * 146000 + (if b0274 then 0 else 1) * 146000 + (if b0275 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.056205
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1236620
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0167 then 0 else 1) * 146000 + (if b0174 then 0 else 1) * 146000 + (if b0178 then 0 else 1) * 146000 + (if b0181 then 0 else 1) * 146000 + (if b0182 then 0 else 1) * 146000 + (if b0199 then 0 else 1) * 146000 + (if b0201 then 0 else 1) * 146000 + (if b0212 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0226 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0229 then 0 else 1) * 146000 + (if b0230 then 0 else 1) * 146000 + (if b0231 then 0 else 1) * 146000 + (if b0232 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0236 then 0 else 1) * 146000 + (if b0237 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0240 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0242 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0244 then 0 else 1) * 146000 + (if b0245 then 0 else 1) * 146000 + (if b0246 then 0 else 1) * 146000 + (if b0247 then 0 else 1) * 146000 + (if b0248 then 0 else 1) * 146000 + (if b0249 then 0 else 1) * 146000 + (if b0250 then 0 else 1) * 146000 + (if b0251 then 0 else 1) * 146000 + (if b0252 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0254 then 0 else 1) * 146000 + (if b0255 then 0 else 1) * 146000 + (if b0256 then 0 else 1) * 146000 + (if b0257 then 0 else 1) * 146000 + (if b0258 then 0 else 1) * 146000 + (if b0259 then 0 else 1) * 146000 + (if b0260 then 0 else 1) * 146000 + (if b0261 then 0 else 1) * 146000 + (if b0262 then 0 else 1) * 146000 + (if b0263 then 0 else 1) * 146000 + (if b0264 then 0 else 1) * 146000 + (if b0265 then 0 else 1) * 146000 + (if b0266 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0268 then 0 else 1) * 146000 + (if b0269 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0273 then 0 else 1) * 146000 + (if b0274 then 0 else 1) * 146000 + (if b0275 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.722162
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1254650
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0167 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0226 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0229 then 0 else 1) * 146000 + (if b0230 then 0 else 1) * 146000 + (if b0231 then 0 else 1) * 146000 + (if b0232 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0236 then 0 else 1) * 146000 + (if b0237 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0240 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0242 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0244 then 0 else 1) * 146000 + (if b0245 then 0 else 1) * 146000 + (if b0246 then 0 else 1) * 146000 + (if b0247 then 0 else 1) * 146000 + (if b0248 then 0 else 1) * 146000 + (if b0249 then 0 else 1) * 146000 + (if b0250 then 0 else 1) * 146000 + (if b0251 then 0 else 1) * 146000 + (if b0252 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0254 then 0 else 1) * 146000 + (if b0255 then 0 else 1) * 146000 + (if b0256 then 0 else 1) * 146000 + (if b0257 then 0 else 1) * 146000 + (if b0258 then 0 else 1) * 146000 + (if b0259 then 0 else 1) * 146000 + (if b0260 then 0 else 1) * 146000 + (if b0261 then 0 else 1) * 146000 + (if b0262 then 0 else 1) * 146000 + (if b0263 then 0 else 1) * 146000 + (if b0264 then 0 else 1) * 146000 + (if b0265 then 0 else 1) * 146000 + (if b0266 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0268 then 0 else 1) * 146000 + (if b0269 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0273 then 0 else 1) * 146000 + (if b0274 then 0 else 1) * 146000 + (if b0275 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.256129
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1211160
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0226 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0229 then 0 else 1) * 146000 + (if b0230 then 0 else 1) * 146000 + (if b0231 then 0 else 1) * 146000 + (if b0232 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0236 then 0 else 1) * 146000 + (if b0237 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0240 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0242 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0244 then 0 else 1) * 146000 + (if b0245 then 0 else 1) * 146000 + (if b0246 then 0 else 1) * 146000 + (if b0247 then 0 else 1) * 146000 + (if b0248 then 0 else 1) * 146000 + (if b0249 then 0 else 1) * 146000 + (if b0250 then 0 else 1) * 146000 + (if b0251 then 0 else 1) * 146000 + (if b0252 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0254 then 0 else 1) * 146000 + (if b0255 then 0 else 1) * 146000 + (if b0256 then 0 else 1) * 146000 + (if b0257 then 0 else 1) * 146000 + (if b0258 then 0 else 1) * 146000 + (if b0259 then 0 else 1) * 146000 + (if b0260 then 0 else 1) * 146000 + (if b0261 then 0 else 1) * 146000 + (if b0262 then 0 else 1) * 146000 + (if b0263 then 0 else 1) * 146000 + (if b0264 then 0 else 1) * 146000 + (if b0265 then 0 else 1) * 146000 + (if b0266 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0268 then 0 else 1) * 146000 + (if b0269 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0273 then 0 else 1) * 146000 + (if b0274 then 0 else 1) * 146000 + (if b0275 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 4.464617
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1205080
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0230 then 0 else 1) * 146000 + (if b0231 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0237 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0240 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0244 then 0 else 1) * 146000 + (if b0246 then 0 else 1) * 146000 + (if b0247 then 0 else 1) * 146000 + (if b0248 then 0 else 1) * 146000 + (if b0249 then 0 else 1) * 146000 + (if b0250 then 0 else 1) * 146000 + (if b0252 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0254 then 0 else 1) * 146000 + (if b0255 then 0 else 1) * 146000 + (if b0258 then 0 else 1) * 146000 + (if b0260 then 0 else 1) * 146000 + (if b0261 then 0 else 1) * 146000 + (if b0262 then 0 else 1) * 146000 + (if b0263 then 0 else 1) * 146000 + (if b0264 then 0 else 1) * 146000 + (if b0265 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 4.376525
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1208030
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 3.924179
Added Horn clause: 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1209520
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 3.645237
Added Horn clause: 11 && 12 && 0 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Command exited with non-zero status 124
5.62user 2.02system 19:58.66elapsed 0%CPU (0avgtext+0avgdata 113036maxresident)k
0inputs+760outputs (1major+145810minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
#################
Tue May  4 13:09:29 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 190
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.186512
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1187850
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0065 then 0 else 1) * 76000 + (if b0066 then 0 else 1) * 76000 + (if b0067 then 0 else 1) * 76000 + (if b0068 then 0 else 1) * 76000 + (if b0069 then 0 else 1) * 76000 + (if b0070 then 0 else 1) * 76000 + (if b0071 then 0 else 1) * 76000 + (if b0072 then 0 else 1) * 76000 + (if b0073 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0075 then 0 else 1) * 76000 + (if b0076 then 0 else 1) * 76000 + (if b0077 then 0 else 1) * 76000 + (if b0078 then 0 else 1) * 76000 + (if b0079 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0081 then 0 else 1) * 76000 + (if b0082 then 0 else 1) * 76000 + (if b0083 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0087 then 0 else 1) * 76000 + (if b0088 then 0 else 1) * 76000 + (if b0089 then 0 else 1) * 76000 + (if b0090 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0092 then 0 else 1) * 76000 + (if b0093 then 0 else 1) * 76000 + (if b0094 then 0 else 1) * 76000 + (if b0095 then 0 else 1) * 76000 + (if b0096 then 0 else 1) * 76000 + (if b0097 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0099 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.449336
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1209380
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0070 then 0 else 1) * 76000 + (if b0073 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0081 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0096 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.45635
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1177860
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0081 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.476414
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1212140
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0081 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.306442
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1209420
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 1.669119
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1227280
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 1.844894
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1197010
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 1.375125
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1211410
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 1.69678
Added Horn clause: 7 && 10 && 0 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Command exited with non-zero status 124
2.45user 1.81system 19:58.55elapsed 0%CPU (0avgtext+0avgdata 79456maxresident)k
0inputs+464outputs (1major+66864minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
#################
Tue May  4 13:29:28 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 44
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170342
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1179520
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.444364
Added Horn clause: 0 && 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1185670
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.379309
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1201940
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.338638
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1178210
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.340243
Added Horn clause: 0 && 0 && 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Command exited with non-zero status 124
0.99user 1.28system 19:58.62elapsed 0%CPU (0avgtext+0avgdata 53592maxresident)k
0inputs+168outputs (1major+21144minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
#################
Tue May  4 13:49:27 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_mail.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:1
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 192
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.187394
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1189550
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0065 then 0 else 1) * 76000 + (if b0066 then 0 else 1) * 76000 + (if b0067 then 0 else 1) * 76000 + (if b0068 then 0 else 1) * 76000 + (if b0069 then 0 else 1) * 76000 + (if b0070 then 0 else 1) * 76000 + (if b0071 then 0 else 1) * 76000 + (if b0072 then 0 else 1) * 76000 + (if b0073 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0075 then 0 else 1) * 76000 + (if b0076 then 0 else 1) * 76000 + (if b0077 then 0 else 1) * 76000 + (if b0078 then 0 else 1) * 76000 + (if b0079 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0081 then 0 else 1) * 76000 + (if b0082 then 0 else 1) * 76000 + (if b0083 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0087 then 0 else 1) * 76000 + (if b0088 then 0 else 1) * 76000 + (if b0089 then 0 else 1) * 76000 + (if b0090 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0092 then 0 else 1) * 76000 + (if b0093 then 0 else 1) * 76000 + (if b0094 then 0 else 1) * 76000 + (if b0095 then 0 else 1) * 76000 + (if b0096 then 0 else 1) * 76000 + (if b0097 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0099 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.58126
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1197620
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0069 then 0 else 1) * 76000 + (if b0070 then 0 else 1) * 76000 + (if b0072 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0077 then 0 else 1) * 76000 + (if b0079 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0082 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0090 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.161615
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1205560
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0072 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0090 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.800842
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1192130
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.937219
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1192560
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.7692
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1197100
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 1.346293
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1200160
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 1.654127
Added Horn clause: 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1226620
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 1.107147
Added Horn clause: 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1220560
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 1.884399
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
