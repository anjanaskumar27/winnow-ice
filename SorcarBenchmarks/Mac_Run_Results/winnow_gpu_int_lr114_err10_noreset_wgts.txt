#################
Tue Apr 27 19:01:50 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinarySearch/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinarySearch/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 4
Generating VC of $binarySearch_mulkeys
Verifying $binarySearch_mulkeys: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1: positive
Prover Time taken = 0.166817
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinarySearch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1236130
Verifying $binarySearch_mulkeys: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 1000 + (if b0001 then 0 else 1) * 1000 + (if b0002 then 0 else 1) * 1000 + (if b0003 then 0 else 1) * 1000 < 441
}
Prover Time taken = 0.084814
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinarySearch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1198890
Verifying $binarySearch_mulkeys: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 1000 + (if b0003 then 0 else 1) * 1000 < 441
}
Prover Time taken = 0.074562
Prover time = 0.33
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.64
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.74user 1.08system 0:01.96elapsed 93%CPU (0avgtext+0avgdata 43268maxresident)k
0inputs+104outputs (1major+13824minor)pagefaults 0swaps
FILE:AMD_SDK/BinarySearch/kernel2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:01:52 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $binomial_options
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.305254
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1233580
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 123.295814
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1301700
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 26.566079
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1300100
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 22.911975
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1207330
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.642307
Prover time = 182.72
Number of prover queries = 5
Learner time = 0.50
Number of learner queries = 4
Total time: 183.35
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.50user 1.75system 3:04.85elapsed 1%CPU (0avgtext+0avgdata 65576maxresident)k
0inputs+184outputs (1major+30691minor)pagefaults 0swaps
FILE:AMD_SDK/BinomialOption/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:04:57 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $binomial_options
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.550074
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1270350
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 121.470544
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1267740
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 24.688214
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193490
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 21.274107
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1259180
Verifying $binomial_options: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.458303
Prover time = 177.44
Number of prover queries = 5
Learner time = 0.50
Number of learner queries = 4
Total time: 178.04
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.55user 1.85system 2:59.68elapsed 1%CPU (0avgtext+0avgdata 65836maxresident)k
0inputs+184outputs (1major+30255minor)pagefaults 0swaps
FILE:AMD_SDK/BinomialOptionMultiGPU/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:07:56 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $box_filter_horizontal_local
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.172528
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1301320
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.283038
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1185590
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.678762
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1285530
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 7.81505
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1334390
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.269722
Prover time = 14.22
Number of prover queries = 5
Learner time = 0.51
Number of learner queries = 4
Total time: 14.84
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.10user 1.41system 0:16.33elapsed 15%CPU (0avgtext+0avgdata 50264maxresident)k
0inputs+168outputs (1major+21989minor)pagefaults 0swaps
FILE:AMD_SDK/BoxFilter/kernel7/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:08:13 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $box_filter_horizontal_local
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.149489
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193740
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.343468
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1274390
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 2.170221
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1311900
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 7.535179
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1248040
Verifying $box_filter_horizontal_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.013424
Prover time = 14.21
Number of prover queries = 5
Learner time = 0.50
Number of learner queries = 4
Total time: 14.81
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.10user 1.43system 0:16.30elapsed 15%CPU (0avgtext+0avgdata 50224maxresident)k
0inputs+176outputs (1major+22377minor)pagefaults 0swaps
FILE:AMD_SDK/BoxFilterGL/kernel7/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:08:29 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $write_kernel
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171251
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1155560
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.411076
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1166040
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.25379
Added Horn clause: 0 && 2 => 3
Added Horn clause: 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192480
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.375636
Prover time = 1.21
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 1.68
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.84user 1.20system 0:03.01elapsed 68%CPU (0avgtext+0avgdata 44924maxresident)k
0inputs+136outputs (1major+16774minor)pagefaults 0swaps
FILE:AMD_SDK/BufferBandwidth/kernel2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:08:32 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DCT/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DCT/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 4
Generating VC of $DCT
Verifying $DCT: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1: positive
Prover Time taken = 0.174255
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DCT/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1223050
Verifying $DCT: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 1000 + (if b0001 then 0 else 1) * 1000 + (if b0002 then 0 else 1) * 1000 + (if b0003 then 0 else 1) * 1000 < 441
}
Prover Time taken = 0.052568
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DCT/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1206600
Verifying $DCT: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 1000 + (if b0003 then 0 else 1) * 1000 < 441
}
Prover Time taken = 0.03426
Prover time = 0.26
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.58
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.08system 0:01.90elapsed 96%CPU (0avgtext+0avgdata 44056maxresident)k
0inputs+96outputs (1major+14983minor)pagefaults 0swaps
FILE:AMD_SDK/DCT/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:08:34 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $dwtHaar1D
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1: positive
Prover Time taken = 0.230791
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1275880
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1: positive
Prover Time taken = 1.447832
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.2090520
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1: positive
Prover Time taken = 1.618115
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1325410
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.852365
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1283420
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.711356
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1285540
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.564829
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1285170
Verifying $dwtHaar1D: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 1.5059
Prover time = 6.93
Number of prover queries = 7
Learner time = 0.85
Number of learner queries = 6
Total time: 7.90
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.29user 1.75system 0:09.46elapsed 32%CPU (0avgtext+0avgdata 48856maxresident)k
0inputs+240outputs (1major+23015minor)pagefaults 0swaps
FILE:AMD_SDK/DwtHaar1D/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:08:43 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $histogram256
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.18566
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1301970
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.073072
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1318920
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.136653
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.2012930
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.21004
Added Horn clause: 1 && 2 && 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1430800
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.240392
Added Horn clause: 1 && 2 && 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Histogram/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.2113030
Verifying $histogram256: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.250124
Prover time = 1.10
Number of prover queries = 6
Learner time = 0.82
Number of learner queries = 5
Total time: 2.06
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.18user 1.61system 0:03.60elapsed 77%CPU (0avgtext+0avgdata 47140maxresident)k
0inputs+216outputs (1major+21101minor)pagefaults 0swaps
FILE:AMD_SDK/Histogram/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:08:47 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $write_kernel
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.449265
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.2740810
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 2.951429
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1461660
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.820951
Added Horn clause: 1 && 2 => 3
Added Horn clause: 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1206900
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.537955
Prover time = 4.76
Number of prover queries = 4
Learner time = 0.54
Number of learner queries = 3
Total time: 5.49
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
2.10user 2.16system 0:08.43elapsed 50%CPU (0avgtext+0avgdata 44544maxresident)k
0inputs+136outputs (1major+16335minor)pagefaults 0swaps
FILE:AMD_SDK/ImageBandwidth/kernel2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:08:55 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 16
Generating VC of $write_kernel
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.176968
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1287560
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.255455
Added Horn clause: 0 && 0 && 0 => 1
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1282190
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.239581
Added Horn clause: 2 && 0 && 1 => 3
Added Horn clause: 2 && 0 && 1 => 4
Added Horn clause: 2 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1270320
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.207314
Added Horn clause: 0 && 0 && 1 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1449540
Verifying $write_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.150201
Prover time = 1.03
Number of prover queries = 5
Learner time = 0.53
Number of learner queries = 4
Total time: 1.67
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
0.98user 1.31system 0:02.99elapsed 76%CPU (0avgtext+0avgdata 46880maxresident)k
0inputs+176outputs (1major+19265minor)pagefaults 0swaps
FILE:AMD_SDK/KernelLaunch/kernel2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:08:58 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $mmmKernel_local
Verifying $mmmKernel_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.182825
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1232030
Verifying $mmmKernel_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 62.364142
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192810
Verifying $mmmKernel_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 29.808174
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199710
Verifying $mmmKernel_local: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 5.989079
Prover time = 98.34
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 98.80
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.13user 1.40system 1:40.34elapsed 2%CPU (0avgtext+0avgdata 59904maxresident)k
0inputs+144outputs (1major+27255minor)pagefaults 0swaps
FILE:AMD_SDK/MatrixMultiplication/kernel2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:10:39 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MersenneTwister/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MersenneTwister/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 5
Generating VC of $gaussianRand
Verifying $gaussianRand: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1: positive
Prover Time taken = 0.483958
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MersenneTwister/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171050
Verifying $gaussianRand: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 2.492456
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/MersenneTwister/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188080
Verifying $gaussianRand: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.939062
Prover time = 3.92
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 4.23
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.82user 1.10system 0:05.60elapsed 34%CPU (0avgtext+0avgdata 49152maxresident)k
0inputs+104outputs (1major+18158minor)pagefaults 0swaps
FILE:AMD_SDK/MersenneTwister/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:10:44 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/NBody/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/NBody/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $nbody_sim
Verifying $nbody_sim: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169732
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/NBody/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1195960
Verifying $nbody_sim: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.069422
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/NBody/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1248900
Verifying $nbody_sim: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.018365
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/NBody/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188060
Verifying $nbody_sim: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.209015
Prover time = 2.47
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 2.91
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.84user 1.23system 0:04.28elapsed 48%CPU (0avgtext+0avgdata 47484maxresident)k
0inputs+144outputs (1major+18558minor)pagefaults 0swaps
FILE:AMD_SDK/NBody/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:10:49 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 88
Generating VC of $prefixSum
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.190055
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1166630
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.546095
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1175550
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.861535
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1180480
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.351421
Added Horn clause: 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1205900
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.837066
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183850
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 3.413123
Added Horn clause: 4 => 6
Added Horn clause: 4 && 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187810
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 4.487439
Added Horn clause: 9 => 10
Added Horn clause: 4 && 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1270870
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.216961
Prover time = 18.90
Number of prover queries = 8
Learner time = 0.84
Number of learner queries = 7
Total time: 20.01
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:7
verified

Boogie program verifier finished with 1 verified, 0 errors
1.28user 1.76system 0:21.36elapsed 14%CPU (0avgtext+0avgdata 55284maxresident)k
0inputs+344outputs (1major+29929minor)pagefaults 0swaps
FILE:AMD_SDK/PrefixSum/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:11:10 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/QuasiRandomSequence/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/QuasiRandomSequence/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 15
Generating VC of $QuasiRandomSequence
Verifying $QuasiRandomSequence: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.165763
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/QuasiRandomSequence/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1170480
Verifying $QuasiRandomSequence: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 < 441
}
Prover Time taken = 3.482891
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 && 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/QuasiRandomSequence/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1244200
Verifying $QuasiRandomSequence: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 < 441
}
Prover Time taken = 1.108904
Prover time = 4.76
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 5.08
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.85user 1.09system 0:06.45elapsed 30%CPU (0avgtext+0avgdata 49184maxresident)k
0inputs+96outputs (1major+19090minor)pagefaults 0swaps
FILE:AMD_SDK/QuasiRandomSequence/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:11:17 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 30
Generating VC of $RecursiveGaussian_kernel
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.166605
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1161940
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 5.76947
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182350
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 7.368384
Added Horn clause: 0 && 2 => 5
Added Horn clause: 0 && 0 && 0 && 3 => 6
Added Horn clause: 0 && 2 && 0 && 3 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182600
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 3.453221
Added Horn clause: 5 && 0 && 0 && 6 => 8
Added Horn clause: 0 && 0 && 0 && 6 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1190850
Verifying $RecursiveGaussian_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.973961
Prover time = 17.73
Number of prover queries = 5
Learner time = 0.47
Number of learner queries = 4
Total time: 18.35
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.29user 1.48system 0:19.74elapsed 14%CPU (0avgtext+0avgdata 59464maxresident)k
0inputs+184outputs (1major+29427minor)pagefaults 0swaps
FILE:AMD_SDK/RecursiveGaussian/kernel2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:11:36 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Reduction/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Reduction/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $reduce
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.225271
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Reduction/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178320
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 5.439123
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Reduction/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1181830
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.975348
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/Reduction/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1175950
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.328298
Prover time = 7.97
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 8.43
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.93user 1.19system 0:09.80elapsed 21%CPU (0avgtext+0avgdata 49644maxresident)k
0inputs+136outputs (1major+19975minor)pagefaults 0swaps
FILE:AMD_SDK/Reduction/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:11:46 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 88
Generating VC of $prefixSum
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.196717
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171450
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.256759
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1212280
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.554619
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1209840
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.848006
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1254010
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 4.24606
Added Horn clause: 3 => 4
Added Horn clause: 2 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1248050
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 8.435607
Added Horn clause: 3 => 6
Added Horn clause: 3 && 7 => 8
Added Horn clause: 2 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1213920
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 3.654484
Added Horn clause: 10 => 11
Added Horn clause: 3 && 12 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1216750
Verifying $prefixSum: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.765361
Prover time = 27.96
Number of prover queries = 8
Learner time = 0.85
Number of learner queries = 7
Total time: 29.01
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.38user 1.82system 0:30.35elapsed 10%CPU (0avgtext+0avgdata 55936maxresident)k
0inputs+352outputs (1major+30299minor)pagefaults 0swaps
FILE:AMD_SDK/ScanLargeArrays/kernel2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:12:16 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 88
Generating VC of $ScanLargeArrays
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.198782
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229040
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.842972
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1153440
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.15466
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192500
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 3.264952
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1241970
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 7.632133
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183640
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 6.442821
Added Horn clause: 4 => 5
Added Horn clause: 2 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1213950
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 4.553001
Added Horn clause: 4 => 7
Added Horn clause: 4 && 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1207840
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 4.386347
Added Horn clause: 4 => 10
Added Horn clause: 4 && 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.0895030
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.566422
Added Horn clause: 4 && 11 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188660
Verifying $ScanLargeArrays: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.227989
Prover time = 37.27
Number of prover queries = 10
Learner time = 1.05
Number of learner queries = 9
Total time: 38.54
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:10
verified

Boogie program verifier finished with 1 verified, 0 errors
1.58user 2.01system 0:39.92elapsed 9%CPU (0avgtext+0avgdata 58424maxresident)k
0inputs+456outputs (1major+36439minor)pagefaults 0swaps
FILE:AMD_SDK/ScanLargeArrays/kernel3/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:12:56 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $writeKernel
Verifying $writeKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.174681
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1147710
Verifying $writeKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.563296
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1226500
Verifying $writeKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.311367
Added Horn clause: 0 && 2 => 3
Added Horn clause: 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1181740
Verifying $writeKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.300109
Prover time = 1.35
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.80
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.90user 1.16system 0:03.13elapsed 65%CPU (0avgtext+0avgdata 45904maxresident)k
0inputs+144outputs (1major+17839minor)pagefaults 0swaps
FILE:AMD_SDK/TransferOverlap/kernel2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:13:00 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 12
Generating VC of $noise_uniform
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171964
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1158190
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.324034
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178850
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.265208
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1232630
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.247821
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1166290
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.257606
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNG/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1172610
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.21273
Prover time = 1.48
Number of prover queries = 6
Learner time = 0.59
Number of learner queries = 5
Total time: 2.17
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.94user 1.35system 0:03.50elapsed 65%CPU (0avgtext+0avgdata 45744maxresident)k
0inputs+216outputs (1major+19110minor)pagefaults 0swaps
FILE:AMD_SDK/URNG/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:13:03 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 12
Generating VC of $noise_uniform
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171651
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1158780
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.274823
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1170960
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.331763
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193820
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.306285
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1200930
Verifying $noise_uniform: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.26083
Prover time = 1.35
Number of prover queries = 5
Learner time = 0.47
Number of learner queries = 4
Total time: 1.91
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.87user 1.24system 0:03.22elapsed 65%CPU (0avgtext+0avgdata 45492maxresident)k
0inputs+176outputs (1major+18221minor)pagefaults 0swaps
FILE:AMD_SDK/URNGNoiseGL/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:13:06 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 68
Generating VC of $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169298
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177770
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0002 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0004 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0027 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 1.515896
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 => 3
Added Horn clause: 0 && 0 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1208820
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 2.501938
Added Horn clause: 0 && 3 => 5
Added Horn clause: 0 && 0 && 0 && 2 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1180390
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 4.809033
Added Horn clause: 0 && 0 && 0 && 6 => 7
Added Horn clause: 0 && 0 && 0 && 6 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1210130
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 8.210528
Added Horn clause: 0 && 0 && 9 => 10
Added Horn clause: 0 && 0 && 7 && 6 => 11
Added Horn clause: 0 && 0 && 7 && 6 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1217220
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 7.166213
Added Horn clause: 0 && 10 && 13 => 14
Added Horn clause: 1 && 10 && 0 && 12 => 15
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199410
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 7.128572
Added Horn clause: 0 && 10 && 7 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1211690
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 6.873661
Added Horn clause: 0 && 10 && 17 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192260
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 7.906054
Added Horn clause: 0 && 0 && 15 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1245920
Verifying $_Z23binomial_options_kernelPKfS0_S0_S0_S0_PfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 7.010384
Prover time = 53.29
Number of prover queries = 10
Learner time = 1.08
Number of learner queries = 9
Total time: 54.62
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:16
verified

Boogie program verifier finished with 1 verified, 0 errors
1.73user 2.08system 0:56.00elapsed 6%CPU (0avgtext+0avgdata 60836maxresident)k
0inputs+456outputs (1major+41855minor)pagefaults 0swaps
FILE:C++AMP/BinomialOptions/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:02 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z19bitonic_sort_kernelPfjj
Verifying $_Z19bitonic_sort_kernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,0,1,1,1,1: positive
Prover Time taken = 0.172278
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1210510
Verifying $_Z19bitonic_sort_kernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,0,1,1,1,1,1: positive
Prover Time taken = 0.190294
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1175760
Verifying $_Z19bitonic_sort_kernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.113738
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1180870
Verifying $_Z19bitonic_sort_kernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.07529
Prover time = 0.55
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.00
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.82user 1.17system 0:02.31elapsed 86%CPU (0avgtext+0avgdata 45040maxresident)k
0inputs+136outputs (1major+16541minor)pagefaults 0swaps
FILE:C++AMP/BitonicSort/bitonic_sort_kernel/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:05 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z18convolution_tilingPKfS0_Pf
Verifying $_Z18convolution_tilingPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.174745
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1163160
Verifying $_Z18convolution_tilingPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.062695
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1254380
Verifying $_Z18convolution_tilingPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.116816
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1207050
Verifying $_Z18convolution_tilingPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.118383
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1169910
Verifying $_Z18convolution_tilingPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.089779
Prover time = 0.56
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 1.13
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.84user 1.27system 0:02.43elapsed 86%CPU (0avgtext+0avgdata 44988maxresident)k
0inputs+168outputs (1major+17403minor)pagefaults 0swaps
FILE:C++AMP/Convolution/convolution_tiling/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:07 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z18histo_merge_kernelPjS_
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.173656
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1163650
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 0.105597
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191500
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.058661
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1168170
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.073955
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1237160
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.087427
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1205930
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.083343
Added Horn clause: 2 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187820
Verifying $_Z18histo_merge_kernelPjS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.03618
Prover time = 0.62
Number of prover queries = 7
Learner time = 0.72
Number of learner queries = 6
Total time: 1.46
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.97user 1.47system 0:02.77elapsed 87%CPU (0avgtext+0avgdata 45340maxresident)k
0inputs+248outputs (1major+19069minor)pagefaults 0swaps
FILE:C++AMP/Histogram/histo_merge_kernel/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:10 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 14
Generating VC of $_Z13mxm_amp_tiledPKfS0_Pf
Verifying $_Z13mxm_amp_tiledPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168318
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183790
Verifying $_Z13mxm_amp_tiledPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0001 then 0 else 1) * 5000 + (if b0002 then 0 else 1) * 5000 + (if b0003 then 0 else 1) * 5000 + (if b0004 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0006 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0008 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 + (if b0013 then 0 else 1) * 5000 < 441
}
Prover Time taken = 0.090065
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177340
Verifying $_Z13mxm_amp_tiledPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0001 then 0 else 1) * 5000 + (if b0002 then 0 else 1) * 5000 + (if b0003 then 0 else 1) * 5000 + (if b0004 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 + (if b0013 then 0 else 1) * 5000 < 441
}
Prover Time taken = 0.085495
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1157320
Verifying $_Z13mxm_amp_tiledPKfS0_Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0001 then 0 else 1) * 5000 + (if b0003 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 + (if b0013 then 0 else 1) * 5000 < 441
}
Prover Time taken = 0.047344
Prover time = 0.39
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 0.82
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.87user 1.12system 0:02.15elapsed 92%CPU (0avgtext+0avgdata 45112maxresident)k
0inputs+136outputs (1major+17002minor)pagefaults 0swaps
FILE:C++AMP/MatrixMultiplication/mxm_amp_tiled/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:12 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z17box_muller_kernelPfS_i
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167352
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1152320
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.106078
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1198080
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.306494
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1163050
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.069114
Added Horn clause: 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186750
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.073865
Added Horn clause: 1 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1210110
Verifying $_Z17box_muller_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.037329
Prover time = 0.76
Number of prover queries = 6
Learner time = 0.59
Number of learner queries = 5
Total time: 1.45
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.88user 1.36system 0:02.76elapsed 81%CPU (0avgtext+0avgdata 44104maxresident)k
0inputs+216outputs (1major+16649minor)pagefaults 0swaps
FILE:C++AMP/MersenneTwister/box_muller_kernel/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:15 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 17
Generating VC of $_Z14rand_MT_kernelPfjjjji
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171277
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171710
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.140404
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178750
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.077467
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1159510
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.104934
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171330
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.105713
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171530
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.066605
Added Horn clause: 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1168160
Verifying $_Z14rand_MT_kernelPfjjjji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.024915
Prover time = 0.69
Number of prover queries = 7
Learner time = 0.70
Number of learner queries = 6
Total time: 1.53
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:5
verified

Boogie program verifier finished with 1 verified, 0 errors
1.00user 1.39system 0:02.82elapsed 84%CPU (0avgtext+0avgdata 43776maxresident)k
0inputs+256outputs (1major+17831minor)pagefaults 0swaps
FILE:C++AMP/MersenneTwister/rand_MT_kernel/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:18 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 12
Generating VC of $_Z21tiling_implementationP6float4S0_S0_S0_iii
Verifying $_Z21tiling_implementationP6float4S0_S0_S0_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168165
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189690
Verifying $_Z21tiling_implementationP6float4S0_S0_S0_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 2.802005
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.0886630
Verifying $_Z21tiling_implementationP6float4S0_S0_S0_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 2.638948
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1205200
Verifying $_Z21tiling_implementationP6float4S0_S0_S0_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 2.656657
Added Horn clause: 2 && 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178100
Verifying $_Z21tiling_implementationP6float4S0_S0_S0_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.680806
Prover time = 8.95
Number of prover queries = 5
Learner time = 0.45
Number of learner queries = 4
Total time: 9.49
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.10user 1.29system 0:11.00elapsed 21%CPU (0avgtext+0avgdata 61644maxresident)k
0inputs+176outputs (1major+26159minor)pagefaults 0swaps
FILE:C++AMP/NBody_Simulation/tiling_implementation/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:29 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage1/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage1/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z32transitive_closure_stage1_kernelPji
Verifying $_Z32transitive_closure_stage1_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.176658
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182340
Verifying $_Z32transitive_closure_stage1_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.111974
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1163350
Verifying $_Z32transitive_closure_stage1_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.048601
Prover time = 0.34
Number of prover queries = 3
Learner time = 0.23
Number of learner queries = 2
Total time: 0.66
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.06system 0:01.98elapsed 93%CPU (0avgtext+0avgdata 44800maxresident)k
0inputs+96outputs (1major+15988minor)pagefaults 0swaps
FILE:C++AMP/TransitiveClosure/stage1/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:31 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z32transitive_closure_stage2_kernelPji
Verifying $_Z32transitive_closure_stage2_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.200013
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1173930
Verifying $_Z32transitive_closure_stage2_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.179841
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1170420
Verifying $_Z32transitive_closure_stage2_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.087407
Prover time = 0.47
Number of prover queries = 3
Learner time = 0.23
Number of learner queries = 2
Total time: 0.78
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.09system 0:02.11elapsed 89%CPU (0avgtext+0avgdata 46252maxresident)k
0inputs+96outputs (1major+16584minor)pagefaults 0swaps
FILE:C++AMP/TransitiveClosure/stage2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:33 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage3/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage3/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z32transitive_closure_stage3_kernelPji
Verifying $_Z32transitive_closure_stage3_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.222529
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1169160
Verifying $_Z32transitive_closure_stage3_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.15976
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/C++AMP/TransitiveClosure/stage3/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202810
Verifying $_Z32transitive_closure_stage3_kernelPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.050411
Prover time = 0.43
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.75
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.10system 0:02.08elapsed 90%CPU (0avgtext+0avgdata 46584maxresident)k
0inputs+96outputs (1major+16858minor)pagefaults 0swaps
FILE:C++AMP/TransitiveClosure/stage3/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:35 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/bitonicsort/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/bitonicsort/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 18
Generating VC of $_Z13BitonicKernelPi
Verifying $_Z13BitonicKernelPi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.173522
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/bitonicsort/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1170040
Verifying $_Z13BitonicKernelPi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.46027
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/bitonicsort/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1167660
Verifying $_Z13BitonicKernelPi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.325813
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/bitonicsort/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1170770
Verifying $_Z13BitonicKernelPi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.106566
Prover time = 1.07
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 1.52
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.85user 1.18system 0:02.86elapsed 71%CPU (0avgtext+0avgdata 47308maxresident)k
0inputs+144outputs (1major+18687minor)pagefaults 0swaps
FILE:CUDA20/bitonicsort/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:38 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 25
Generating VC of $_Z17histogram64KernelPjS_i
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171587
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1162150
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.451534
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1181040
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.997585
Added Horn clause: 1 && 0 && 0 => 2
Added Horn clause: 1 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1168730
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 1.249583
Added Horn clause: 1 && 0 && 4 => 5
Added Horn clause: 1 && 3 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187370
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.970961
Added Horn clause: 1 && 0 && 5 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1203620
Verifying $_Z17histogram64KernelPjS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.619055
Prover time = 4.46
Number of prover queries = 6
Learner time = 0.59
Number of learner queries = 5
Total time: 5.17
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
1.03user 1.44system 0:06.52elapsed 37%CPU (0avgtext+0avgdata 50356maxresident)k
0inputs+216outputs (1major+24121minor)pagefaults 0swaps
FILE:CUDA20/histogram64/histogram64Kernel/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:44 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z22mergeHistogram64KernelPjS_j
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170271
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1168620
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 0.11523
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182730
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.075747
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1223770
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.100846
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1212250
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.081551
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1162680
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.033929
Prover time = 0.58
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 1.27
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.95user 1.33system 0:02.57elapsed 88%CPU (0avgtext+0avgdata 45032maxresident)k
0inputs+208outputs (1major+18098minor)pagefaults 0swaps
FILE:CUDA20/histogram64/mergeHistogram64Kernel/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:14:47 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 90
Generating VC of $_Z14scanBestKernelPfS_i
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.20557
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1148960
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0014 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.216748
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1181900
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.459483
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189800
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.914813
Added Horn clause: 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176350
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.811571
Added Horn clause: 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1195180
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.586926
Added Horn clause: 3 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192710
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.403053
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1200060
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 4.199842
Added Horn clause: 7 => 9
Added Horn clause: 7 && 8 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189520
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 5.500875
Added Horn clause: 7 => 11
Added Horn clause: 7 && 10 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192060
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 < 441
}
Prover Time taken = 6.294744
Added Horn clause: 13 => 14
Added Horn clause: 7 && 15 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/best/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176170
Verifying $_Z14scanBestKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.963794
Prover time = 38.56
Number of prover queries = 11
Learner time = 1.18
Number of learner queries = 10
Total time: 40.00
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:11
verified

Boogie program verifier finished with 1 verified, 0 errors
1.64user 2.11system 0:41.36elapsed 9%CPU (0avgtext+0avgdata 58460maxresident)k
0inputs+496outputs (1major+38193minor)pagefaults 0swaps
FILE:CUDA20/scan/best/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:15:28 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z6kernelPfS_i
Verifying $_Z6kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.175625
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1161790
Verifying $_Z6kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 0.295119
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1164410
Verifying $_Z6kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.139724
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1163310
Verifying $_Z6kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.15339
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1170720
Verifying $_Z6kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.169507
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/naive/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1174990
Verifying $_Z6kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.070353
Prover time = 1.00
Number of prover queries = 6
Learner time = 0.58
Number of learner queries = 5
Total time: 1.71
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.93user 1.38system 0:03.03elapsed 76%CPU (0avgtext+0avgdata 46120maxresident)k
0inputs+208outputs (1major+19520minor)pagefaults 0swaps
FILE:CUDA20/scan/naive/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:15:31 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 90
Generating VC of $_Z25scan_workefficient_kernelPfS_i
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.195729
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1149890
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0014 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.651182
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1198860
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.481736
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176100
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.335704
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1174730
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.74798
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177760
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.387933
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184140
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 5.266823
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184190
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 5.973166
Added Horn clause: 7 => 9
Added Horn clause: 7 && 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1213060
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 10.541947
Added Horn clause: 12 => 13
Added Horn clause: 7 && 14 => 15
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202240
Verifying $_Z25scan_workefficient_kernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0037 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.057744
Prover time = 36.64
Number of prover queries = 10
Learner time = 1.07
Number of learner queries = 9
Total time: 37.95
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.54user 2.00system 0:39.31elapsed 9%CPU (0avgtext+0avgdata 58088maxresident)k
0inputs+448outputs (1major+36577minor)pagefaults 0swaps
FILE:CUDA20/scan/workefficient/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:16:10 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 91
Generating VC of $_Z1kPfPKfS_iiiii
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.273971
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1210720
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0013 then 0 else 1) * 36000 + (if b0035 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.502366
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182880
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0035 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 5.031553
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1194240
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0035 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 1.375824
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182210
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0012 then 0 else 1) * 36000 + (if b0035 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.600865
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191330
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.952568
Added Horn clause: 6 => 7
Added Horn clause: 4 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188390
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 3.56677
Added Horn clause: 6 => 9
Added Horn clause: 6 && 7 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202130
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 + (if b0090 then 0 else 1) * 36000 < 441
}
Prover Time taken = 4.293651
Added Horn clause: 6 => 11
Added Horn clause: 6 && 10 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1241010
Verifying $_Z1kPfPKfS_iiiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0036 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.691367
Prover time = 28.29
Number of prover queries = 9
Learner time = 0.96
Number of learner queries = 8
Total time: 29.47
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.56user 1.91system 0:30.85elapsed 11%CPU (0avgtext+0avgdata 58296maxresident)k
0inputs+392outputs (1major+35295minor)pagefaults 0swaps
FILE:CUDA20/scanlarge/inline/kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:16:41 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 44
Generating VC of $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.17625
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Total learner time was 00:00:00.1192090
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.856974
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Total learner time was 00:00:00.1187170
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.728693
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Total learner time was 00:00:00.1181790
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.760545
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Total learner time was 00:00:00.1213910
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.618593
Added Horn clause: 4 && 0 && 0 => 5
Added Horn clause: 6 && 0 && 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
Total learner time was 00:00:00.1198250
Verifying $_Z13matrixMulCUDAILi32EEvPfS0_S0_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.539094
Prover time = 3.68
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 4.41
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.15user 1.54system 0:05.77elapsed 46%CPU (0avgtext+0avgdata 54256maxresident)k
0inputs+192outputs (1major+26409minor)pagefaults 0swaps
FILE:CUDA50/0_Simple/matrixMul/matrixMul.bpl.ice2.bpl
#################
Tue Apr 27 19:16:47 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z15transformKernelPfi
Verifying $_Z15transformKernelPfi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.16711
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
Total learner time was 00:00:00.1164350
Verifying $_Z15transformKernelPfi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.201051
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
Total learner time was 00:00:00.1203040
Verifying $_Z15transformKernelPfi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.24788
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
Total learner time was 00:00:00.1194380
Verifying $_Z15transformKernelPfi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.276077
Added Horn clause: 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
Total learner time was 00:00:00.1163050
Verifying $_Z15transformKernelPfi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.064902
Prover time = 0.96
Number of prover queries = 5
Learner time = 0.47
Number of learner queries = 4
Total time: 1.54
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.90user 1.23system 0:02.87elapsed 74%CPU (0avgtext+0avgdata 44096maxresident)k
0inputs+184outputs (1major+16124minor)pagefaults 0swaps
FILE:CUDA50/0_Simple/simpleCubemapTexture/simpleCubemapTexture.bpl.ice2.bpl
#################
Tue Apr 27 19:16:50 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleMultiCopy/simpleMultiCopy.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleMultiCopy/simpleMultiCopy.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z9incKernelPiS_ii
Verifying $_Z9incKernelPiS_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.166422
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleMultiCopy/simpleMultiCopy.bpl.ice2.bpl
Total learner time was 00:00:00.1169550
Verifying $_Z9incKernelPiS_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.058055
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleMultiCopy/simpleMultiCopy.bpl.ice2.bpl
Total learner time was 00:00:00.1173360
Verifying $_Z9incKernelPiS_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.049491
Prover time = 0.27
Number of prover queries = 3
Learner time = 0.23
Number of learner queries = 2
Total time: 0.59
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.05system 0:01.88elapsed 96%CPU (0avgtext+0avgdata 43604maxresident)k
0inputs+96outputs (1major+13887minor)pagefaults 0swaps
FILE:CUDA50/0_Simple/simpleMultiCopy/simpleMultiCopy.bpl.ice2.bpl
#################
Tue Apr 27 19:16:52 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleStreams/simpleStreams.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleStreams/simpleStreams.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 7
Generating VC of $_Z10init_arrayPiS_i
Verifying $_Z10init_arrayPiS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1: positive
Prover Time taken = 0.165374
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleStreams/simpleStreams.bpl.ice2.bpl
Total learner time was 00:00:00.1153290
Verifying $_Z10init_arrayPiS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.038284
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/0_Simple/simpleStreams/simpleStreams.bpl.ice2.bpl
Total learner time was 00:00:00.1230170
Verifying $_Z10init_arrayPiS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.019862
Prover time = 0.22
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.54
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.70user 1.08system 0:01.79elapsed 99%CPU (0avgtext+0avgdata 42512maxresident)k
0inputs+96outputs (1major+13130minor)pagefaults 0swaps
FILE:CUDA50/0_Simple/simpleStreams/simpleStreams.bpl.ice2.bpl
#################
Tue Apr 27 19:16:54 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 176
Generating VC of $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  false
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.21445
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1168110
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0001 then 0 else 1) * 70000 + (if b0003 then 0 else 1) * 70000 + (if b0005 then 0 else 1) * 70000 + (if b0007 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0011 then 0 else 1) * 70000 + (if b0012 then 0 else 1) * 70000 + (if b0013 then 0 else 1) * 70000 + (if b0014 then 0 else 1) * 70000 + (if b0015 then 0 else 1) * 70000 + (if b0016 then 0 else 1) * 70000 + (if b0017 then 0 else 1) * 70000 + (if b0018 then 0 else 1) * 70000 + (if b0019 then 0 else 1) * 70000 + (if b0020 then 0 else 1) * 70000 + (if b0021 then 0 else 1) * 70000 + (if b0022 then 0 else 1) * 70000 + (if b0023 then 0 else 1) * 70000 + (if b0024 then 0 else 1) * 70000 + (if b0025 then 0 else 1) * 70000 + (if b0026 then 0 else 1) * 70000 + (if b0027 then 0 else 1) * 70000 + (if b0028 then 0 else 1) * 70000 + (if b0029 then 0 else 1) * 70000 + (if b0030 then 0 else 1) * 70000 + (if b0031 then 0 else 1) * 70000 + (if b0032 then 0 else 1) * 70000 + (if b0033 then 0 else 1) * 70000 + (if b0034 then 0 else 1) * 70000 + (if b0035 then 0 else 1) * 70000 + (if b0036 then 0 else 1) * 70000 + (if b0037 then 0 else 1) * 70000 + (if b0038 then 0 else 1) * 70000 + (if b0039 then 0 else 1) * 70000 + (if b0040 then 0 else 1) * 70000 + (if b0041 then 0 else 1) * 70000 + (if b0042 then 0 else 1) * 70000 + (if b0043 then 0 else 1) * 70000 + (if b0044 then 0 else 1) * 70000 + (if b0045 then 0 else 1) * 70000 + (if b0046 then 0 else 1) * 70000 + (if b0047 then 0 else 1) * 70000 + (if b0048 then 0 else 1) * 70000 + (if b0049 then 0 else 1) * 70000 + (if b0050 then 0 else 1) * 70000 + (if b0051 then 0 else 1) * 70000 + (if b0052 then 0 else 1) * 70000 + (if b0053 then 0 else 1) * 70000 + (if b0054 then 0 else 1) * 70000 + (if b0055 then 0 else 1) * 70000 + (if b0056 then 0 else 1) * 70000 + (if b0057 then 0 else 1) * 70000 + (if b0058 then 0 else 1) * 70000 + (if b0059 then 0 else 1) * 70000 + (if b0060 then 0 else 1) * 70000 + (if b0061 then 0 else 1) * 70000 + (if b0062 then 0 else 1) * 70000 + (if b0063 then 0 else 1) * 70000 + (if b0064 then 0 else 1) * 70000 + (if b0065 then 0 else 1) * 70000 + (if b0066 then 0 else 1) * 70000 + (if b0067 then 0 else 1) * 70000 + (if b0068 then 0 else 1) * 70000 + (if b0069 then 0 else 1) * 70000 + (if b0070 then 0 else 1) * 70000 + (if b0071 then 0 else 1) * 70000 + (if b0072 then 0 else 1) * 70000 + (if b0073 then 0 else 1) * 70000 + (if b0074 then 0 else 1) * 70000 + (if b0075 then 0 else 1) * 70000 + (if b0076 then 0 else 1) * 70000 + (if b0077 then 0 else 1) * 70000 + (if b0078 then 0 else 1) * 70000 + (if b0079 then 0 else 1) * 70000 + (if b0080 then 0 else 1) * 70000 + (if b0081 then 0 else 1) * 70000 + (if b0082 then 0 else 1) * 70000 + (if b0083 then 0 else 1) * 70000 + (if b0084 then 0 else 1) * 70000 + (if b0085 then 0 else 1) * 70000 + (if b0086 then 0 else 1) * 70000 + (if b0087 then 0 else 1) * 70000 + (if b0088 then 0 else 1) * 70000 + (if b0089 then 0 else 1) * 70000 + (if b0090 then 0 else 1) * 70000 + (if b0091 then 0 else 1) * 70000 + (if b0092 then 0 else 1) * 70000 + (if b0093 then 0 else 1) * 70000 + (if b0094 then 0 else 1) * 70000 + (if b0095 then 0 else 1) * 70000 + (if b0096 then 0 else 1) * 70000 + (if b0097 then 0 else 1) * 70000 + (if b0098 then 0 else 1) * 70000 + (if b0099 then 0 else 1) * 70000 + (if b0100 then 0 else 1) * 70000 + (if b0101 then 0 else 1) * 70000 + (if b0102 then 0 else 1) * 70000 + (if b0103 then 0 else 1) * 70000 + (if b0104 then 0 else 1) * 70000 + (if b0105 then 0 else 1) * 70000 + (if b0106 then 0 else 1) * 70000 + (if b0107 then 0 else 1) * 70000 + (if b0108 then 0 else 1) * 70000 + (if b0109 then 0 else 1) * 70000 + (if b0110 then 0 else 1) * 70000 + (if b0111 then 0 else 1) * 70000 + (if b0112 then 0 else 1) * 70000 + (if b0113 then 0 else 1) * 70000 + (if b0114 then 0 else 1) * 70000 + (if b0115 then 0 else 1) * 70000 + (if b0116 then 0 else 1) * 70000 + (if b0117 then 0 else 1) * 70000 + (if b0118 then 0 else 1) * 70000 + (if b0119 then 0 else 1) * 70000 + (if b0120 then 0 else 1) * 70000 + (if b0121 then 0 else 1) * 70000 + (if b0122 then 0 else 1) * 70000 + (if b0123 then 0 else 1) * 70000 + (if b0124 then 0 else 1) * 70000 + (if b0125 then 0 else 1) * 70000 + (if b0126 then 0 else 1) * 70000 + (if b0127 then 0 else 1) * 70000 + (if b0128 then 0 else 1) * 70000 + (if b0129 then 0 else 1) * 70000 + (if b0130 then 0 else 1) * 70000 + (if b0131 then 0 else 1) * 70000 + (if b0132 then 0 else 1) * 70000 + (if b0133 then 0 else 1) * 70000 + (if b0134 then 0 else 1) * 70000 + (if b0135 then 0 else 1) * 70000 + (if b0136 then 0 else 1) * 70000 + (if b0137 then 0 else 1) * 70000 + (if b0138 then 0 else 1) * 70000 + (if b0139 then 0 else 1) * 70000 + (if b0140 then 0 else 1) * 70000 + (if b0141 then 0 else 1) * 70000 + (if b0142 then 0 else 1) * 70000 + (if b0143 then 0 else 1) * 70000 + (if b0144 then 0 else 1) * 70000 + (if b0145 then 0 else 1) * 70000 + (if b0146 then 0 else 1) * 70000 + (if b0147 then 0 else 1) * 70000 + (if b0148 then 0 else 1) * 70000 + (if b0149 then 0 else 1) * 70000 + (if b0150 then 0 else 1) * 70000 + (if b0151 then 0 else 1) * 70000 + (if b0152 then 0 else 1) * 70000 + (if b0153 then 0 else 1) * 70000 + (if b0154 then 0 else 1) * 70000 + (if b0155 then 0 else 1) * 70000 + (if b0156 then 0 else 1) * 70000 + (if b0157 then 0 else 1) * 70000 + (if b0158 then 0 else 1) * 70000 + (if b0159 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Added: my_inv:1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,1,1,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0,1,1,1,0,0,1,0,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 21.773295
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1192610
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0003 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0012 then 0 else 1) * 70000 + (if b0013 then 0 else 1) * 70000 + (if b0017 then 0 else 1) * 70000 + (if b0018 then 0 else 1) * 70000 + (if b0020 then 0 else 1) * 70000 + (if b0023 then 0 else 1) * 70000 + (if b0025 then 0 else 1) * 70000 + (if b0028 then 0 else 1) * 70000 + (if b0032 then 0 else 1) * 70000 + (if b0034 then 0 else 1) * 70000 + (if b0036 then 0 else 1) * 70000 + (if b0041 then 0 else 1) * 70000 + (if b0044 then 0 else 1) * 70000 + (if b0045 then 0 else 1) * 70000 + (if b0047 then 0 else 1) * 70000 + (if b0049 then 0 else 1) * 70000 + (if b0053 then 0 else 1) * 70000 + (if b0054 then 0 else 1) * 70000 + (if b0056 then 0 else 1) * 70000 + (if b0057 then 0 else 1) * 70000 + (if b0058 then 0 else 1) * 70000 + (if b0064 then 0 else 1) * 70000 + (if b0068 then 0 else 1) * 70000 + (if b0070 then 0 else 1) * 70000 + (if b0071 then 0 else 1) * 70000 + (if b0073 then 0 else 1) * 70000 + (if b0075 then 0 else 1) * 70000 + (if b0077 then 0 else 1) * 70000 + (if b0082 then 0 else 1) * 70000 + (if b0085 then 0 else 1) * 70000 + (if b0088 then 0 else 1) * 70000 + (if b0094 then 0 else 1) * 70000 + (if b0095 then 0 else 1) * 70000 + (if b0096 then 0 else 1) * 70000 + (if b0097 then 0 else 1) * 70000 + (if b0100 then 0 else 1) * 70000 + (if b0103 then 0 else 1) * 70000 + (if b0105 then 0 else 1) * 70000 + (if b0106 then 0 else 1) * 70000 + (if b0107 then 0 else 1) * 70000 + (if b0110 then 0 else 1) * 70000 + (if b0112 then 0 else 1) * 70000 + (if b0115 then 0 else 1) * 70000 + (if b0117 then 0 else 1) * 70000 + (if b0118 then 0 else 1) * 70000 + (if b0119 then 0 else 1) * 70000 + (if b0121 then 0 else 1) * 70000 + (if b0122 then 0 else 1) * 70000 + (if b0123 then 0 else 1) * 70000 + (if b0124 then 0 else 1) * 70000 + (if b0128 then 0 else 1) * 70000 + (if b0134 then 0 else 1) * 70000 + (if b0141 then 0 else 1) * 70000 + (if b0145 then 0 else 1) * 70000 + (if b0149 then 0 else 1) * 70000 + (if b0151 then 0 else 1) * 70000 + (if b0155 then 0 else 1) * 70000 + (if b0159 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Added: my_inv:1,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,1,0,1,0,0,0,1,1,1,1,1,0,1,1,1,0,1,0,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 30.32173
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1195430
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0003 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0012 then 0 else 1) * 70000 + (if b0025 then 0 else 1) * 70000 + (if b0028 then 0 else 1) * 70000 + (if b0036 then 0 else 1) * 70000 + (if b0053 then 0 else 1) * 70000 + (if b0073 then 0 else 1) * 70000 + (if b0085 then 0 else 1) * 70000 + (if b0094 then 0 else 1) * 70000 + (if b0096 then 0 else 1) * 70000 + (if b0103 then 0 else 1) * 70000 + (if b0110 then 0 else 1) * 70000 + (if b0115 then 0 else 1) * 70000 + (if b0117 then 0 else 1) * 70000 + (if b0118 then 0 else 1) * 70000 + (if b0119 then 0 else 1) * 70000 + (if b0121 then 0 else 1) * 70000 + (if b0124 then 0 else 1) * 70000 + (if b0128 then 0 else 1) * 70000 + (if b0149 then 0 else 1) * 70000 + (if b0151 then 0 else 1) * 70000 + (if b0159 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Added: my_inv:1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 18.195712
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1187320
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0003 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0025 then 0 else 1) * 70000 + (if b0028 then 0 else 1) * 70000 + (if b0085 then 0 else 1) * 70000 + (if b0103 then 0 else 1) * 70000 + (if b0110 then 0 else 1) * 70000 + (if b0117 then 0 else 1) * 70000 + (if b0151 then 0 else 1) * 70000 + (if b0159 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Added: my_inv:1,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 21.779946
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1174770
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0025 then 0 else 1) * 70000 + (if b0028 then 0 else 1) * 70000 + (if b0085 then 0 else 1) * 70000 + (if b0117 then 0 else 1) * 70000 + (if b0151 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 36.065758
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1184530
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0028 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 34.2255
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1229010
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0164 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0168 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0172 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Prover Time taken = 6.079096
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1229380
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0161 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Prover Time taken = 6.891731
Added Horn clause: 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.0897790
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0160 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Prover Time taken = 5.12943
Added Horn clause: 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
Total learner time was 00:00:00.1221490
Verifying $_Z11Mandelbrot0IfEvP6uchar4iiiT_S2_S2_S2_S2_S0_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 70000 + (if b0009 then 0 else 1) * 70000 + (if b0010 then 0 else 1) * 70000 + (if b0162 then 0 else 1) * 70000 + (if b0163 then 0 else 1) * 70000 + (if b0165 then 0 else 1) * 70000 + (if b0166 then 0 else 1) * 70000 + (if b0167 then 0 else 1) * 70000 + (if b0169 then 0 else 1) * 70000 + (if b0170 then 0 else 1) * 70000 + (if b0171 then 0 else 1) * 70000 + (if b0173 then 0 else 1) * 70000 + (if b0174 then 0 else 1) * 70000 + (if b0175 then 0 else 1) * 70000 < 441
}
Prover Time taken = 0.61539
Prover time = 181.29
Number of prover queries = 11
Learner time = 1.17
Number of learner queries = 10
Total time: 182.70
Number of positive examples:7
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
2.55user 2.99system 3:04.16elapsed 3%CPU (0avgtext+0avgdata 68976maxresident)k
0inputs+656outputs (1major+48125minor)pagefaults 0swaps
FILE:CUDA50/2_Graphics/Mandelbrot/_Mandelbrot0.bpl.ice2.bpl
#################
Tue Apr 27 19:19:58 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 190
Generating VC of $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  false
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.236129
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1269190
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0065 then 0 else 1) * 76000 + (if b0066 then 0 else 1) * 76000 + (if b0067 then 0 else 1) * 76000 + (if b0068 then 0 else 1) * 76000 + (if b0069 then 0 else 1) * 76000 + (if b0070 then 0 else 1) * 76000 + (if b0071 then 0 else 1) * 76000 + (if b0072 then 0 else 1) * 76000 + (if b0073 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0075 then 0 else 1) * 76000 + (if b0076 then 0 else 1) * 76000 + (if b0077 then 0 else 1) * 76000 + (if b0078 then 0 else 1) * 76000 + (if b0079 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0081 then 0 else 1) * 76000 + (if b0082 then 0 else 1) * 76000 + (if b0083 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0087 then 0 else 1) * 76000 + (if b0088 then 0 else 1) * 76000 + (if b0089 then 0 else 1) * 76000 + (if b0090 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0092 then 0 else 1) * 76000 + (if b0093 then 0 else 1) * 76000 + (if b0094 then 0 else 1) * 76000 + (if b0095 then 0 else 1) * 76000 + (if b0096 then 0 else 1) * 76000 + (if b0097 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0099 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,1,1,0,1,1,0,1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 32.600052
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1200180
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0065 then 0 else 1) * 76000 + (if b0067 then 0 else 1) * 76000 + (if b0068 then 0 else 1) * 76000 + (if b0069 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0076 then 0 else 1) * 76000 + (if b0078 then 0 else 1) * 76000 + (if b0082 then 0 else 1) * 76000 + (if b0083 then 0 else 1) * 76000 + (if b0087 then 0 else 1) * 76000 + (if b0088 then 0 else 1) * 76000 + (if b0089 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0092 then 0 else 1) * 76000 + (if b0093 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,0,0,1,1,1,1,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 27.674684
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1244000
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0065 then 0 else 1) * 76000 + (if b0068 then 0 else 1) * 76000 + (if b0069 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0088 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0092 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 26.230935
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1205650
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0065 then 0 else 1) * 76000 + (if b0068 then 0 else 1) * 76000 + (if b0092 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 24.326726
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1194230
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0092 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 30.446431
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1219640
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 14.411761
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1207560
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 26.361309
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1234820
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 39.996145
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1244030
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 6.220131
Added Horn clause: 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1208790
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 13.897867
Added Horn clause: 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1212740
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 6.763781
Added Horn clause: 13 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
Total learner time was 00:00:00.1242420
Verifying $_Z13MandelbrotDS0P6uchar4iiifffffffS_iiiib: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 0.690516
Prover time = 249.86
Number of prover queries = 13
Learner time = 1.47
Number of learner queries = 12
Total time: 251.56
Number of positive examples:9
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
3.15user 3.49system 4:13.08elapsed 2%CPU (0avgtext+0avgdata 69960maxresident)k
0inputs+800outputs (1major+55661minor)pagefaults 0swaps
FILE:CUDA50/2_Graphics/Mandelbrot/_MandelbrotDS0.bpl.ice2.bpl
#################
Tue Apr 27 19:24:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_x.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_x.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 13
Generating VC of $_Z18d_boxfilter_rgba_xPjiii
Verifying $_Z18d_boxfilter_rgba_xPjiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.301479
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_x.bpl.ice2.bpl
Total learner time was 00:00:00.1146560
Verifying $_Z18d_boxfilter_rgba_xPjiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0001 then 0 else 1) * 5000 + (if b0002 then 0 else 1) * 5000 + (if b0003 then 0 else 1) * 5000 + (if b0004 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0006 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0008 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 < 441
}
Prover Time taken = 0.955128
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_x.bpl.ice2.bpl
Total learner time was 00:00:00.1200100
Verifying $_Z18d_boxfilter_rgba_xPjiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0002 then 0 else 1) * 5000 + (if b0004 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0006 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0008 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 < 441
}
Prover Time taken = 0.652283
Prover time = 1.91
Number of prover queries = 3
Learner time = 0.23
Number of learner queries = 2
Total time: 2.23
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.85user 1.10system 0:03.61elapsed 54%CPU (0avgtext+0avgdata 51292maxresident)k
0inputs+96outputs (1major+19039minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_x.bpl.ice2.bpl
#################
Tue Apr 27 19:24:15 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 27
Generating VC of $_Z18d_boxfilter_rgba_yPjS_iii
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.192634
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1155590
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 3.355166
Added Horn clause: 0 => 1
Added Horn clause: 0 => 2
Added Horn clause: 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1243040
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 4.732916
Added Horn clause: 2 && 3 => 4
Added Horn clause: 2 && 5 => 6
Added Horn clause: 2 => 7
Added Horn clause: 2 && 3 && 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1180200
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 3.576969
Added Horn clause: 7 => 9
Added Horn clause: 2 && 3 && 10 => 11
Added Horn clause: 2 => 12
Added Horn clause: 2 && 6 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1173390
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 2.827796
Added Horn clause: 2 && 3 && 10 => 14
Added Horn clause: 2 && 6 => 15
Added Horn clause: 12 => 16
Added Horn clause: 2 && 17 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1217730
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 1.292516
Added Horn clause: 2 && 19 => 20
Added Horn clause: 2 && 3 && 10 => 21
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
Total learner time was 00:00:00.1223160
Verifying $_Z18d_boxfilter_rgba_yPjS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.416986
Prover time = 16.39
Number of prover queries = 7
Learner time = 0.72
Number of learner queries = 6
Total time: 17.29
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:17
verified

Boogie program verifier finished with 1 verified, 0 errors
1.31user 1.59system 0:18.66elapsed 15%CPU (0avgtext+0avgdata 58744maxresident)k
0inputs+264outputs (1major+30367minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_rgba_y.bpl.ice2.bpl
#################
Tue Apr 27 19:24:33 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 27
Generating VC of $_Z20d_boxfilter_x_globalPfS_iii
Verifying $_Z20d_boxfilter_x_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.174574
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
Total learner time was 00:00:00.1170310
Verifying $_Z20d_boxfilter_x_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.159856
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
Total learner time was 00:00:00.1168000
Verifying $_Z20d_boxfilter_x_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.393485
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
Total learner time was 00:00:00.1174320
Verifying $_Z20d_boxfilter_x_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.376022
Added Horn clause: 1 && 2 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
Total learner time was 00:00:00.1211610
Verifying $_Z20d_boxfilter_x_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.354524
Prover time = 1.46
Number of prover queries = 5
Learner time = 0.47
Number of learner queries = 4
Total time: 2.10
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.89user 1.26system 0:03.40elapsed 63%CPU (0avgtext+0avgdata 46108maxresident)k
0inputs+176outputs (1major+18990minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_x_global.bpl.ice2.bpl
#################
Tue Apr 27 19:24:37 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_tex.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_tex.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z17d_boxfilter_x_texPfiii
Verifying $_Z17d_boxfilter_x_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.17615
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_tex.bpl.ice2.bpl
Total learner time was 00:00:00.1147190
Verifying $_Z17d_boxfilter_x_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.201844
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_x_tex.bpl.ice2.bpl
Total learner time was 00:00:00.1191340
Verifying $_Z17d_boxfilter_x_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.155156
Prover time = 0.53
Number of prover queries = 3
Learner time = 0.23
Number of learner queries = 2
Total time: 0.86
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.76user 1.08system 0:02.19elapsed 83%CPU (0avgtext+0avgdata 44040maxresident)k
0inputs+96outputs (1major+14873minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_x_tex.bpl.ice2.bpl
#################
Tue Apr 27 19:24:39 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 27
Generating VC of $_Z20d_boxfilter_y_globalPfS_iii
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.17483
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1167260
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.134879
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1205950
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.212337
Added Horn clause: 1 && 0 => 2
Added Horn clause: 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1174740
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.344841
Added Horn clause: 3 => 4
Added Horn clause: 1 && 2 && 0 => 5
Added Horn clause: 1 && 2 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1173140
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 + (if b0026 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.235857
Added Horn clause: 1 && 2 && 5 => 7
Added Horn clause: 1 && 6 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
Total learner time was 00:00:00.1172220
Verifying $_Z20d_boxfilter_y_globalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.109472
Prover time = 1.21
Number of prover queries = 6
Learner time = 0.59
Number of learner queries = 5
Total time: 1.94
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.02user 1.35system 0:03.24elapsed 73%CPU (0avgtext+0avgdata 47476maxresident)k
0inputs+216outputs (1major+21272minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_y_global.bpl.ice2.bpl
#################
Tue Apr 27 19:24:42 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z17d_boxfilter_y_texPfiii
Verifying $_Z17d_boxfilter_y_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.174653
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
Total learner time was 00:00:00.1193260
Verifying $_Z17d_boxfilter_y_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.101811
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
Total learner time was 00:00:00.1172550
Verifying $_Z17d_boxfilter_y_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.079779
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
Total learner time was 00:00:00.1165160
Verifying $_Z17d_boxfilter_y_texPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.045669
Prover time = 0.40
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 0.84
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.81user 1.16system 0:02.17elapsed 91%CPU (0avgtext+0avgdata 43908maxresident)k
0inputs+136outputs (1major+15665minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/boxFilter/d_boxfilter_y_tex.bpl.ice2.bpl
#################
Tue Apr 27 19:24:44 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z24convolutionColumnsKernelPfS_iii
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167156
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1235270
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.183176
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1278600
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.400734
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1281780
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.536033
Added Horn clause: 1 && 2 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1263570
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.433591
Added Horn clause: 1 && 2 && 3 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1222630
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.625992
Added Horn clause: 1 && 2 && 3 && 0 && 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1296010
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.774975
Added Horn clause: 1 && 2 && 3 && 0 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1251950
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.697307
Added Horn clause: 1 && 2 && 3 && 0 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1243470
Verifying $_Z24convolutionColumnsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 8.245623
Prover time = 13.06
Number of prover queries = 9
Learner time = 1.01
Number of learner queries = 8
Total time: 14.24
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:7
verified

Boogie program verifier finished with 1 verified, 0 errors
1.24user 1.69system 0:15.59elapsed 18%CPU (0avgtext+0avgdata 52740maxresident)k
0inputs+336outputs (1major+29364minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/convolutionSeparable/convolutionColumnsKernel.bpl.ice2.bpl
#################
Tue Apr 27 19:25:00 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z21convolutionRowsKernelPfS_iii
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.166227
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1157000
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.202667
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1214640
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.176421
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1180030
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.28124
Added Horn clause: 1 && 2 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1175210
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.376408
Added Horn clause: 1 && 2 && 3 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1174800
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.315731
Added Horn clause: 1 && 2 && 3 && 0 && 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182550
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.294577
Added Horn clause: 1 && 2 && 3 && 0 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1163650
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 5.125975
Added Horn clause: 1 && 2 && 3 && 0 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186150
Verifying $_Z21convolutionRowsKernelPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 4.012047
Prover time = 10.95
Number of prover queries = 9
Learner time = 0.94
Number of learner queries = 8
Total time: 12.11
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:7
verified

Boogie program verifier finished with 1 verified, 0 errors
1.18user 1.67system 0:13.45elapsed 21%CPU (0avgtext+0avgdata 52952maxresident)k
0inputs+344outputs (1major+29479minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/convolutionSeparable/convolutionRowsKernel.bpl.ice2.bpl
#################
Tue Apr 27 19:25:13 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 17
Generating VC of $_Z14CUDAkernel1DCTPfiii
Verifying $_Z14CUDAkernel1DCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.178457
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
Total learner time was 00:00:00.1169420
Verifying $_Z14CUDAkernel1DCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.155627
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
Total learner time was 00:00:00.1172210
Verifying $_Z14CUDAkernel1DCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.303532
Added Horn clause: 1 => 2
Added Horn clause: 1 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
Total learner time was 00:00:00.1163390
Verifying $_Z14CUDAkernel1DCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.1395
Prover time = 0.78
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 1.21
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.86user 1.21system 0:02.58elapsed 79%CPU (0avgtext+0avgdata 46496maxresident)k
0inputs+136outputs (1major+18987minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/dct8x8/CUDAkernel1DCT.bpl.ice2.bpl
#################
Tue Apr 27 19:25:16 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $_Z15CUDAkernel1IDCTPfiii
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.181131
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1160080
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.303809
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1167600
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.442551
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1183210
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.250929
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1180850
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.320603
Added Horn clause: 4 => 5
Added Horn clause: 4 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1182280
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.266517
Added Horn clause: 8 => 9
Added Horn clause: 8 && 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
Total learner time was 00:00:00.1180640
Verifying $_Z15CUDAkernel1IDCTPfiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.133164
Prover time = 1.90
Number of prover queries = 7
Learner time = 0.71
Number of learner queries = 6
Total time: 2.73
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:5
verified

Boogie program verifier finished with 1 verified, 0 errors
1.09user 1.48system 0:04.08elapsed 63%CPU (0avgtext+0avgdata 48816maxresident)k
0inputs+248outputs (1major+23747minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/dct8x8/CUDAkernel1IDCT.bpl.ice2.bpl
#################
Tue Apr 27 19:25:20 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 35
Generating VC of $_Z9dwtHaar1DPfS_S_jji
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1: positive
Prover Time taken = 0.232637
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1169580
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0020 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0028 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1: positive
Prover Time taken = 2.193647
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1200710
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,1,1,1,1: positive
Prover Time taken = 1.831179
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1194110
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1: positive
Prover Time taken = 1.650194
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1207250
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1: positive
Prover Time taken = 1.922087
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1217760
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 2.073868
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1210120
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.519518
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1196880
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.238695
Added Horn clause: 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1200690
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.889619
Added Horn clause: 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
Total learner time was 00:00:00.1179660
Verifying $_Z9dwtHaar1DPfS_S_jji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 0.878069
Prover time = 15.43
Number of prover queries = 10
Learner time = 1.08
Number of learner queries = 9
Total time: 16.69
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.40user 1.95system 0:18.01elapsed 18%CPU (0avgtext+0avgdata 52488maxresident)k
0inputs+352outputs (1major+30802minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/dwtHaar1D/dwtHaar1D.bpl.ice2.bpl
#################
Tue Apr 27 19:25:38 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 28
Generating VC of $_Z18histogram256KernelPjS_j
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.164221
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1180460
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.468914
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1170130
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 4.208283
Added Horn clause: 1 => 2
Added Horn clause: 1 && 0 && 0 && 0 => 3
Added Horn clause: 1 && 0 => 4
Added Horn clause: 1 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1197990
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 2.225019
Added Horn clause: 1 && 4 => 6
Added Horn clause: 1 && 0 && 5 && 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1224060
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 2.93897
Added Horn clause: 1 && 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
Total learner time was 00:00:00.1194630
Verifying $_Z18histogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 1.762767
Prover time = 11.77
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 12.49
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.11user 1.39system 0:13.84elapsed 18%CPU (0avgtext+0avgdata 51116maxresident)k
0inputs+216outputs (1major+24159minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/histogram/histogram256.bpl.ice2.bpl
#################
Tue Apr 27 19:25:52 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z23mergeHistogram256KernelPjS_j
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169415
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1173630
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 0.121651
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1166810
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.080799
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1222360
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.08161
Added Horn clause: 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178510
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.077038
Added Horn clause: 3 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1168910
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.085508
Added Horn clause: 3 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1194550
Verifying $_Z23mergeHistogram256KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.036566
Prover time = 0.65
Number of prover queries = 7
Learner time = 0.71
Number of learner queries = 6
Total time: 1.47
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.97user 1.45system 0:02.78elapsed 87%CPU (0avgtext+0avgdata 45448maxresident)k
0inputs+248outputs (1major+19059minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/histogram/mergeHistogram256Kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:25:55 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z22mergeHistogram64KernelPjS_j
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170068
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199830
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 0.103005
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177860
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.0657
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1181910
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.082829
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1219710
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.061566
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1167190
Verifying $_Z22mergeHistogram64KernelPjS_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.039987
Prover time = 0.52
Number of prover queries = 6
Learner time = 0.59
Number of learner queries = 5
Total time: 1.21
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.89user 1.38system 0:02.52elapsed 90%CPU (0avgtext+0avgdata 45088maxresident)k
0inputs+208outputs (1major+18187minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/histogram/mergeHistogram64Kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:25:57 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/imageDenoising/imageDenoising_nlm2_kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/imageDenoising/imageDenoising_nlm2_kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z4NLM2Pjiiff
Verifying $_Z4NLM2Pjiiff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.332338
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/imageDenoising/imageDenoising_nlm2_kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1231700
Verifying $_Z4NLM2Pjiiff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.383432
Prover time = 0.72
Number of prover queries = 2
Learner time = 0.12
Number of learner queries = 1
Total time: 0.92
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:0
verified

Boogie program verifier finished with 1 verified, 0 errors
0.76user 1.02system 0:02.29elapsed 77%CPU (0avgtext+0avgdata 50508maxresident)k
0inputs+56outputs (1major+16149minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/imageDenoising/imageDenoising_nlm2_kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:25:59 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 28
Generating VC of $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff
Verifying $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.251171
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1161230
Verifying $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 261.142351
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1184290
Verifying $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 66.269691
Added Horn clause: 0 && 0 && 0 && 5 => 6
Added Horn clause: 0 && 0 && 0 && 3 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1176900
Verifying $_Z24d_recursiveGaussian_rgbaPjS_iiffffffff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 7.179081
Prover time = 334.84
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 335.34
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
1.82user 1.68system 5:36.83elapsed 1%CPU (0avgtext+0avgdata 72060maxresident)k
0inputs+152outputs (1major+33804minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/recursiveGaussian/d_recursiveGaussian_rgba.bpl.ice2.bpl
#################
Tue Apr 27 19:31:36 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 28
Generating VC of $_Z22d_simpleRecursive_rgbaPjS_iif
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.179299
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1186390
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 24.308429
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1156770
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 15.334878
Added Horn clause: 0 && 0 && 0 && 5 => 6
Added Horn clause: 0 && 0 && 4 && 5 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1246290
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 12.178116
Added Horn clause: 0 && 0 && 0 && 6 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1182110
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 12.163508
Added Horn clause: 0 && 0 && 0 && 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
Total learner time was 00:00:00.1185210
Verifying $_Z22d_simpleRecursive_rgbaPjS_iif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 3.455261
Prover time = 67.62
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 68.34
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.41user 1.56system 1:09.76elapsed 4%CPU (0avgtext+0avgdata 63056maxresident)k
0inputs+232outputs (1major+32742minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/recursiveGaussian/d_simpleRecursive_rgba.bpl.ice2.bpl
#################
Tue Apr 27 19:32:46 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z14SobelCopyImagePhjiif
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.165154
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1194920
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.37609
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1167570
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.912051
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1177800
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.992339
Prover time = 2.45
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 2.89
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.80user 1.21system 0:04.21elapsed 47%CPU (0avgtext+0avgdata 45388maxresident)k
0inputs+136outputs (1major+16938minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/SobelFilter/SobelCopyImage.bpl.ice2.bpl
#################
Tue Apr 27 19:32:50 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $_Z11SobelSharedP6uchar4tssssf
Verifying $_Z11SobelSharedP6uchar4tssssf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.165208
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
Total learner time was 00:00:00.1184080
Verifying $_Z11SobelSharedP6uchar4tssssf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 26.081845
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
Total learner time was 00:00:00.1169720
Verifying $_Z11SobelSharedP6uchar4tssssf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 10.618532
Prover time = 36.87
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 37.19
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.08user 1.21system 0:38.61elapsed 5%CPU (0avgtext+0avgdata 61204maxresident)k
0inputs+104outputs (1major+25458minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/SobelFilter/SobelShared.bpl.ice2.bpl
#################
Tue Apr 27 19:33:29 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z8SobelTexPhjiif
Verifying $_Z8SobelTexPhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.164337
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
Total learner time was 00:00:00.1165710
Verifying $_Z8SobelTexPhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.789479
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
Total learner time was 00:00:00.1177360
Verifying $_Z8SobelTexPhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.225092
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
Total learner time was 00:00:00.1180880
Verifying $_Z8SobelTexPhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.375061
Prover time = 3.55
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 3.99
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.86user 1.20system 0:05.35elapsed 38%CPU (0avgtext+0avgdata 51208maxresident)k
0inputs+136outputs (1major+20736minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/SobelFilter/SobelTex.bpl.ice2.bpl
#################
Tue Apr 27 19:33:34 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 48
Generating VC of $_Z21stereoDisparityKernelPjS_S_iiii
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.173314
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1162470
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 19000 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0010 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0012 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0015 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0017 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Added: my_inv:0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.09306
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1175750
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0010 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0012 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0015 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0017 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.031611
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1170960
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0015 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0017 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.703188
Added Horn clause: 0 && 2 && 0 => 3
Added Horn clause: 0 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1180260
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.853844
Added Horn clause: 0 && 2 && 3 && 0 => 5
Added Horn clause: 0 && 4 => 6
Added Horn clause: 0 && 2 && 3 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1192560
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.964836
Added Horn clause: 0 && 2 && 3 && 0 && 5 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1202240
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 2.607334
Added Horn clause: 1 && 2 && 3 && 0 && 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1202260
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 3.368229
Added Horn clause: 1 && 2 && 3 && 0 && 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1196030
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 2.971455
Added Horn clause: 0 && 2 && 3 && 10 => 11
Added Horn clause: 0 && 2 && 3 && 10 && 9 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1187380
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 < 441
}
Prover Time taken = 2.39222
Added Horn clause: 0 && 2 && 3 && 10 && 11 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1181110
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 < 441
}
Prover Time taken = 2.059913
Added Horn clause: 0 && 2 && 3 && 10 && 13 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1184540
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 < 441
}
Prover Time taken = 2.838372
Added Horn clause: 0 && 2 && 3 && 10 && 14 => 15
Added Horn clause: 0 && 2 && 3 && 10 && 13 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1198090
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 < 441
}
Prover Time taken = 2.363938
Added Horn clause: 17 && 2 && 3 && 10 && 14 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1216230
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 < 441
}
Prover Time taken = 2.120309
Added Horn clause: 15 && 2 && 3 && 10 && 14 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
Total learner time was 00:00:00.1209690
Verifying $_Z21stereoDisparityKernelPjS_S_iiii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0005 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 < 441
}
Prover Time taken = 2.064489
Prover time = 30.61
Number of prover queries = 15
Learner time = 1.67
Number of learner queries = 14
Total time: 32.62
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:17
verified

Boogie program verifier finished with 1 verified, 0 errors
1.95user 2.40system 0:34.03elapsed 12%CPU (0avgtext+0avgdata 65096maxresident)k
0inputs+576outputs (1major+52057minor)pagefaults 0swaps
FILE:CUDA50/3_Imaging/stereoDisparity/_stereoDisparity.bpl.ice2.bpl
#################
Tue Apr 27 19:34:08 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 70
Generating VC of $_Z21binomialOptionsKernelP13__TOptionDataPfS1_
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.172637
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1194060
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0002 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0004 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0009 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0011 then 0 else 1) * 28000 + (if b0012 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0014 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0016 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0018 then 0 else 1) * 28000 + (if b0019 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0021 then 0 else 1) * 28000 + (if b0022 then 0 else 1) * 28000 + (if b0023 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0029 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0047 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0056 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0064 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0066 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 1.188739
Added Horn clause: 0 => 1
Added Horn clause: 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1196010
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0009 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0011 then 0 else 1) * 28000 + (if b0012 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0014 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0016 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0018 then 0 else 1) * 28000 + (if b0019 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0022 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0047 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0056 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0066 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 3.152285
Added Horn clause: 1 && 0 && 0 && 3 => 5
Added Horn clause: 1 && 2 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1189000
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0009 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0011 then 0 else 1) * 28000 + (if b0012 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0014 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0016 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0019 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0022 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0056 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0066 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 4.418454
Added Horn clause: 0 && 0 && 0 && 5 => 7
Added Horn clause: 1 && 0 && 0 && 5 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1199870
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0009 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0011 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0019 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0022 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0056 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 8.665679
Added Horn clause: 0 && 0 && 9 => 10
Added Horn clause: 0 && 0 && 7 && 5 => 11
Added Horn clause: 0 && 0 && 7 && 5 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1180750
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0007 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0010 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0053 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 8.377177
Added Horn clause: 0 && 13 && 14 => 15
Added Horn clause: 0 && 13 && 7 && 11 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1192960
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0035 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0046 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 9.344653
Added Horn clause: 0 && 13 && 17 => 18
Added Horn clause: 0 && 13 && 14 && 11 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1211220
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0028 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0052 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 7.817538
Added Horn clause: 0 && 13 && 19 => 20
Added Horn clause: 0 && 13 && 7 && 11 => 21
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1174960
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0034 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 10.841263
Added Horn clause: 0 && 13 && 21 => 22
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1188320
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0038 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 7.442054
Added Horn clause: 0 && 0 && 23 => 24
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
Total learner time was 00:00:00.1183520
Verifying $_Z21binomialOptionsKernelP13__TOptionDataPfS1_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 28000 + (if b0001 then 0 else 1) * 28000 + (if b0003 then 0 else 1) * 28000 + (if b0005 then 0 else 1) * 28000 + (if b0006 then 0 else 1) * 28000 + (if b0008 then 0 else 1) * 28000 + (if b0013 then 0 else 1) * 28000 + (if b0015 then 0 else 1) * 28000 + (if b0017 then 0 else 1) * 28000 + (if b0020 then 0 else 1) * 28000 + (if b0024 then 0 else 1) * 28000 + (if b0025 then 0 else 1) * 28000 + (if b0026 then 0 else 1) * 28000 + (if b0027 then 0 else 1) * 28000 + (if b0030 then 0 else 1) * 28000 + (if b0031 then 0 else 1) * 28000 + (if b0032 then 0 else 1) * 28000 + (if b0033 then 0 else 1) * 28000 + (if b0036 then 0 else 1) * 28000 + (if b0037 then 0 else 1) * 28000 + (if b0039 then 0 else 1) * 28000 + (if b0040 then 0 else 1) * 28000 + (if b0041 then 0 else 1) * 28000 + (if b0042 then 0 else 1) * 28000 + (if b0043 then 0 else 1) * 28000 + (if b0044 then 0 else 1) * 28000 + (if b0045 then 0 else 1) * 28000 + (if b0048 then 0 else 1) * 28000 + (if b0049 then 0 else 1) * 28000 + (if b0050 then 0 else 1) * 28000 + (if b0051 then 0 else 1) * 28000 + (if b0054 then 0 else 1) * 28000 + (if b0055 then 0 else 1) * 28000 + (if b0057 then 0 else 1) * 28000 + (if b0058 then 0 else 1) * 28000 + (if b0059 then 0 else 1) * 28000 + (if b0060 then 0 else 1) * 28000 + (if b0061 then 0 else 1) * 28000 + (if b0062 then 0 else 1) * 28000 + (if b0063 then 0 else 1) * 28000 + (if b0065 then 0 else 1) * 28000 + (if b0067 then 0 else 1) * 28000 + (if b0068 then 0 else 1) * 28000 + (if b0069 then 0 else 1) * 28000 < 441
}
Prover Time taken = 10.587865
Prover time = 72.01
Number of prover queries = 11
Learner time = 1.19
Number of learner queries = 10
Total time: 73.51
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:19
verified

Boogie program verifier finished with 1 verified, 0 errors
1.86user 2.34system 1:14.90elapsed 5%CPU (0avgtext+0avgdata 62392maxresident)k
0inputs+512outputs (1major+43725minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/binomialOptions/binomialOptions.bpl.ice2.bpl
#################
Tue Apr 27 19:35:23 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z15BlackScholesGPUPfS_S_S_S_ffi
Verifying $_Z15BlackScholesGPUPfS_S_S_S_ffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.166825
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
Total learner time was 00:00:00.1183880
Verifying $_Z15BlackScholesGPUPfS_S_S_S_ffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.271455
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
Total learner time was 00:00:00.1191060
Verifying $_Z15BlackScholesGPUPfS_S_S_S_ffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.939034
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
Total learner time was 00:00:00.1179280
Verifying $_Z15BlackScholesGPUPfS_S_S_S_ffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.830083
Prover time = 2.21
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 2.65
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.82user 1.15system 0:03.94elapsed 49%CPU (0avgtext+0avgdata 44704maxresident)k
0inputs+136outputs (1major+16716minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/BlackScholes/BlackScholes.bpl.ice2.bpl
#################
Tue Apr 27 19:35:27 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 101
Generating VC of $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.207189
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1217330
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0054 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0057 then 0 else 1) * 40000 + (if b0058 then 0 else 1) * 40000 + (if b0059 then 0 else 1) * 40000 + (if b0060 then 0 else 1) * 40000 + (if b0061 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0063 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0065 then 0 else 1) * 40000 + (if b0066 then 0 else 1) * 40000 + (if b0067 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0069 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 135.801391
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1227930
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0054 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0057 then 0 else 1) * 40000 + (if b0058 then 0 else 1) * 40000 + (if b0059 then 0 else 1) * 40000 + (if b0060 then 0 else 1) * 40000 + (if b0061 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0063 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0065 then 0 else 1) * 40000 + (if b0066 then 0 else 1) * 40000 + (if b0067 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0069 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 202.673629
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1241890
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0054 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0057 then 0 else 1) * 40000 + (if b0058 then 0 else 1) * 40000 + (if b0059 then 0 else 1) * 40000 + (if b0060 then 0 else 1) * 40000 + (if b0061 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0063 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0065 then 0 else 1) * 40000 + (if b0066 then 0 else 1) * 40000 + (if b0067 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0069 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 103.948373
Added Horn clause: 3 => 4
Added Horn clause: 5 => 6
Added Horn clause: 3 && 3 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1216850
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 130.331917
Added Horn clause: 3 => 8
Added Horn clause: 3 && 9 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1242930
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 82.60909
Added Horn clause: 3 => 11
Added Horn clause: 3 && 12 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
Total learner time was 00:00:00.1206560
Verifying $_Z27MonteCarloOneBlockPerOptionP13__TOptionDataP14__TOptionValueP17curandStateXORWOWi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 + (if b0100 then 0 else 1) * 40000 < 441
}
Prover Time taken = 14.781777
Prover time = 670.35
Number of prover queries = 7
Learner time = 0.74
Number of learner queries = 6
Total time: 671.31
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:7
verified

Boogie program verifier finished with 1 verified, 0 errors
3.71user 2.96system 11:13.03elapsed 0%CPU (0avgtext+0avgdata 86984maxresident)k
0inputs+328outputs (1major+63255minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/MonteCarloMultiGPU/MonteCarloOneBlockPerOption.bpl.ice2.bpl
#################
Tue Apr 27 19:46:40 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 18
Generating VC of $_Z16inverseCNDKernelPfPjj
Verifying $_Z16inverseCNDKernelPfPjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.176037
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197050
Verifying $_Z16inverseCNDKernelPfPjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.18991
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187750
Verifying $_Z16inverseCNDKernelPfPjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.238986
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1185020
Verifying $_Z16inverseCNDKernelPfPjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.286975
Prover time = 0.89
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.34
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.88user 1.16system 0:02.70elapsed 75%CPU (0avgtext+0avgdata 45952maxresident)k
0inputs+136outputs (1major+17889minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/quasirandomGenerator/inverseCNDKernel.bpl.ice2.bpl
#################
Tue Apr 27 19:46:43 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 12
Generating VC of $_Z26quasirandomGeneratorKernelPfjj
Verifying $_Z26quasirandomGeneratorKernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,0,1,0,1,1: positive
Prover Time taken = 0.169977
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177120
Verifying $_Z26quasirandomGeneratorKernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,0,1,0,1,1,1: positive
Prover Time taken = 0.250267
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196940
Verifying $_Z26quasirandomGeneratorKernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.117651
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199960
Verifying $_Z26quasirandomGeneratorKernelPfjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.140217
Prover time = 0.68
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.12
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.79user 1.20system 0:02.44elapsed 81%CPU (0avgtext+0avgdata 43628maxresident)k
0inputs+128outputs (1major+15039minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/quasirandomGenerator/quasirandomGeneratorKernel.bpl.ice2.bpl
#################
Tue Apr 27 19:46:45 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z15sobolGPU_kerneljjPjPf
Verifying $_Z15sobolGPU_kerneljjPjPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1: positive
Prover Time taken = 0.177191
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Total learner time was 00:00:00.1173170
Verifying $_Z15sobolGPU_kerneljjPjPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1: positive
Prover Time taken = 2.857291
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Total learner time was 00:00:00.1214230
Verifying $_Z15sobolGPU_kerneljjPjPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1: positive
Prover Time taken = 4.120592
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Total learner time was 00:00:00.1184280
Verifying $_Z15sobolGPU_kerneljjPjPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 2.693942
Added Horn clause: 3 => 4
Added Horn clause: 3 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Total learner time was 00:00:00.1210870
Verifying $_Z15sobolGPU_kerneljjPjPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 4.682304
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
Total learner time was 00:00:00.1185670
Verifying $_Z15sobolGPU_kerneljjPjPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 5.120105
Prover time = 19.65
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 20.35
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.03user 1.45system 0:21.71elapsed 11%CPU (0avgtext+0avgdata 49320maxresident)k
0inputs+208outputs (1major+22744minor)pagefaults 0swaps
FILE:CUDA50/4_Finance/SobolQRNG/sobol.bpl.ice2.bpl
#################
Tue Apr 27 19:47:07 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 21
Generating VC of $_Z17advectParticles_kP6float2S0_iifij
Verifying $_Z17advectParticles_kP6float2S0_iifij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171963
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
Total learner time was 00:00:00.1241420
Verifying $_Z17advectParticles_kP6float2S0_iifij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 8000 + (if b0001 then 0 else 1) * 8000 + (if b0002 then 0 else 1) * 8000 + (if b0003 then 0 else 1) * 8000 + (if b0004 then 0 else 1) * 8000 + (if b0005 then 0 else 1) * 8000 + (if b0006 then 0 else 1) * 8000 + (if b0007 then 0 else 1) * 8000 + (if b0008 then 0 else 1) * 8000 + (if b0009 then 0 else 1) * 8000 + (if b0010 then 0 else 1) * 8000 + (if b0011 then 0 else 1) * 8000 + (if b0012 then 0 else 1) * 8000 + (if b0013 then 0 else 1) * 8000 + (if b0014 then 0 else 1) * 8000 + (if b0015 then 0 else 1) * 8000 + (if b0016 then 0 else 1) * 8000 + (if b0017 then 0 else 1) * 8000 + (if b0018 then 0 else 1) * 8000 + (if b0019 then 0 else 1) * 8000 + (if b0020 then 0 else 1) * 8000 < 441
}
Prover Time taken = 2.250774
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
Total learner time was 00:00:00.1175570
Verifying $_Z17advectParticles_kP6float2S0_iifij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 8000 + (if b0002 then 0 else 1) * 8000 + (if b0004 then 0 else 1) * 8000 + (if b0005 then 0 else 1) * 8000 + (if b0006 then 0 else 1) * 8000 + (if b0007 then 0 else 1) * 8000 + (if b0008 then 0 else 1) * 8000 + (if b0009 then 0 else 1) * 8000 + (if b0010 then 0 else 1) * 8000 + (if b0011 then 0 else 1) * 8000 + (if b0012 then 0 else 1) * 8000 + (if b0013 then 0 else 1) * 8000 + (if b0014 then 0 else 1) * 8000 + (if b0015 then 0 else 1) * 8000 + (if b0016 then 0 else 1) * 8000 + (if b0017 then 0 else 1) * 8000 + (if b0018 then 0 else 1) * 8000 + (if b0019 then 0 else 1) * 8000 + (if b0020 then 0 else 1) * 8000 < 441
}
Prover Time taken = 0.875997
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
Total learner time was 00:00:00.1192860
Verifying $_Z17advectParticles_kP6float2S0_iifij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 8000 + (if b0002 then 0 else 1) * 8000 + (if b0004 then 0 else 1) * 8000 + (if b0005 then 0 else 1) * 8000 + (if b0006 then 0 else 1) * 8000 + (if b0007 then 0 else 1) * 8000 + (if b0008 then 0 else 1) * 8000 + (if b0009 then 0 else 1) * 8000 + (if b0010 then 0 else 1) * 8000 + (if b0011 then 0 else 1) * 8000 + (if b0012 then 0 else 1) * 8000 + (if b0015 then 0 else 1) * 8000 + (if b0016 then 0 else 1) * 8000 + (if b0019 then 0 else 1) * 8000 + (if b0020 then 0 else 1) * 8000 < 441
}
Prover Time taken = 0.503087
Prover time = 3.80
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 4.28
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.87user 1.18system 0:05.62elapsed 36%CPU (0avgtext+0avgdata 46548maxresident)k
0inputs+136outputs (1major+18291minor)pagefaults 0swaps
FILE:CUDA50/5_Simulations/fluidsGL/advectParticles_k.bpl.ice2.bpl
#################
Tue Apr 27 19:47:13 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z16advectVelocity_kP6float2PfS1_iiifi
Verifying $_Z16advectVelocity_kP6float2PfS1_iiifi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.179851
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
Total learner time was 00:00:00.1223860
Verifying $_Z16advectVelocity_kP6float2PfS1_iiifi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 1.596807
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
Total learner time was 00:00:00.1201930
Verifying $_Z16advectVelocity_kP6float2PfS1_iiifi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 8.985846
Added Horn clause: 0 && 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
Total learner time was 00:00:00.1201100
Verifying $_Z16advectVelocity_kP6float2PfS1_iiifi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 9.672756
Prover time = 20.44
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 20.90
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.96user 1.20system 0:22.27elapsed 9%CPU (0avgtext+0avgdata 47044maxresident)k
0inputs+144outputs (1major+18588minor)pagefaults 0swaps
FILE:CUDA50/5_Simulations/fluidsGL/advectVelocity_k.bpl.ice2.bpl
#################
Tue Apr 27 19:47:35 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 35
Generating VC of $_Z16diffuseProject_kP6float2S0_iiffi
Verifying $_Z16diffuseProject_kP6float2S0_iiffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.179647
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
Total learner time was 00:00:00.1221550
Verifying $_Z16diffuseProject_kP6float2S0_iiffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0020 then 0 else 1) * 14000 + (if b0021 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0023 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0027 then 0 else 1) * 14000 + (if b0028 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.962636
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
Total learner time was 00:00:00.1217770
Verifying $_Z16diffuseProject_kP6float2S0_iiffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0020 then 0 else 1) * 14000 + (if b0021 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0023 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0027 then 0 else 1) * 14000 + (if b0028 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.268192
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
Total learner time was 00:00:00.1184590
Verifying $_Z16diffuseProject_kP6float2S0_iiffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0020 then 0 else 1) * 14000 + (if b0021 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0023 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0027 then 0 else 1) * 14000 + (if b0028 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.063769
Added Horn clause: 2 && 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
Total learner time was 00:00:00.1187800
Verifying $_Z16diffuseProject_kP6float2S0_iiffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0021 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0023 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 0.909821
Added Horn clause: 0 && 1 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
Total learner time was 00:00:00.1202620
Verifying $_Z16diffuseProject_kP6float2S0_iiffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0021 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0023 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 < 441
}
Prover Time taken = 0.809158
Prover time = 6.19
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 6.93
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.10user 1.41system 0:08.29elapsed 30%CPU (0avgtext+0avgdata 52420maxresident)k
0inputs+224outputs (1major+25148minor)pagefaults 0swaps
FILE:CUDA50/5_Simulations/fluidsGL/diffuseProject_k.bpl.ice2.bpl
#################
Tue Apr 27 19:47:43 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/updateVelocity_k.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/updateVelocity_k.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 12
Generating VC of $_Z16updateVelocity_kP6float2PfS1_iiiij
Verifying $_Z16updateVelocity_kP6float2PfS1_iiiij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170488
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/updateVelocity_k.bpl.ice2.bpl
Total learner time was 00:00:00.1191090
Verifying $_Z16updateVelocity_kP6float2PfS1_iiiij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.04619
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/fluidsGL/updateVelocity_k.bpl.ice2.bpl
Total learner time was 00:00:00.1221890
Verifying $_Z16updateVelocity_kP6float2PfS1_iiiij: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 + (if b0011 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.637567
Prover time = 1.85
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 2.18
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.80user 1.13system 0:03.54elapsed 54%CPU (0avgtext+0avgdata 46048maxresident)k
0inputs+96outputs (1major+17137minor)pagefaults 0swaps
FILE:CUDA50/5_Simulations/fluidsGL/updateVelocity_k.bpl.ice2.bpl
#################
Tue Apr 27 19:47:47 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 114
Generating VC of $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.206613
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1221790
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 45000 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0018 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0021 then 0 else 1) * 45000 + (if b0022 then 0 else 1) * 45000 + (if b0023 then 0 else 1) * 45000 + (if b0024 then 0 else 1) * 45000 + (if b0025 then 0 else 1) * 45000 + (if b0026 then 0 else 1) * 45000 + (if b0027 then 0 else 1) * 45000 + (if b0028 then 0 else 1) * 45000 + (if b0029 then 0 else 1) * 45000 + (if b0030 then 0 else 1) * 45000 + (if b0031 then 0 else 1) * 45000 + (if b0032 then 0 else 1) * 45000 + (if b0033 then 0 else 1) * 45000 + (if b0034 then 0 else 1) * 45000 + (if b0035 then 0 else 1) * 45000 + (if b0036 then 0 else 1) * 45000 + (if b0037 then 0 else 1) * 45000 + (if b0038 then 0 else 1) * 45000 + (if b0039 then 0 else 1) * 45000 + (if b0040 then 0 else 1) * 45000 + (if b0041 then 0 else 1) * 45000 + (if b0042 then 0 else 1) * 45000 + (if b0043 then 0 else 1) * 45000 + (if b0044 then 0 else 1) * 45000 + (if b0045 then 0 else 1) * 45000 + (if b0046 then 0 else 1) * 45000 + (if b0047 then 0 else 1) * 45000 + (if b0048 then 0 else 1) * 45000 + (if b0049 then 0 else 1) * 45000 + (if b0050 then 0 else 1) * 45000 + (if b0051 then 0 else 1) * 45000 + (if b0052 then 0 else 1) * 45000 + (if b0053 then 0 else 1) * 45000 + (if b0054 then 0 else 1) * 45000 + (if b0055 then 0 else 1) * 45000 + (if b0056 then 0 else 1) * 45000 + (if b0057 then 0 else 1) * 45000 + (if b0058 then 0 else 1) * 45000 + (if b0059 then 0 else 1) * 45000 + (if b0060 then 0 else 1) * 45000 + (if b0061 then 0 else 1) * 45000 + (if b0062 then 0 else 1) * 45000 + (if b0063 then 0 else 1) * 45000 + (if b0064 then 0 else 1) * 45000 + (if b0065 then 0 else 1) * 45000 + (if b0066 then 0 else 1) * 45000 + (if b0067 then 0 else 1) * 45000 + (if b0068 then 0 else 1) * 45000 + (if b0069 then 0 else 1) * 45000 + (if b0070 then 0 else 1) * 45000 + (if b0071 then 0 else 1) * 45000 + (if b0072 then 0 else 1) * 45000 + (if b0073 then 0 else 1) * 45000 + (if b0074 then 0 else 1) * 45000 + (if b0075 then 0 else 1) * 45000 + (if b0076 then 0 else 1) * 45000 + (if b0077 then 0 else 1) * 45000 + (if b0078 then 0 else 1) * 45000 + (if b0079 then 0 else 1) * 45000 + (if b0080 then 0 else 1) * 45000 + (if b0081 then 0 else 1) * 45000 + (if b0082 then 0 else 1) * 45000 + (if b0083 then 0 else 1) * 45000 + (if b0084 then 0 else 1) * 45000 + (if b0085 then 0 else 1) * 45000 + (if b0086 then 0 else 1) * 45000 + (if b0087 then 0 else 1) * 45000 + (if b0088 then 0 else 1) * 45000 + (if b0089 then 0 else 1) * 45000 + (if b0090 then 0 else 1) * 45000 + (if b0091 then 0 else 1) * 45000 + (if b0092 then 0 else 1) * 45000 + (if b0093 then 0 else 1) * 45000 + (if b0094 then 0 else 1) * 45000 + (if b0095 then 0 else 1) * 45000 + (if b0096 then 0 else 1) * 45000 + (if b0097 then 0 else 1) * 45000 + (if b0098 then 0 else 1) * 45000 + (if b0099 then 0 else 1) * 45000 + (if b0100 then 0 else 1) * 45000 + (if b0101 then 0 else 1) * 45000 + (if b0102 then 0 else 1) * 45000 + (if b0103 then 0 else 1) * 45000 + (if b0104 then 0 else 1) * 45000 + (if b0105 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,1,0,1,1,0,1,1,1,0,0,1,0,1,1,1,0,0,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 41.134759
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1195050
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 45000 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0018 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0023 then 0 else 1) * 45000 + (if b0024 then 0 else 1) * 45000 + (if b0025 then 0 else 1) * 45000 + (if b0026 then 0 else 1) * 45000 + (if b0027 then 0 else 1) * 45000 + (if b0037 then 0 else 1) * 45000 + (if b0041 then 0 else 1) * 45000 + (if b0042 then 0 else 1) * 45000 + (if b0044 then 0 else 1) * 45000 + (if b0046 then 0 else 1) * 45000 + (if b0048 then 0 else 1) * 45000 + (if b0049 then 0 else 1) * 45000 + (if b0051 then 0 else 1) * 45000 + (if b0052 then 0 else 1) * 45000 + (if b0053 then 0 else 1) * 45000 + (if b0056 then 0 else 1) * 45000 + (if b0058 then 0 else 1) * 45000 + (if b0059 then 0 else 1) * 45000 + (if b0060 then 0 else 1) * 45000 + (if b0064 then 0 else 1) * 45000 + (if b0065 then 0 else 1) * 45000 + (if b0067 then 0 else 1) * 45000 + (if b0069 then 0 else 1) * 45000 + (if b0071 then 0 else 1) * 45000 + (if b0072 then 0 else 1) * 45000 + (if b0073 then 0 else 1) * 45000 + (if b0074 then 0 else 1) * 45000 + (if b0078 then 0 else 1) * 45000 + (if b0080 then 0 else 1) * 45000 + (if b0081 then 0 else 1) * 45000 + (if b0082 then 0 else 1) * 45000 + (if b0083 then 0 else 1) * 45000 + (if b0084 then 0 else 1) * 45000 + (if b0085 then 0 else 1) * 45000 + (if b0086 then 0 else 1) * 45000 + (if b0087 then 0 else 1) * 45000 + (if b0092 then 0 else 1) * 45000 + (if b0093 then 0 else 1) * 45000 + (if b0094 then 0 else 1) * 45000 + (if b0095 then 0 else 1) * 45000 + (if b0097 then 0 else 1) * 45000 + (if b0099 then 0 else 1) * 45000 + (if b0100 then 0 else 1) * 45000 + (if b0101 then 0 else 1) * 45000 + (if b0102 then 0 else 1) * 45000 + (if b0105 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 25.065945
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1246580
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 45000 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0023 then 0 else 1) * 45000 + (if b0024 then 0 else 1) * 45000 + (if b0025 then 0 else 1) * 45000 + (if b0026 then 0 else 1) * 45000 + (if b0027 then 0 else 1) * 45000 + (if b0037 then 0 else 1) * 45000 + (if b0041 then 0 else 1) * 45000 + (if b0042 then 0 else 1) * 45000 + (if b0044 then 0 else 1) * 45000 + (if b0046 then 0 else 1) * 45000 + (if b0048 then 0 else 1) * 45000 + (if b0049 then 0 else 1) * 45000 + (if b0051 then 0 else 1) * 45000 + (if b0052 then 0 else 1) * 45000 + (if b0053 then 0 else 1) * 45000 + (if b0056 then 0 else 1) * 45000 + (if b0058 then 0 else 1) * 45000 + (if b0059 then 0 else 1) * 45000 + (if b0060 then 0 else 1) * 45000 + (if b0064 then 0 else 1) * 45000 + (if b0065 then 0 else 1) * 45000 + (if b0067 then 0 else 1) * 45000 + (if b0069 then 0 else 1) * 45000 + (if b0071 then 0 else 1) * 45000 + (if b0072 then 0 else 1) * 45000 + (if b0073 then 0 else 1) * 45000 + (if b0074 then 0 else 1) * 45000 + (if b0078 then 0 else 1) * 45000 + (if b0080 then 0 else 1) * 45000 + (if b0081 then 0 else 1) * 45000 + (if b0082 then 0 else 1) * 45000 + (if b0083 then 0 else 1) * 45000 + (if b0084 then 0 else 1) * 45000 + (if b0085 then 0 else 1) * 45000 + (if b0086 then 0 else 1) * 45000 + (if b0087 then 0 else 1) * 45000 + (if b0092 then 0 else 1) * 45000 + (if b0093 then 0 else 1) * 45000 + (if b0094 then 0 else 1) * 45000 + (if b0095 then 0 else 1) * 45000 + (if b0097 then 0 else 1) * 45000 + (if b0099 then 0 else 1) * 45000 + (if b0100 then 0 else 1) * 45000 + (if b0101 then 0 else 1) * 45000 + (if b0102 then 0 else 1) * 45000 + (if b0105 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1: positive
Added: my_inv:0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 28.437516
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1208380
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0025 then 0 else 1) * 45000 + (if b0037 then 0 else 1) * 45000 + (if b0041 then 0 else 1) * 45000 + (if b0051 then 0 else 1) * 45000 + (if b0052 then 0 else 1) * 45000 + (if b0053 then 0 else 1) * 45000 + (if b0056 then 0 else 1) * 45000 + (if b0060 then 0 else 1) * 45000 + (if b0064 then 0 else 1) * 45000 + (if b0069 then 0 else 1) * 45000 + (if b0071 then 0 else 1) * 45000 + (if b0073 then 0 else 1) * 45000 + (if b0074 then 0 else 1) * 45000 + (if b0082 then 0 else 1) * 45000 + (if b0083 then 0 else 1) * 45000 + (if b0084 then 0 else 1) * 45000 + (if b0085 then 0 else 1) * 45000 + (if b0086 then 0 else 1) * 45000 + (if b0093 then 0 else 1) * 45000 + (if b0094 then 0 else 1) * 45000 + (if b0095 then 0 else 1) * 45000 + (if b0100 then 0 else 1) * 45000 + (if b0101 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 34.133725
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1191800
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0025 then 0 else 1) * 45000 + (if b0041 then 0 else 1) * 45000 + (if b0051 then 0 else 1) * 45000 + (if b0053 then 0 else 1) * 45000 + (if b0056 then 0 else 1) * 45000 + (if b0064 then 0 else 1) * 45000 + (if b0074 then 0 else 1) * 45000 + (if b0083 then 0 else 1) * 45000 + (if b0086 then 0 else 1) * 45000 + (if b0095 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 25.453118
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1210020
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0041 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 15.567097
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1203980
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 45000 + (if b0002 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0004 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0010 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0012 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Prover Time taken = 6.54462
Added Horn clause: 2 && 4 && 0 && 0 => 8
Added Horn clause: 2 && 4 && 0 && 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1229820
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 45000 + (if b0003 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Prover Time taken = 7.138797
Added Horn clause: 2 && 10 && 0 && 0 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
Total learner time was 00:00:00.1200050
Verifying $_Z15integrateBodiesIfLb0EEvPN4vec4IT_E4TypeES4_S4_jjffi: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 45000 + (if b0005 then 0 else 1) * 45000 + (if b0006 then 0 else 1) * 45000 + (if b0007 then 0 else 1) * 45000 + (if b0008 then 0 else 1) * 45000 + (if b0009 then 0 else 1) * 45000 + (if b0011 then 0 else 1) * 45000 + (if b0013 then 0 else 1) * 45000 + (if b0014 then 0 else 1) * 45000 + (if b0015 then 0 else 1) * 45000 + (if b0016 then 0 else 1) * 45000 + (if b0017 then 0 else 1) * 45000 + (if b0019 then 0 else 1) * 45000 + (if b0020 then 0 else 1) * 45000 + (if b0106 then 0 else 1) * 45000 + (if b0107 then 0 else 1) * 45000 + (if b0108 then 0 else 1) * 45000 + (if b0109 then 0 else 1) * 45000 + (if b0110 then 0 else 1) * 45000 + (if b0111 then 0 else 1) * 45000 + (if b0112 then 0 else 1) * 45000 + (if b0113 then 0 else 1) * 45000 < 441
}
Prover Time taken = 1.331031
Prover time = 185.01
Number of prover queries = 10
Learner time = 1.09
Number of learner queries = 9
Total time: 186.40
Number of positive examples:8
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
3.14user 2.83system 3:07.87elapsed 3%CPU (0avgtext+0avgdata 72820maxresident)k
0inputs+504outputs (1major+55003minor)pagefaults 0swaps
FILE:CUDA50/5_Simulations/nbody/nbody.bpl.ice2.bpl
#################
Tue Apr 27 19:50:55 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z10testKernelIiEvPT_S1_i
Verifying $_Z10testKernelIiEvPT_S1_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.16978
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
Total learner time was 00:00:00.1196140
Verifying $_Z10testKernelIiEvPT_S1_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.088857
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
Total learner time was 00:00:00.1194110
Verifying $_Z10testKernelIiEvPT_S1_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.095162
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
Total learner time was 00:00:00.1196510
Verifying $_Z10testKernelIiEvPT_S1_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.099141
Prover time = 0.45
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 0.90
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.18system 0:02.22elapsed 88%CPU (0avgtext+0avgdata 43304maxresident)k
0inputs+136outputs (1major+14622minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/alignedTypes/alignedTypes.bpl.ice2.bpl
#################
Tue Apr 27 19:50:57 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z3sumPji
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.16886
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1190430
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.179514
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1238850
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.218096
Added Horn clause: 2 && 1 => 3
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1180940
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.103385
Prover time = 0.67
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.13
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.86user 1.19system 0:02.46elapsed 83%CPU (0avgtext+0avgdata 45776maxresident)k
0inputs+136outputs (1major+17682minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/concurrentKernels/sum.bpl.ice2.bpl
#################
Tue Apr 27 19:50:59 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 124
Generating VC of $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.202894
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1200880
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0055 then 0 else 1) * 49000 + (if b0056 then 0 else 1) * 49000 + (if b0057 then 0 else 1) * 49000 + (if b0058 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0060 then 0 else 1) * 49000 + (if b0061 then 0 else 1) * 49000 + (if b0062 then 0 else 1) * 49000 + (if b0063 then 0 else 1) * 49000 + (if b0064 then 0 else 1) * 49000 + (if b0065 then 0 else 1) * 49000 + (if b0066 then 0 else 1) * 49000 + (if b0067 then 0 else 1) * 49000 + (if b0068 then 0 else 1) * 49000 + (if b0069 then 0 else 1) * 49000 + (if b0070 then 0 else 1) * 49000 + (if b0071 then 0 else 1) * 49000 + (if b0072 then 0 else 1) * 49000 + (if b0073 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 5.396654
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1188970
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0055 then 0 else 1) * 49000 + (if b0057 then 0 else 1) * 49000 + (if b0058 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0062 then 0 else 1) * 49000 + (if b0063 then 0 else 1) * 49000 + (if b0064 then 0 else 1) * 49000 + (if b0070 then 0 else 1) * 49000 + (if b0071 then 0 else 1) * 49000 + (if b0072 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 6.716914
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1203940
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0055 then 0 else 1) * 49000 + (if b0057 then 0 else 1) * 49000 + (if b0058 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0063 then 0 else 1) * 49000 + (if b0064 then 0 else 1) * 49000 + (if b0070 then 0 else 1) * 49000 + (if b0072 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 6.001608
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1199110
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0055 then 0 else 1) * 49000 + (if b0058 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0064 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 5.071726
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1211370
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0055 then 0 else 1) * 49000 + (if b0058 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.654434
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1190510
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0058 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.550371
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1207700
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 3.916837
Added Horn clause: 0 => 7
Added Horn clause: 8 => 9
Added Horn clause: 10 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 12 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 12 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 15 && 0 && 0 && 0 && 0 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1225770
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 4.41635
Added Horn clause: 0 && 0 && 7 => 17
Added Horn clause: 18 && 0 && 7 && 0 && 0 => 19
Added Horn clause: 20 && 21 && 13 && 0 && 0 => 22
Added Horn clause: 20 && 23 && 13 && 0 && 0 => 24
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1211910
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 1.868846
Added Horn clause: 25 && 26 && 27 && 0 && 17 => 28
Added Horn clause: 29 && 30 && 13 && 0 && 17 => 31
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1196810
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 2.461803
Added Horn clause: 32 && 33 && 13 && 0 && 17 => 34
Added Horn clause: 35 && 36 && 22 && 0 && 17 => 37
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1205830
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 2.728956
Added Horn clause: 38 && 39 && 7 => 40
Added Horn clause: 41 && 42 && 27 && 0 && 17 => 43
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1231090
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 1.562865
Added Horn clause: 44 && 39 && 0 => 45
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1216240
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 2.484229
Added Horn clause: 46 && 47 && 7 => 48
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1252120
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 2.139194
Added Horn clause: 49 && 47 && 7 => 50
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
Total learner time was 00:00:00.1225830
Verifying $_Z30bisectKernelLarge_OneIntervalsPfS_jjS_S_Pjf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 0.442581
Prover time = 60.62
Number of prover queries = 16
Learner time = 1.82
Number of learner queries = 15
Total time: 62.98
Number of positive examples:7
Number of negative examples:0
Number of Horn clauses:19
verified

Boogie program verifier finished with 1 verified, 0 errors
4.67user 4.15system 1:04.45elapsed 13%CPU (0avgtext+0avgdata 72132maxresident)k
0inputs+952outputs (1major+83160minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/eigenvalues/bisect_kernel_large_onei.bpl.ice2.bpl
#################
Tue Apr 27 19:52:04 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 44
Generating VC of $_Z15fwtBatch1KernelPfS_i
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.173788
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1175520
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 5.582365
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 => 2
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191840
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 3.28575
Added Horn clause: 0 && 1 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1203270
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 13.239914
Added Horn clause: 0 && 4 => 5
Added Horn clause: 0 && 1 => 6
Added Horn clause: 0 && 4 && 0 => 7
Added Horn clause: 0 && 4 && 0 && 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1241030
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 8.379077
Added Horn clause: 0 && 4 => 9
Added Horn clause: 0 && 4 && 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229120
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 4.336007
Added Horn clause: 0 && 4 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229330
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 < 441
}
Prover Time taken = 4.866029
Added Horn clause: 0 && 4 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196060
Verifying $_Z15fwtBatch1KernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.471868
Prover time = 41.33
Number of prover queries = 8
Learner time = 0.85
Number of learner queries = 7
Total time: 42.39
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:12
verified

Boogie program verifier finished with 1 verified, 0 errors
1.36user 1.79system 0:43.77elapsed 7%CPU (0avgtext+0avgdata 58276maxresident)k
0inputs+320outputs (1major+33217minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/fastWalshTransform/fwtBatch1Kernel.bpl.ice2.bpl
#################
Tue Apr 27 19:52:48 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z14modulateKernelPfS_i
Verifying $_Z14modulateKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.174773
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1200380
Verifying $_Z14modulateKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.075895
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1203330
Verifying $_Z14modulateKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.121713
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1204670
Verifying $_Z14modulateKernelPfS_i: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.060366
Prover time = 0.43
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 0.88
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.82user 1.16system 0:02.20elapsed 89%CPU (0avgtext+0avgdata 43612maxresident)k
0inputs+136outputs (1major+14766minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/fastWalshTransform/modulateKernel.bpl.ice2.bpl
#################
Tue Apr 27 19:52:50 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z14SobelCopyImagePhjiif
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169534
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1207140
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.286624
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1184070
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.21441
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
Total learner time was 00:00:00.1198020
Verifying $_Z14SobelCopyImagePhjiif: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.931946
Prover time = 2.60
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 3.05
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.84user 1.20system 0:04.41elapsed 46%CPU (0avgtext+0avgdata 45556maxresident)k
0inputs+144outputs (1major+17072minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/FunctionPointers/SobelCopyImage.bpl.ice2.bpl
#################
Tue Apr 27 19:52:54 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 64
Generating VC of $_Z23bitonicSortSharedKernelPjS_S_S_jj
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.226361
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1206850
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0014 then 0 else 1) * 25000 + (if b0047 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.387845
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1191210
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0014 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 15.999108
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1223690
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 23.312039
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1266270
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 14.814785
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1194060
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 14.963284
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1214700
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 5.671401
Added Horn clause: 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
Total learner time was 00:00:00.1225310
Verifying $_Z23bitonicSortSharedKernelPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 0.1629
Prover time = 82.54
Number of prover queries = 8
Learner time = 0.85
Number of learner queries = 7
Total time: 83.56
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.51user 1.75system 1:24.98elapsed 3%CPU (0avgtext+0avgdata 57940maxresident)k
0inputs+352outputs (1major+36036minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/mergeSort/bitonicSortSharedKernel.bpl.ice2.bpl
#################
Tue Apr 27 19:54:19 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z7reduce0IiEvPT_S1_j
Verifying $_Z7reduce0IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.180459
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce0.bpl.ice2.bpl
Total learner time was 00:00:00.1189030
Verifying $_Z7reduce0IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.12387
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce0.bpl.ice2.bpl
Total learner time was 00:00:00.1193650
Verifying $_Z7reduce0IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.104588
Prover time = 0.41
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.73
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.08system 0:02.03elapsed 91%CPU (0avgtext+0avgdata 44548maxresident)k
0inputs+96outputs (1major+15122minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/reduction/reduce0.bpl.ice2.bpl
#################
Tue Apr 27 19:54:21 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $_Z7reduce1IiEvPT_S1_j
Verifying $_Z7reduce1IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.176749
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce1.bpl.ice2.bpl
Total learner time was 00:00:00.1176280
Verifying $_Z7reduce1IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.27123
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce1.bpl.ice2.bpl
Total learner time was 00:00:00.1175860
Verifying $_Z7reduce1IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.172176
Prover time = 0.62
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.93
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.74user 1.12system 0:02.27elapsed 82%CPU (0avgtext+0avgdata 44568maxresident)k
0inputs+96outputs (1major+15822minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/reduction/reduce1.bpl.ice2.bpl
#################
Tue Apr 27 19:54:24 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z7reduce2IiEvPT_S1_j
Verifying $_Z7reduce2IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.177349
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
Total learner time was 00:00:00.1193320
Verifying $_Z7reduce2IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.098947
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
Total learner time was 00:00:00.1207880
Verifying $_Z7reduce2IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.105563
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
Total learner time was 00:00:00.1234270
Verifying $_Z7reduce2IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.031126
Prover time = 0.41
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 0.86
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.84user 1.18system 0:02.20elapsed 92%CPU (0avgtext+0avgdata 44736maxresident)k
0inputs+136outputs (1major+16368minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/reduction/reduce2.bpl.ice2.bpl
#################
Tue Apr 27 19:54:26 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z7reduce3IiEvPT_S1_j
Verifying $_Z7reduce3IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.185912
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
Total learner time was 00:00:00.1180420
Verifying $_Z7reduce3IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.10472
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
Total learner time was 00:00:00.1197180
Verifying $_Z7reduce3IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.123046
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
Total learner time was 00:00:00.1204140
Verifying $_Z7reduce3IiEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.043088
Prover time = 0.46
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 0.91
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.84user 1.16system 0:02.24elapsed 89%CPU (0avgtext+0avgdata 44684maxresident)k
0inputs+136outputs (1major+16637minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/reduction/reduce3.bpl.ice2.bpl
#################
Tue Apr 27 19:54:28 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce4.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce4.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 15
Generating VC of $_Z7reduce4IiLj256EEvPT_S1_j
Verifying $_Z7reduce4IiLj256EEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.206348
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce4.bpl.ice2.bpl
Total learner time was 00:00:00.1217330
Verifying $_Z7reduce4IiLj256EEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 < 441
}
Prover Time taken = 3.281559
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/reduction/reduce4.bpl.ice2.bpl
Total learner time was 00:00:00.1212440
Verifying $_Z7reduce4IiLj256EEvPT_S1_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.198561
Prover time = 3.69
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 4.01
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.81user 1.17system 0:05.43elapsed 36%CPU (0avgtext+0avgdata 51208maxresident)k
0inputs+96outputs (1major+19202minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/reduction/reduce4.bpl.ice2.bpl
#################
Tue Apr 27 19:54:33 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 146
Generating VC of $_Z13scalarProdGPUPfS_S_ii
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.184385
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1196510
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0004 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0006 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0013 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0015 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0024 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0026 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0033 then 0 else 1) * 58000 + (if b0034 then 0 else 1) * 58000 + (if b0035 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0037 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0045 then 0 else 1) * 58000 + (if b0047 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0052 then 0 else 1) * 58000 + (if b0053 then 0 else 1) * 58000 + (if b0054 then 0 else 1) * 58000 + (if b0055 then 0 else 1) * 58000 + (if b0056 then 0 else 1) * 58000 + (if b0057 then 0 else 1) * 58000 + (if b0058 then 0 else 1) * 58000 + (if b0059 then 0 else 1) * 58000 + (if b0060 then 0 else 1) * 58000 + (if b0061 then 0 else 1) * 58000 + (if b0062 then 0 else 1) * 58000 + (if b0063 then 0 else 1) * 58000 + (if b0064 then 0 else 1) * 58000 + (if b0065 then 0 else 1) * 58000 + (if b0066 then 0 else 1) * 58000 + (if b0067 then 0 else 1) * 58000 + (if b0068 then 0 else 1) * 58000 + (if b0069 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0085 then 0 else 1) * 58000 + (if b0086 then 0 else 1) * 58000 + (if b0087 then 0 else 1) * 58000 + (if b0088 then 0 else 1) * 58000 + (if b0089 then 0 else 1) * 58000 + (if b0090 then 0 else 1) * 58000 + (if b0091 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0102 then 0 else 1) * 58000 + (if b0103 then 0 else 1) * 58000 + (if b0104 then 0 else 1) * 58000 + (if b0105 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0109 then 0 else 1) * 58000 + (if b0110 then 0 else 1) * 58000 + (if b0111 then 0 else 1) * 58000 + (if b0112 then 0 else 1) * 58000 + (if b0113 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0120 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0128 then 0 else 1) * 58000 + (if b0129 then 0 else 1) * 58000 + (if b0130 then 0 else 1) * 58000 + (if b0131 then 0 else 1) * 58000 + (if b0132 then 0 else 1) * 58000 + (if b0133 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0142 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.083237
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1226610
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0004 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0006 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0013 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0015 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0024 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0026 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0033 then 0 else 1) * 58000 + (if b0034 then 0 else 1) * 58000 + (if b0035 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0037 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0054 then 0 else 1) * 58000 + (if b0058 then 0 else 1) * 58000 + (if b0064 then 0 else 1) * 58000 + (if b0067 then 0 else 1) * 58000 + (if b0069 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0085 then 0 else 1) * 58000 + (if b0086 then 0 else 1) * 58000 + (if b0087 then 0 else 1) * 58000 + (if b0088 then 0 else 1) * 58000 + (if b0089 then 0 else 1) * 58000 + (if b0090 then 0 else 1) * 58000 + (if b0091 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0102 then 0 else 1) * 58000 + (if b0103 then 0 else 1) * 58000 + (if b0104 then 0 else 1) * 58000 + (if b0105 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0109 then 0 else 1) * 58000 + (if b0110 then 0 else 1) * 58000 + (if b0111 then 0 else 1) * 58000 + (if b0112 then 0 else 1) * 58000 + (if b0113 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0120 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0128 then 0 else 1) * 58000 + (if b0129 then 0 else 1) * 58000 + (if b0130 then 0 else 1) * 58000 + (if b0131 then 0 else 1) * 58000 + (if b0132 then 0 else 1) * 58000 + (if b0133 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0142 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.186429
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1207300
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0004 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0006 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0013 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0015 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0024 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0026 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0033 then 0 else 1) * 58000 + (if b0034 then 0 else 1) * 58000 + (if b0035 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0037 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0058 then 0 else 1) * 58000 + (if b0067 then 0 else 1) * 58000 + (if b0069 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0085 then 0 else 1) * 58000 + (if b0086 then 0 else 1) * 58000 + (if b0087 then 0 else 1) * 58000 + (if b0088 then 0 else 1) * 58000 + (if b0089 then 0 else 1) * 58000 + (if b0090 then 0 else 1) * 58000 + (if b0091 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0102 then 0 else 1) * 58000 + (if b0103 then 0 else 1) * 58000 + (if b0104 then 0 else 1) * 58000 + (if b0105 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0109 then 0 else 1) * 58000 + (if b0110 then 0 else 1) * 58000 + (if b0111 then 0 else 1) * 58000 + (if b0112 then 0 else 1) * 58000 + (if b0113 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0120 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0128 then 0 else 1) * 58000 + (if b0129 then 0 else 1) * 58000 + (if b0130 then 0 else 1) * 58000 + (if b0131 then 0 else 1) * 58000 + (if b0132 then 0 else 1) * 58000 + (if b0133 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0142 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.110614
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1200510
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0004 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0006 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0013 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0015 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0024 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0026 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0033 then 0 else 1) * 58000 + (if b0034 then 0 else 1) * 58000 + (if b0035 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0037 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0069 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0085 then 0 else 1) * 58000 + (if b0086 then 0 else 1) * 58000 + (if b0087 then 0 else 1) * 58000 + (if b0088 then 0 else 1) * 58000 + (if b0089 then 0 else 1) * 58000 + (if b0090 then 0 else 1) * 58000 + (if b0091 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0102 then 0 else 1) * 58000 + (if b0103 then 0 else 1) * 58000 + (if b0104 then 0 else 1) * 58000 + (if b0105 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0109 then 0 else 1) * 58000 + (if b0110 then 0 else 1) * 58000 + (if b0111 then 0 else 1) * 58000 + (if b0112 then 0 else 1) * 58000 + (if b0113 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0120 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0128 then 0 else 1) * 58000 + (if b0129 then 0 else 1) * 58000 + (if b0130 then 0 else 1) * 58000 + (if b0131 then 0 else 1) * 58000 + (if b0132 then 0 else 1) * 58000 + (if b0133 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0142 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 3.342921
Added Horn clause: 4 && 5 && 5 => 6
Added Horn clause: 7 => 8
Added Horn clause: 9 && 5 && 5 => 10
Added Horn clause: 9 && 5 && 5 => 11
Added Horn clause: 12 && 5 && 5 && 5 && 5 && 5 && 5 => 13
Added Horn clause: 12 && 5 && 5 && 5 && 5 && 5 && 5 => 14
Added Horn clause: 15 && 5 && 5 && 5 && 5 && 5 && 5 => 16
Added Horn clause: 15 && 5 && 5 && 5 && 5 && 5 && 5 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1234230
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0004 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0006 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0033 then 0 else 1) * 58000 + (if b0034 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0069 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0102 then 0 else 1) * 58000 + (if b0103 then 0 else 1) * 58000 + (if b0105 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0109 then 0 else 1) * 58000 + (if b0110 then 0 else 1) * 58000 + (if b0111 then 0 else 1) * 58000 + (if b0113 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0120 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0128 then 0 else 1) * 58000 + (if b0129 then 0 else 1) * 58000 + (if b0130 then 0 else 1) * 58000 + (if b0131 then 0 else 1) * 58000 + (if b0133 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0142 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 5.544404
Added Horn clause: 18 && 5 && 5 => 19
Added Horn clause: 20 && 5 && 5 && 5 && 13 => 21
Added Horn clause: 22 && 5 && 5 && 5 && 13 && 5 && 5 => 23
Added Horn clause: 22 && 5 && 5 && 5 && 5 && 16 && 5 => 24
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1214500
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0004 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0006 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0033 then 0 else 1) * 58000 + (if b0034 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0069 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0103 then 0 else 1) * 58000 + (if b0105 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0110 then 0 else 1) * 58000 + (if b0111 then 0 else 1) * 58000 + (if b0113 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0120 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0128 then 0 else 1) * 58000 + (if b0129 then 0 else 1) * 58000 + (if b0131 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0142 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 801.634682
Added Horn clause: 25 && 5 && 5 => 26
Added Horn clause: 27 && 5 && 5 && 28 && 5 && 29 && 17 => 30
Added Horn clause: 27 && 5 && 5 && 28 && 13 && 29 && 5 => 31
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1234360
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0004 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0006 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0033 then 0 else 1) * 58000 + (if b0034 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0069 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0103 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0110 then 0 else 1) * 58000 + (if b0111 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0120 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0129 then 0 else 1) * 58000 + (if b0131 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0142 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 20.145868
Added Horn clause: 32 && 5 && 5 => 33
Added Horn clause: 34 && 5 && 5 && 28 && 13 && 5 && 5 => 35
Added Horn clause: 34 && 5 && 5 && 28 && 13 && 31 && 5 => 36
Added Horn clause: 37 && 5 && 5 && 28 && 13 && 21 && 5 => 38
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1226610
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0004 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0006 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0034 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0069 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0110 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0120 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0131 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0142 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 16.090116
Added Horn clause: 39 && 5 && 5 => 40
Added Horn clause: 41 && 5 && 5 && 42 && 13 => 43
Added Horn clause: 44 && 5 && 5 && 45 && 5 && 5 && 5 => 46
Added Horn clause: 47 && 5 && 5 && 28 && 13 && 38 && 5 => 48
Added Horn clause: 47 && 5 && 5 && 28 && 13 && 5 && 5 => 49
Added Horn clause: 47 && 5 && 5 && 5 && 13 && 29 && 5 => 50
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1212710
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0042 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0077 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0121 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0124 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0140 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 7.367375
Added Horn clause: 51 && 5 && 5 => 52
Added Horn clause: 51 && 5 && 5 && 53 && 5 => 54
Added Horn clause: 55 && 5 && 5 && 56 && 13 && 38 && 57 => 58
Added Horn clause: 59 && 5 && 5 && 5 && 13 && 60 && 5 => 61
Added Horn clause: 59 && 5 && 5 && 45 && 5 && 5 && 5 => 62
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1211050
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0029 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0044 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0071 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0141 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 3.623669
Added Horn clause: 63 && 5 && 5 => 64
Added Horn clause: 65 && 5 && 5 && 66 && 5 => 67
Added Horn clause: 65 && 5 && 5 && 28 && 5 && 38 && 57 => 68
Added Horn clause: 69 && 5 && 5 && 45 && 5 && 5 && 5 => 70
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1244480
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0041 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0078 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0093 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 10.971431
Added Horn clause: 71 && 5 && 5 && 72 && 64 => 73
Added Horn clause: 74 => 75
Added Horn clause: 76 && 5 && 5 && 66 && 5 && 5 && 67 => 77
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1294980
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0019 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0079 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0115 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 7.568942
Added Horn clause: 78 => 79
Added Horn clause: 80 && 75 && 5 => 81
Added Horn clause: 82 && 5 && 5 && 45 && 5 && 5 && 5 => 83
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1241910
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0030 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0081 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0098 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0135 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 26.423593
Added Horn clause: 84 && 5 && 79 => 85
Added Horn clause: 86 && 75 && 5 && 87 && 5 => 88
Added Horn clause: 89 => 90
Added Horn clause: 91 && 5 && 5 && 92 && 5 && 60 && 54 => 93
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1239500
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0043 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 3.694692
Added Horn clause: 94 && 5 && 79 && 95 && 85 => 96
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
Total learner time was 00:00:00.1249120
Verifying $_Z13scalarProdGPUPfS_S_ii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 58000 + (if b0001 then 0 else 1) * 58000 + (if b0002 then 0 else 1) * 58000 + (if b0003 then 0 else 1) * 58000 + (if b0005 then 0 else 1) * 58000 + (if b0007 then 0 else 1) * 58000 + (if b0008 then 0 else 1) * 58000 + (if b0009 then 0 else 1) * 58000 + (if b0010 then 0 else 1) * 58000 + (if b0011 then 0 else 1) * 58000 + (if b0012 then 0 else 1) * 58000 + (if b0014 then 0 else 1) * 58000 + (if b0016 then 0 else 1) * 58000 + (if b0017 then 0 else 1) * 58000 + (if b0018 then 0 else 1) * 58000 + (if b0020 then 0 else 1) * 58000 + (if b0021 then 0 else 1) * 58000 + (if b0022 then 0 else 1) * 58000 + (if b0023 then 0 else 1) * 58000 + (if b0025 then 0 else 1) * 58000 + (if b0027 then 0 else 1) * 58000 + (if b0028 then 0 else 1) * 58000 + (if b0031 then 0 else 1) * 58000 + (if b0032 then 0 else 1) * 58000 + (if b0036 then 0 else 1) * 58000 + (if b0038 then 0 else 1) * 58000 + (if b0039 then 0 else 1) * 58000 + (if b0040 then 0 else 1) * 58000 + (if b0049 then 0 else 1) * 58000 + (if b0050 then 0 else 1) * 58000 + (if b0070 then 0 else 1) * 58000 + (if b0072 then 0 else 1) * 58000 + (if b0073 then 0 else 1) * 58000 + (if b0074 then 0 else 1) * 58000 + (if b0075 then 0 else 1) * 58000 + (if b0076 then 0 else 1) * 58000 + (if b0080 then 0 else 1) * 58000 + (if b0082 then 0 else 1) * 58000 + (if b0083 then 0 else 1) * 58000 + (if b0084 then 0 else 1) * 58000 + (if b0092 then 0 else 1) * 58000 + (if b0094 then 0 else 1) * 58000 + (if b0095 then 0 else 1) * 58000 + (if b0096 then 0 else 1) * 58000 + (if b0097 then 0 else 1) * 58000 + (if b0099 then 0 else 1) * 58000 + (if b0100 then 0 else 1) * 58000 + (if b0101 then 0 else 1) * 58000 + (if b0106 then 0 else 1) * 58000 + (if b0107 then 0 else 1) * 58000 + (if b0108 then 0 else 1) * 58000 + (if b0114 then 0 else 1) * 58000 + (if b0116 then 0 else 1) * 58000 + (if b0117 then 0 else 1) * 58000 + (if b0118 then 0 else 1) * 58000 + (if b0119 then 0 else 1) * 58000 + (if b0122 then 0 else 1) * 58000 + (if b0123 then 0 else 1) * 58000 + (if b0125 then 0 else 1) * 58000 + (if b0126 then 0 else 1) * 58000 + (if b0127 then 0 else 1) * 58000 + (if b0134 then 0 else 1) * 58000 + (if b0136 then 0 else 1) * 58000 + (if b0137 then 0 else 1) * 58000 + (if b0138 then 0 else 1) * 58000 + (if b0139 then 0 else 1) * 58000 + (if b0143 then 0 else 1) * 58000 + (if b0144 then 0 else 1) * 58000 + (if b0145 then 0 else 1) * 58000 < 441
}
Prover Time taken = 7.598241
Prover time = 926.57
Number of prover queries = 16
Learner time = 1.84
Number of learner queries = 15
Total time: 929.42
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:45
verified

Boogie program verifier finished with 1 verified, 0 errors
6.39user 5.00system 15:30.86elapsed 1%CPU (0avgtext+0avgdata 75868maxresident)k
0inputs+1200outputs (1major+98606minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/scalarProd/scalarProd.bpl.ice2.bpl
#################
Tue Apr 27 20:10:04 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z19scanExclusiveSharedP5uint4S0_j
Verifying $_Z19scanExclusiveSharedP5uint4S0_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.241008
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
Total learner time was 00:00:00.1195270
Verifying $_Z19scanExclusiveSharedP5uint4S0_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Added: my_inv:1,1,1,1,1,1,0,0: positive
Prover Time taken = 1.042452
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
Total learner time was 00:00:00.1228940
Verifying $_Z19scanExclusiveSharedP5uint4S0_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.999004
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
Total learner time was 00:00:00.1206360
Verifying $_Z19scanExclusiveSharedP5uint4S0_j: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.581475
Prover time = 2.86
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 3.31
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.87user 1.17system 0:04.65elapsed 44%CPU (0avgtext+0avgdata 46196maxresident)k
0inputs+136outputs (1major+18736minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/scan/scanExclusiveShared.bpl.ice2.bpl
#################
Tue Apr 27 20:10:09 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z20scanExclusiveShared2PjS_S_jj
Verifying $_Z20scanExclusiveShared2PjS_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.254991
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
Total learner time was 00:00:00.1211830
Verifying $_Z20scanExclusiveShared2PjS_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Added: my_inv:1,1,1,1,1,1,0,0: positive
Prover Time taken = 0.384306
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
Total learner time was 00:00:00.1193930
Verifying $_Z20scanExclusiveShared2PjS_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.437178
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
Total learner time was 00:00:00.1223290
Verifying $_Z20scanExclusiveShared2PjS_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.680715
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
Total learner time was 00:00:00.1186650
Verifying $_Z20scanExclusiveShared2PjS_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.465068
Prover time = 2.22
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 2.80
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.90user 1.27system 0:04.14elapsed 52%CPU (0avgtext+0avgdata 44840maxresident)k
0inputs+176outputs (1major+17754minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/scan/scanExclusiveShared2.bpl.ice2.bpl
#################
Tue Apr 27 20:10:13 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $_Z18shfl_vertical_shflPjii
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.18068
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1188740
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.120249
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1205440
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 1.625876
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1192290
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 1.150492
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1185310
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 1.547486
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1181810
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 3.274592
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1236630
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 27.477473
Added Horn clause: 5 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
Total learner time was 00:00:00.1193550
Verifying $_Z18shfl_vertical_shflPjii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 16.893111
Prover time = 53.27
Number of prover queries = 8
Learner time = 0.84
Number of learner queries = 7
Total time: 54.24
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:5
verified

Boogie program verifier finished with 1 verified, 0 errors
1.24user 1.68system 0:55.60elapsed 5%CPU (0avgtext+0avgdata 48844maxresident)k
0inputs+312outputs (1major+24435minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/shfl_scan/shfl_vertical_shfl.bpl.ice2.bpl
#################
Tue Apr 27 20:11:09 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z3sumPji
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167699
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1191040
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.172285
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1222540
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.211626
Added Horn clause: 2 && 1 => 3
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
Total learner time was 00:00:00.1213410
Verifying $_Z3sumPji: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.102671
Prover time = 0.65
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.11
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.86user 1.22system 0:02.46elapsed 84%CPU (0avgtext+0avgdata 45636maxresident)k
0inputs+144outputs (1major+17758minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/simpleHyperQ/sum.bpl.ice2.bpl
#################
Tue Apr 27 20:11:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z18bitonicMergeSharedPjS_S_S_jjj
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.202313
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1171500
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,0: positive
Prover Time taken = 4.298796
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1185750
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,0,1,0: positive
Prover Time taken = 2.450149
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1179300
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.478899
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1192180
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.467173
Added Horn clause: 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1191040
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 < 441
}
Prover Time taken = 2.011152
Added Horn clause: 3 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1193380
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.713057
Added Horn clause: 3 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
Total learner time was 00:00:00.1180250
Verifying $_Z18bitonicMergeSharedPjS_S_S_jjj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.578774
Prover time = 12.20
Number of prover queries = 8
Learner time = 0.83
Number of learner queries = 7
Total time: 13.13
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.19user 1.63system 0:14.50elapsed 19%CPU (0avgtext+0avgdata 51696maxresident)k
0inputs+288outputs (1major+26783minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/sortingNetworks/bitonicMergeShared.bpl.ice2.bpl
#################
Tue Apr 27 20:11:26 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 64
Generating VC of $_Z17bitonicSortSharedPjS_S_S_jj
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.220265
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1203100
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0014 then 0 else 1) * 25000 + (if b0047 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 10.058797
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1173660
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 16.515596
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1208460
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 10.697452
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1199570
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 12.496132
Added Horn clause: 4 => 5
Added Horn clause: 0 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1202890
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 < 441
}
Prover Time taken = 35.591701
Added Horn clause: 0 && 7 => 8
Added Horn clause: 0 && 6 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1208150
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 < 441
}
Prover Time taken = 35.612945
Added Horn clause: 10 && 6 => 11
Added Horn clause: 12 => 13
Added Horn clause: 14 && 9 => 15
Added Horn clause: 16 && 17 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1194160
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 < 441
}
Prover Time taken = 10.678356
Added Horn clause: 19 && 11 => 20
Added Horn clause: 21 => 22
Added Horn clause: 23 && 24 => 25
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1233940
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 < 441
}
Prover Time taken = 17.535877
Added Horn clause: 26 => 27
Added Horn clause: 28 && 11 => 29
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1200990
Verifying $_Z17bitonicSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 < 441
}
Prover Time taken = 1.204368
Prover time = 150.61
Number of prover queries = 10
Learner time = 1.08
Number of learner queries = 9
Total time: 151.85
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:13
verified

Boogie program verifier finished with 1 verified, 0 errors
2.04user 2.33system 2:33.25elapsed 2%CPU (0avgtext+0avgdata 64252maxresident)k
0inputs+464outputs (1major+43826minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/sortingNetworks/bitonicSortShared.bpl.ice2.bpl
#################
Tue Apr 27 20:13:59 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 64
Generating VC of $_Z18bitonicSortShared1PjS_S_S_
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.24581
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1165370
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0014 then 0 else 1) * 25000 + (if b0047 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 34.275877
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1217880
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0051 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.422341
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1208370
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0049 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 15.069503
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1204300
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0009 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0011 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0059 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0061 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 + (if b0063 then 0 else 1) * 25000 < 441
}
Prover Time taken = 16.219729
Added Horn clause: 4 => 5
Added Horn clause: 0 && 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1210840
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 25000 + (if b0001 then 0 else 1) * 25000 + (if b0002 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0060 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 < 441
}
Prover Time taken = 7.919372
Added Horn clause: 0 && 7 => 8
Added Horn clause: 0 && 6 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1222880
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0005 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0007 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0048 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0057 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 + (if b0062 then 0 else 1) * 25000 < 441
}
Prover Time taken = 43.715019
Added Horn clause: 10 => 11
Added Horn clause: 12 && 6 => 13
Added Horn clause: 14 && 15 => 16
Added Horn clause: 17 && 18 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1186630
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0050 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0053 then 0 else 1) * 25000 + (if b0054 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 < 441
}
Prover Time taken = 13.95773
Added Horn clause: 12 && 13 => 20
Added Horn clause: 21 && 22 => 23
Added Horn clause: 24 => 25
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1180640
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0056 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 < 441
}
Prover Time taken = 23.365816
Added Horn clause: 26 => 27
Added Horn clause: 28 && 6 => 29
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1198350
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0055 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 < 441
}
Prover Time taken = 10.161114
Added Horn clause: 12 && 13 => 30
Added Horn clause: 31 => 32
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
Total learner time was 00:00:00.1222680
Verifying $_Z18bitonicSortShared1PjS_S_S_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 25000 + (if b0003 then 0 else 1) * 25000 + (if b0004 then 0 else 1) * 25000 + (if b0006 then 0 else 1) * 25000 + (if b0008 then 0 else 1) * 25000 + (if b0010 then 0 else 1) * 25000 + (if b0012 then 0 else 1) * 25000 + (if b0013 then 0 else 1) * 25000 + (if b0052 then 0 else 1) * 25000 + (if b0058 then 0 else 1) * 25000 < 441
}
Prover Time taken = 2.091458
Prover time = 176.44
Number of prover queries = 11
Learner time = 1.20
Number of learner queries = 10
Total time: 177.91
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:15
verified

Boogie program verifier finished with 1 verified, 0 errors
2.14user 2.53system 2:59.32elapsed 2%CPU (0avgtext+0avgdata 65720maxresident)k
0inputs+528outputs (1major+45712minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/sortingNetworks/bitonicSortShared1.bpl.ice2.bpl
#################
Tue Apr 27 20:16:58 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 56
Generating VC of $_Z22oddEvenMergeSortSharedPjS_S_S_jj
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.223198
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1187320
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0045 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0051 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 23.110708
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1213770
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0051 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 27.61202
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1185010
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0051 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1: positive
Prover Time taken = 22.677409
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1174350
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0051 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1: positive
Prover Time taken = 15.410594
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1181440
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0051 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Prover Time taken = 11.136316
Added Horn clause: 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1200620
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Prover Time taken = 15.072453
Added Horn clause: 0 && 5 => 6
Added Horn clause: 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1196250
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0055 then 0 else 1) * 22000 < 441
}
Prover Time taken = 24.912517
Added Horn clause: 8 && 9 => 10
Added Horn clause: 0 && 7 => 11
Added Horn clause: 0 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1176880
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 < 441
}
Prover Time taken = 21.628956
Added Horn clause: 0 => 13
Added Horn clause: 14 && 10 => 15
Added Horn clause: 16 && 17 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1194730
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 < 441
}
Prover Time taken = 6.204875
Added Horn clause: 0 && 19 => 20
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1211880
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 < 441
}
Prover Time taken = 13.988258
Added Horn clause: 21 && 17 => 22
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
Total learner time was 00:00:00.1207880
Verifying $_Z22oddEvenMergeSortSharedPjS_S_S_jj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool) : bool
{
  0 + (if b0004 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 < 441
}
Prover Time taken = 1.985295
Prover time = 183.96
Number of prover queries = 12
Learner time = 1.31
Number of learner queries = 11
Total time: 185.46
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:11
verified

Boogie program verifier finished with 1 verified, 0 errors
2.22user 2.55system 3:06.90elapsed 2%CPU (0avgtext+0avgdata 60276maxresident)k
0inputs+544outputs (1major+44620minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/sortingNetworks/oddEvenMergeSortShared.bpl.ice2.bpl
#################
Tue Apr 27 20:20:05 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z4copyPfS_iii
Verifying $_Z4copyPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.180939
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
Total learner time was 00:00:00.1166360
Verifying $_Z4copyPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.194966
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
Total learner time was 00:00:00.1169000
Verifying $_Z4copyPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.657307
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
Total learner time was 00:00:00.1180660
Verifying $_Z4copyPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.530473
Prover time = 1.56
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 2.01
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.79user 1.19system 0:03.32elapsed 59%CPU (0avgtext+0avgdata 43864maxresident)k
0inputs+136outputs (1major+15041minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/copy.bpl.ice2.bpl
#################
Tue Apr 27 20:20:08 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 26
Generating VC of $_Z13copySharedMemPfS_iii
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169471
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1183220
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.113777
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1265620
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.132288
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1194060
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.144437
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1205640
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.130398
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1190530
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.151228
Added Horn clause: 0 && 1 && 2 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
Total learner time was 00:00:00.1230720
Verifying $_Z13copySharedMemPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 + (if b0025 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.099831
Prover time = 0.94
Number of prover queries = 7
Learner time = 0.73
Number of learner queries = 6
Total time: 1.80
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:5
verified

Boogie program verifier finished with 1 verified, 0 errors
1.01user 1.47system 0:03.14elapsed 79%CPU (0avgtext+0avgdata 47616maxresident)k
0inputs+256outputs (1major+21616minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/copySharedMem.bpl.ice2.bpl
#################
Tue Apr 27 20:20:12 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z18transposeCoalescedPfS_iii
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170874
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Total learner time was 00:00:00.1171990
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.199638
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Total learner time was 00:00:00.1192550
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.344867
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Total learner time was 00:00:00.1178540
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.935114
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Total learner time was 00:00:00.1207550
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.748953
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
Total learner time was 00:00:00.1189520
Verifying $_Z18transposeCoalescedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.922238
Prover time = 3.32
Number of prover queries = 6
Learner time = 0.59
Number of learner queries = 5
Total time: 4.08
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.02user 1.34system 0:05.41elapsed 43%CPU (0avgtext+0avgdata 48336maxresident)k
0inputs+224outputs (1major+21709minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeCoalesced.bpl.ice2.bpl
#################
Tue Apr 27 20:20:17 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z22transposeCoarseGrainedPfS_iii
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168316
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1225300
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.312816
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1201590
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.758192
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1185430
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.74384
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1204970
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.603501
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1210410
Verifying $_Z22transposeCoarseGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 2.129214
Prover time = 6.72
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 7.50
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.98user 1.40system 0:08.80elapsed 27%CPU (0avgtext+0avgdata 48644maxresident)k
0inputs+216outputs (1major+21979minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeCoarseGrained.bpl.ice2.bpl
#################
Tue Apr 27 20:20:26 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $_Z17transposeDiagonalPfS_iii
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.166149
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Total learner time was 00:00:00.1172790
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.221677
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Total learner time was 00:00:00.1223040
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.367628
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Total learner time was 00:00:00.1241050
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.548773
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Total learner time was 00:00:00.1198220
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.499407
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
Total learner time was 00:00:00.1176830
Verifying $_Z17transposeDiagonalPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.362698
Prover time = 2.17
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 2.90
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.97user 1.35system 0:04.23elapsed 55%CPU (0avgtext+0avgdata 47352maxresident)k
0inputs+216outputs (1major+20444minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeDiagonal.bpl.ice2.bpl
#################
Tue Apr 27 20:20:30 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z20transposeFineGrainedPfS_iii
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.173775
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1198880
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.336213
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1225900
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.615079
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1188210
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.959827
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1182910
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 2.074467
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
Total learner time was 00:00:00.1207160
Verifying $_Z20transposeFineGrainedPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.480309
Prover time = 6.64
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 7.41
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.99user 1.40system 0:08.75elapsed 27%CPU (0avgtext+0avgdata 48292maxresident)k
0inputs+216outputs (1major+22094minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeFineGrained.bpl.ice2.bpl
#################
Tue Apr 27 20:20:39 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 19
Generating VC of $_Z14transposeNaivePfS_iii
Verifying $_Z14transposeNaivePfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.174233
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
Total learner time was 00:00:00.1169820
Verifying $_Z14transposeNaivePfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.484435
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
Total learner time was 00:00:00.1253710
Verifying $_Z14transposeNaivePfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.483611
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
Total learner time was 00:00:00.1199320
Verifying $_Z14transposeNaivePfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 + (if b0018 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.475503
Prover time = 1.62
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 2.08
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.85user 1.14system 0:03.39elapsed 58%CPU (0avgtext+0avgdata 43968maxresident)k
0inputs+136outputs (1major+15104minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeNaive.bpl.ice2.bpl
#################
Tue Apr 27 20:20:42 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 31
Generating VC of $_Z24transposeNoBankConflictsPfS_iii
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170635
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Total learner time was 00:00:00.1225230
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.345539
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Total learner time was 00:00:00.1236580
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 0.612977
Added Horn clause: 0 && 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Total learner time was 00:00:00.1243480
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.288694
Added Horn clause: 0 && 1 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Total learner time was 00:00:00.1218250
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.527133
Added Horn clause: 0 && 1 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
Total learner time was 00:00:00.1199240
Verifying $_Z24transposeNoBankConflictsPfS_iii: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 < 441
}
Prover Time taken = 1.62704
Prover time = 5.57
Number of prover queries = 6
Learner time = 0.61
Number of learner queries = 5
Total time: 6.37
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.02user 1.37system 0:07.70elapsed 31%CPU (0avgtext+0avgdata 48412maxresident)k
0inputs+224outputs (1major+21729minor)pagefaults 0swaps
FILE:CUDA50/6_Advanced/transpose/transposeNoBankConflicts.bpl.ice2.bpl
#################
Tue Apr 27 20:20:50 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z12computeValueIfEvPjP17curandStateXORWOWj
Verifying $_Z12computeValueIfEvPjP17curandStateXORWOWj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.17952
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
Total learner time was 00:00:00.1159950
Verifying $_Z12computeValueIfEvPjP17curandStateXORWOWj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.110035
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
Total learner time was 00:00:00.1163060
Verifying $_Z12computeValueIfEvPjP17curandStateXORWOWj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.112707
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
Total learner time was 00:00:00.1205240
Verifying $_Z12computeValueIfEvPjP17curandStateXORWOWj: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.05346
Prover time = 0.46
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 0.90
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.82user 1.17system 0:02.23elapsed 89%CPU (0avgtext+0avgdata 45052maxresident)k
0inputs+136outputs (1major+16438minor)pagefaults 0swaps
FILE:CUDA50/7_CUDALibraries/MC_EstimatePiInlineP/computeValue.bpl.ice2.bpl
#################
Tue Apr 27 20:20:52 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z25MaxwellsGPU_SURF_Kernel3DPfS_
Verifying $_Z25MaxwellsGPU_SURF_Kernel3DPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.465825
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1181440
Verifying $_Z25MaxwellsGPU_SURF_Kernel3DPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 40.28053
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186500
Verifying $_Z25MaxwellsGPU_SURF_Kernel3DPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 7.076005
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1236800
Verifying $_Z25MaxwellsGPU_SURF_Kernel3DPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 44.543234
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1210690
Verifying $_Z25MaxwellsGPU_SURF_Kernel3DPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.108955
Prover time = 96.47
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 97.08
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.58user 1.46system 1:38.70elapsed 3%CPU (0avgtext+0avgdata 78544maxresident)k
0inputs+192outputs (1major+38847minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/DG/MaxwellsGPU_SURF_Kernel3D/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:22:31 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 5
Generating VC of $_Z24MaxwellsGPU_VOL_Kernel3DPf
Verifying $_Z24MaxwellsGPU_VOL_Kernel3DPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1: positive
Prover Time taken = 0.892821
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1211420
Verifying $_Z24MaxwellsGPU_VOL_Kernel3DPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 13.569288
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186580
Verifying $_Z24MaxwellsGPU_VOL_Kernel3DPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 24.668477
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196490
Verifying $_Z24MaxwellsGPU_VOL_Kernel3DPf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.597054
Prover time = 39.73
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 40.18
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.01user 1.25system 0:41.61elapsed 5%CPU (0avgtext+0avgdata 58924maxresident)k
0inputs+152outputs (1major+24606minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/DG/MaxwellsGPU_VOL_Kernel3D/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:23:13 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $_Z28Pathcalc_Portfolio_KernelGPUPfS_
Verifying $_Z28Pathcalc_Portfolio_KernelGPUPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169131
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171640
Verifying $_Z28Pathcalc_Portfolio_KernelGPUPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 3.903114
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1170650
Verifying $_Z28Pathcalc_Portfolio_KernelGPUPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.883112
Prover time = 4.96
Number of prover queries = 3
Learner time = 0.23
Number of learner queries = 2
Total time: 5.27
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.80user 1.11system 0:06.63elapsed 28%CPU (0avgtext+0avgdata 51420maxresident)k
0inputs+96outputs (1major+19307minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:23:19 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $_Z29Pathcalc_Portfolio_KernelGPU2Pf
Verifying $_Z29Pathcalc_Portfolio_KernelGPU2Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.166199
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1166070
Verifying $_Z29Pathcalc_Portfolio_KernelGPU2Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.51335
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1181760
Verifying $_Z29Pathcalc_Portfolio_KernelGPU2Pf: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.333734
Prover time = 1.01
Number of prover queries = 3
Learner time = 0.23
Number of learner queries = 2
Total time: 1.33
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.79user 1.06system 0:02.66elapsed 69%CPU (0avgtext+0avgdata 45428maxresident)k
0inputs+96outputs (1major+15671minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/LIB/Pathcalc_Portfolio_KernelGPU2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:23:22 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $_Z13GPU_laplace3diiiiPfS_
Verifying $_Z13GPU_laplace3diiiiPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.567916
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1169140
Verifying $_Z13GPU_laplace3diiiiPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,0,1,0: positive
Prover Time taken = 28.689043
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189980
Verifying $_Z13GPU_laplace3diiiiPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 < 441
}
Prover Time taken = 22.986021
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1195530
Verifying $_Z13GPU_laplace3diiiiPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 < 441
}
Prover Time taken = 13.85433
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196280
Verifying $_Z13GPU_laplace3diiiiPfS_: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 < 441
}
Prover Time taken = 23.524453
Prover time = 89.62
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 90.19
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.06user 1.42system 1:31.56elapsed 2%CPU (0avgtext+0avgdata 53516maxresident)k
0inputs+184outputs (1major+23018minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/LPS/laplace3d_kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:24:53 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/RAY/renderPixel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/RAY/renderPixel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 18
Generating VC of $_Z11renderPixelPjP4Nodejjff
Verifying $_Z11renderPixelPjP4Nodejjff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.051836
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/RAY/renderPixel.bpl.ice2.bpl
Total learner time was 00:00:00.1233320
Verifying $_Z11renderPixelPjP4Nodejjff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 34.335183
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/gpgpu-sim_ispass2009/RAY/renderPixel.bpl.ice2.bpl
Total learner time was 00:00:00.1218230
Verifying $_Z11renderPixelPjP4Nodejjff: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 5.924534
Prover time = 43.31
Number of prover queries = 3
Learner time = 0.25
Number of learner queries = 2
Total time: 43.66
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
1.33user 1.27system 0:45.38elapsed 5%CPU (0avgtext+0avgdata 80824maxresident)k
0inputs+112outputs (1major+34451minor)pagefaults 0swaps
FILE:gpgpu-sim_ispass2009/RAY/renderPixel.bpl.ice2.bpl
#################
Tue Apr 27 20:25:39 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 111
Generating VC of $opencl_cutoff_potential_lattice
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.286959
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1218570
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0041 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0045 then 0 else 1) * 44000 + (if b0046 then 0 else 1) * 44000 + (if b0047 then 0 else 1) * 44000 + (if b0048 then 0 else 1) * 44000 + (if b0049 then 0 else 1) * 44000 + (if b0050 then 0 else 1) * 44000 + (if b0051 then 0 else 1) * 44000 + (if b0052 then 0 else 1) * 44000 + (if b0053 then 0 else 1) * 44000 + (if b0054 then 0 else 1) * 44000 + (if b0055 then 0 else 1) * 44000 + (if b0056 then 0 else 1) * 44000 + (if b0057 then 0 else 1) * 44000 + (if b0058 then 0 else 1) * 44000 + (if b0059 then 0 else 1) * 44000 + (if b0060 then 0 else 1) * 44000 + (if b0061 then 0 else 1) * 44000 + (if b0062 then 0 else 1) * 44000 + (if b0063 then 0 else 1) * 44000 + (if b0064 then 0 else 1) * 44000 + (if b0065 then 0 else 1) * 44000 + (if b0066 then 0 else 1) * 44000 + (if b0067 then 0 else 1) * 44000 + (if b0068 then 0 else 1) * 44000 + (if b0069 then 0 else 1) * 44000 + (if b0070 then 0 else 1) * 44000 + (if b0071 then 0 else 1) * 44000 + (if b0072 then 0 else 1) * 44000 + (if b0073 then 0 else 1) * 44000 + (if b0074 then 0 else 1) * 44000 + (if b0075 then 0 else 1) * 44000 + (if b0076 then 0 else 1) * 44000 + (if b0077 then 0 else 1) * 44000 + (if b0078 then 0 else 1) * 44000 + (if b0079 then 0 else 1) * 44000 + (if b0080 then 0 else 1) * 44000 + (if b0081 then 0 else 1) * 44000 + (if b0082 then 0 else 1) * 44000 + (if b0083 then 0 else 1) * 44000 + (if b0084 then 0 else 1) * 44000 + (if b0085 then 0 else 1) * 44000 + (if b0086 then 0 else 1) * 44000 + (if b0087 then 0 else 1) * 44000 + (if b0088 then 0 else 1) * 44000 + (if b0089 then 0 else 1) * 44000 + (if b0090 then 0 else 1) * 44000 + (if b0091 then 0 else 1) * 44000 + (if b0092 then 0 else 1) * 44000 + (if b0093 then 0 else 1) * 44000 + (if b0094 then 0 else 1) * 44000 + (if b0095 then 0 else 1) * 44000 + (if b0096 then 0 else 1) * 44000 + (if b0097 then 0 else 1) * 44000 + (if b0098 then 0 else 1) * 44000 + (if b0099 then 0 else 1) * 44000 + (if b0100 then 0 else 1) * 44000 + (if b0101 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 12.888401
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1204490
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0041 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0045 then 0 else 1) * 44000 + (if b0047 then 0 else 1) * 44000 + (if b0048 then 0 else 1) * 44000 + (if b0049 then 0 else 1) * 44000 + (if b0052 then 0 else 1) * 44000 + (if b0054 then 0 else 1) * 44000 + (if b0061 then 0 else 1) * 44000 + (if b0062 then 0 else 1) * 44000 + (if b0065 then 0 else 1) * 44000 + (if b0066 then 0 else 1) * 44000 + (if b0067 then 0 else 1) * 44000 + (if b0068 then 0 else 1) * 44000 + (if b0069 then 0 else 1) * 44000 + (if b0070 then 0 else 1) * 44000 + (if b0077 then 0 else 1) * 44000 + (if b0081 then 0 else 1) * 44000 + (if b0089 then 0 else 1) * 44000 + (if b0090 then 0 else 1) * 44000 + (if b0093 then 0 else 1) * 44000 + (if b0094 then 0 else 1) * 44000 + (if b0095 then 0 else 1) * 44000 + (if b0097 then 0 else 1) * 44000 + (if b0098 then 0 else 1) * 44000 + (if b0099 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 12.465275
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1216950
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0048 then 0 else 1) * 44000 + (if b0054 then 0 else 1) * 44000 + (if b0061 then 0 else 1) * 44000 + (if b0065 then 0 else 1) * 44000 + (if b0077 then 0 else 1) * 44000 + (if b0089 then 0 else 1) * 44000 + (if b0090 then 0 else 1) * 44000 + (if b0094 then 0 else 1) * 44000 + (if b0095 then 0 else 1) * 44000 + (if b0098 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 12.090907
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1208450
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0048 then 0 else 1) * 44000 + (if b0054 then 0 else 1) * 44000 + (if b0061 then 0 else 1) * 44000 + (if b0065 then 0 else 1) * 44000 + (if b0089 then 0 else 1) * 44000 + (if b0094 then 0 else 1) * 44000 + (if b0095 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 10.268023
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187190
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0054 then 0 else 1) * 44000 + (if b0094 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 13.757815
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1205850
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0035 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0094 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.845889
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1218150
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0094 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.162578
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1234820
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0037 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.442317
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1217380
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0010 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0012 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0019 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0021 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0027 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0029 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0034 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0044 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Prover Time taken = 8.141652
Added Horn clause: 9 && 10 && 10 && 10 && 10 => 11
Added Horn clause: 12 && 10 && 10 && 10 && 10 && 10 && 10 => 13
Added Horn clause: 14 && 10 && 10 => 15
Added Horn clause: 16 && 10 && 10 && 10 && 10 && 10 && 10 => 17
Added Horn clause: 18 && 10 && 10 && 10 && 10 && 10 && 10 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202610
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0003 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0005 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0032 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Prover Time taken = 3.611468
Added Horn clause: 20 && 10 && 10 && 10 && 10 && 10 && 10 => 21
Added Horn clause: 22 && 10 && 10 && 10 && 13 && 10 && 10 => 23
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1253850
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 44000 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0004 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Prover Time taken = 4.473733
Added Horn clause: 24 && 10 && 10 && 10 && 10 && 10 && 10 => 25
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1221700
Verifying $opencl_cutoff_potential_lattice: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 44000 + (if b0002 then 0 else 1) * 44000 + (if b0006 then 0 else 1) * 44000 + (if b0007 then 0 else 1) * 44000 + (if b0008 then 0 else 1) * 44000 + (if b0009 then 0 else 1) * 44000 + (if b0011 then 0 else 1) * 44000 + (if b0013 then 0 else 1) * 44000 + (if b0014 then 0 else 1) * 44000 + (if b0015 then 0 else 1) * 44000 + (if b0016 then 0 else 1) * 44000 + (if b0017 then 0 else 1) * 44000 + (if b0018 then 0 else 1) * 44000 + (if b0020 then 0 else 1) * 44000 + (if b0022 then 0 else 1) * 44000 + (if b0023 then 0 else 1) * 44000 + (if b0024 then 0 else 1) * 44000 + (if b0025 then 0 else 1) * 44000 + (if b0026 then 0 else 1) * 44000 + (if b0028 then 0 else 1) * 44000 + (if b0030 then 0 else 1) * 44000 + (if b0031 then 0 else 1) * 44000 + (if b0033 then 0 else 1) * 44000 + (if b0039 then 0 else 1) * 44000 + (if b0040 then 0 else 1) * 44000 + (if b0042 then 0 else 1) * 44000 + (if b0043 then 0 else 1) * 44000 + (if b0102 then 0 else 1) * 44000 + (if b0103 then 0 else 1) * 44000 + (if b0104 then 0 else 1) * 44000 + (if b0105 then 0 else 1) * 44000 + (if b0106 then 0 else 1) * 44000 + (if b0107 then 0 else 1) * 44000 + (if b0108 then 0 else 1) * 44000 + (if b0109 then 0 else 1) * 44000 + (if b0110 then 0 else 1) * 44000 < 441
}
Prover Time taken = 2.50177
Prover time = 107.94
Number of prover queries = 13
Learner time = 1.46
Number of learner queries = 12
Total time: 109.96
Number of positive examples:9
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
4.42user 4.11system 1:51.43elapsed 7%CPU (0avgtext+0avgdata 72948maxresident)k
0inputs+672outputs (1major+74064minor)pagefaults 0swaps
FILE:parboil/cutcp/opencl_cutoff_potential_lattice/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:27:30 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $histo_intermediates_kernel
Verifying $histo_intermediates_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.178271
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186410
Verifying $histo_intermediates_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 14.265125
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182520
Verifying $histo_intermediates_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 85.434603
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1228010
Verifying $histo_intermediates_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 < 441
}
Prover Time taken = 148.165341
Prover time = 248.04
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 248.49
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.13user 1.54system 4:09.83elapsed 1%CPU (0avgtext+0avgdata 45596maxresident)k
0inputs+144outputs (1major+17402minor)pagefaults 0swaps
FILE:parboil/histo/histo_intermediates/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:31:40 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 34
Generating VC of $histo_main_kernel
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170071
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196060
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0016 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0022 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 3.762266
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1190750
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 4.870778
Added Horn clause: 0 => 5
Added Horn clause: 0 && 0 && 0 && 0 && 4 => 6
Added Horn clause: 0 && 0 && 3 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1223910
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 4.913067
Added Horn clause: 5 => 8
Added Horn clause: 0 && 0 && 7 => 9
Added Horn clause: 0 && 0 && 0 && 0 && 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_main/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1222160
Verifying $histo_main_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 2.569482
Prover time = 16.29
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 16.88
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:10
verified

Boogie program verifier finished with 1 verified, 0 errors
1.22user 1.42system 0:18.29elapsed 14%CPU (0avgtext+0avgdata 58616maxresident)k
0inputs+184outputs (1major+29826minor)pagefaults 0swaps
FILE:parboil/histo/histo_main/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:31:58 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 23
Generating VC of $histo_prescan_kernel
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.254214
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1169600
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0012 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 10.433356
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202830
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0018 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1: positive
Prover Time taken = 12.958405
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1222980
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0002 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0004 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 1.799544
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193240
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0017 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0021 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 10.440823
Added Horn clause: 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1239600
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0011 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 9.637152
Added Horn clause: 3 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1172380
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0015 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 6.423002
Added Horn clause: 3 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1190320
Verifying $histo_prescan_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 9000 + (if b0001 then 0 else 1) * 9000 + (if b0003 then 0 else 1) * 9000 + (if b0005 then 0 else 1) * 9000 + (if b0006 then 0 else 1) * 9000 + (if b0007 then 0 else 1) * 9000 + (if b0008 then 0 else 1) * 9000 + (if b0009 then 0 else 1) * 9000 + (if b0010 then 0 else 1) * 9000 + (if b0013 then 0 else 1) * 9000 + (if b0014 then 0 else 1) * 9000 + (if b0016 then 0 else 1) * 9000 + (if b0019 then 0 else 1) * 9000 + (if b0020 then 0 else 1) * 9000 + (if b0022 then 0 else 1) * 9000 < 441
}
Prover Time taken = 0.597989
Prover time = 52.54
Number of prover queries = 8
Learner time = 0.84
Number of learner queries = 7
Total time: 53.53
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.58user 1.76system 0:55.06elapsed 6%CPU (0avgtext+0avgdata 69156maxresident)k
0inputs+288outputs (1major+38770minor)pagefaults 0swaps
FILE:parboil/histo/histo_prescan/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:32:53 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 46
Generating VC of $scan_inter1_kernel
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1: positive
Prover Time taken = 0.349899
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196580
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0001 then 0 else 1) * 18000 + (if b0002 then 0 else 1) * 18000 + (if b0003 then 0 else 1) * 18000 + (if b0004 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0025 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 + (if b0041 then 0 else 1) * 18000 + (if b0042 then 0 else 1) * 18000 + (if b0043 then 0 else 1) * 18000 + (if b0044 then 0 else 1) * 18000 + (if b0045 then 0 else 1) * 18000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0: positive
Prover Time taken = 1.772015
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187160
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0001 then 0 else 1) * 18000 + (if b0002 then 0 else 1) * 18000 + (if b0003 then 0 else 1) * 18000 + (if b0004 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0025 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 < 441
}
Prover Time taken = 1.17362
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1252690
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0002 then 0 else 1) * 18000 + (if b0004 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0025 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 < 441
}
Prover Time taken = 1.504079
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186980
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0002 then 0 else 1) * 18000 + (if b0004 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0025 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 < 441
}
Prover Time taken = 1.401158
Added Horn clause: 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182560
Verifying $scan_inter1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0002 then 0 else 1) * 18000 + (if b0004 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0025 then 0 else 1) * 18000 < 441
}
Prover Time taken = 1.39277
Prover time = 7.59
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 8.34
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.03user 1.44system 0:09.69elapsed 25%CPU (0avgtext+0avgdata 46680maxresident)k
0inputs+216outputs (1major+20557minor)pagefaults 0swaps
FILE:parboil/mri-gridding/scan_inter1/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:33:03 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 44
Generating VC of $scan_inter2_kernel
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1: positive
Prover Time taken = 0.336401
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1166370
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1: positive
Prover Time taken = 0.936424
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1205810
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0: positive
Prover Time taken = 0.951893
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189670
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.599372
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1183070
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 < 441
}
Prover Time taken = 2.744678
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1222730
Verifying $scan_inter2_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 < 441
}
Prover Time taken = 3.065366
Prover time = 8.63
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 9.37
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
1.05user 1.45system 0:10.71elapsed 23%CPU (0avgtext+0avgdata 47536maxresident)k
0inputs+200outputs (1major+21398minor)pagefaults 0swaps
FILE:parboil/mri-gridding/scan_inter2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:33:14 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 90
Generating VC of $scan_L1_kernel
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.283195
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1173670
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0024 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0045 then 0 else 1) * 36000 + (if b0046 then 0 else 1) * 36000 + (if b0047 then 0 else 1) * 36000 + (if b0048 then 0 else 1) * 36000 + (if b0049 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 5.870444
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199040
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0001 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0003 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0024 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 2.332837
Added Horn clause: 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1213930
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0011 then 0 else 1) * 36000 + (if b0024 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 4.988599
Added Horn clause: 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193750
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0044 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0054 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0056 then 0 else 1) * 36000 + (if b0057 then 0 else 1) * 36000 + (if b0058 then 0 else 1) * 36000 + (if b0059 then 0 else 1) * 36000 + (if b0060 then 0 else 1) * 36000 + (if b0061 then 0 else 1) * 36000 + (if b0062 then 0 else 1) * 36000 + (if b0063 then 0 else 1) * 36000 + (if b0064 then 0 else 1) * 36000 + (if b0065 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0068 then 0 else 1) * 36000 + (if b0069 then 0 else 1) * 36000 + (if b0070 then 0 else 1) * 36000 + (if b0071 then 0 else 1) * 36000 + (if b0072 then 0 else 1) * 36000 + (if b0073 then 0 else 1) * 36000 + (if b0074 then 0 else 1) * 36000 + (if b0075 then 0 else 1) * 36000 + (if b0076 then 0 else 1) * 36000 + (if b0077 then 0 else 1) * 36000 + (if b0078 then 0 else 1) * 36000 + (if b0079 then 0 else 1) * 36000 + (if b0080 then 0 else 1) * 36000 + (if b0081 then 0 else 1) * 36000 + (if b0082 then 0 else 1) * 36000 + (if b0083 then 0 else 1) * 36000 + (if b0084 then 0 else 1) * 36000 + (if b0085 then 0 else 1) * 36000 + (if b0086 then 0 else 1) * 36000 + (if b0087 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 8.550211
Added Horn clause: 3 => 4
Added Horn clause: 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1178790
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0004 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0006 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0055 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 6.467543
Added Horn clause: 3 => 6
Added Horn clause: 3 && 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1201930
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 + (if b0088 then 0 else 1) * 36000 + (if b0089 then 0 else 1) * 36000 < 441
}
Prover Time taken = 16.577345
Added Horn clause: 9 => 10
Added Horn clause: 3 && 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1181690
Verifying $scan_L1_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 36000 + (if b0002 then 0 else 1) * 36000 + (if b0005 then 0 else 1) * 36000 + (if b0007 then 0 else 1) * 36000 + (if b0008 then 0 else 1) * 36000 + (if b0009 then 0 else 1) * 36000 + (if b0010 then 0 else 1) * 36000 + (if b0025 then 0 else 1) * 36000 + (if b0050 then 0 else 1) * 36000 + (if b0051 then 0 else 1) * 36000 + (if b0052 then 0 else 1) * 36000 + (if b0053 then 0 else 1) * 36000 + (if b0066 then 0 else 1) * 36000 + (if b0067 then 0 else 1) * 36000 < 441
}
Prover Time taken = 9.282709
Prover time = 54.35
Number of prover queries = 8
Learner time = 0.83
Number of learner queries = 7
Total time: 55.40
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.43user 1.86system 0:56.80elapsed 5%CPU (0avgtext+0avgdata 58540maxresident)k
0inputs+352outputs (1major+32403minor)pagefaults 0swaps
FILE:parboil/mri-gridding/scan_L1/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:34:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 18
Generating VC of $ComputeQ_GPU
Verifying $ComputeQ_GPU: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170174
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1208230
Verifying $ComputeQ_GPU: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.096994
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1170300
Verifying $ComputeQ_GPU: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.402645
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182380
Verifying $ComputeQ_GPU: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.38679
Prover time = 1.06
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.50
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.86user 1.14system 0:02.82elapsed 70%CPU (0avgtext+0avgdata 45092maxresident)k
0inputs+144outputs (1major+17054minor)pagefaults 0swaps
FILE:parboil/mri-q/ComputeQ/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:34:13 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/sad/larger_sad_calc_16/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/sad/larger_sad_calc_16/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 7
Generating VC of $larger_sad_calc_16
Verifying $larger_sad_calc_16: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1: positive
Prover Time taken = 0.171445
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/sad/larger_sad_calc_16/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1161100
Verifying $larger_sad_calc_16: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 75.498527
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/sad/larger_sad_calc_16/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196450
Verifying $larger_sad_calc_16: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 206.541918
Prover time = 282.21
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 282.54
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
1.10user 1.45system 4:43.88elapsed 0%CPU (0avgtext+0avgdata 47048maxresident)k
0inputs+104outputs (1major+17579minor)pagefaults 0swaps
FILE:parboil/sad/larger_sad_calc_16/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:38:57 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 89
Generating VC of $gen_hists
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170402
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1217160
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 0.890389
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177040
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.013449
Added Horn clause: 1 && 0 => 2
Added Horn clause: 1 && 0 && 0 && 0 => 3
Added Horn clause: 1 && 0 && 0 => 4
Added Horn clause: 1 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1187170
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.037007
Added Horn clause: 1 && 4 => 6
Added Horn clause: 1 && 4 && 0 && 3 => 7
Added Horn clause: 1 && 4 && 0 => 8
Added Horn clause: 1 && 4 && 0 && 0 => 9
Added Horn clause: 1 && 4 && 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229910
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.874398
Added Horn clause: 1 && 4 => 12
Added Horn clause: 1 && 4 && 7 && 3 => 13
Added Horn clause: 1 && 4 && 7 && 0 => 14
Added Horn clause: 1 && 8 && 15 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1323030
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.198921
Added Horn clause: 1 && 4 => 17
Added Horn clause: 1 && 8 && 0 && 18 => 19
Added Horn clause: 1 && 8 && 20 => 21
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1233800
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.853709
Added Horn clause: 1 && 8 => 22
Added Horn clause: 1 && 4 && 23 => 24
Added Horn clause: 1 && 4 && 7 && 25 => 26
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1194750
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.916671
Added Horn clause: 1 && 4 => 27
Added Horn clause: 1 && 8 && 7 && 28 => 29
Added Horn clause: 1 && 4 && 30 => 31
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197600
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.814234
Added Horn clause: 1 && 8 && 7 && 32 => 33
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196290
Verifying $gen_hists: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 + (if b0088 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.183334
Prover time = 15.95
Number of prover queries = 10
Learner time = 1.10
Number of learner queries = 9
Total time: 17.34
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:24
verified

Boogie program verifier finished with 1 verified, 0 errors
2.13user 2.16system 0:18.76elapsed 22%CPU (0avgtext+0avgdata 67892maxresident)k
0inputs+480outputs (1major+50091minor)pagefaults 0swaps
FILE:parboil/tpacf/gen_hists/kernel.bpl.ice2.bpl
#################
Tue Apr 27 20:39:16 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 55
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.177645
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1220940
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0011 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0013 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0019 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0021 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0026 then 0 else 1) * 22000 + (if b0027 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0029 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0035 then 0 else 1) * 22000 + (if b0036 then 0 else 1) * 22000 + (if b0037 then 0 else 1) * 22000 + (if b0038 then 0 else 1) * 22000 + (if b0039 then 0 else 1) * 22000 + (if b0040 then 0 else 1) * 22000 + (if b0041 then 0 else 1) * 22000 + (if b0042 then 0 else 1) * 22000 + (if b0043 then 0 else 1) * 22000 + (if b0044 then 0 else 1) * 22000 + (if b0045 then 0 else 1) * 22000 + (if b0046 then 0 else 1) * 22000 + (if b0047 then 0 else 1) * 22000 + (if b0048 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0050 then 0 else 1) * 22000 + (if b0051 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1: positive
Prover Time taken = 1.242626
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1217890
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0011 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0013 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0019 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0021 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0026 then 0 else 1) * 22000 + (if b0027 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0029 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0037 then 0 else 1) * 22000 + (if b0038 then 0 else 1) * 22000 + (if b0042 then 0 else 1) * 22000 + (if b0049 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1: positive
Prover Time taken = 1.100185
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1199000
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0011 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0013 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0019 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0021 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0026 then 0 else 1) * 22000 + (if b0027 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0029 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0038 then 0 else 1) * 22000 + (if b0042 then 0 else 1) * 22000 + (if b0052 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1: positive
Prover Time taken = 0.891499
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1178330
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0011 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0013 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0019 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0021 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0026 then 0 else 1) * 22000 + (if b0027 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0029 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0042 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.114537
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1172800
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0004 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0006 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0010 then 0 else 1) * 22000 + (if b0011 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0013 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0019 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0021 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0026 then 0 else 1) * 22000 + (if b0027 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0029 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Prover Time taken = 1.127588
Added Horn clause: 0 => 5
Added Horn clause: 0 && 0 => 6
Added Horn clause: 0 && 0 && 0 && 0 => 7
Added Horn clause: 8 && 0 && 0 => 9
Added Horn clause: 8 && 0 && 0 && 0 => 10
Added Horn clause: 8 && 0 && 0 && 0 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1191680
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0053 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Prover Time taken = 0.829817
Added Horn clause: 12 && 0 && 0 && 0 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1196420
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 22000 + (if b0001 then 0 else 1) * 22000 + (if b0002 then 0 else 1) * 22000 + (if b0003 then 0 else 1) * 22000 + (if b0005 then 0 else 1) * 22000 + (if b0007 then 0 else 1) * 22000 + (if b0008 then 0 else 1) * 22000 + (if b0009 then 0 else 1) * 22000 + (if b0012 then 0 else 1) * 22000 + (if b0014 then 0 else 1) * 22000 + (if b0015 then 0 else 1) * 22000 + (if b0016 then 0 else 1) * 22000 + (if b0017 then 0 else 1) * 22000 + (if b0018 then 0 else 1) * 22000 + (if b0020 then 0 else 1) * 22000 + (if b0022 then 0 else 1) * 22000 + (if b0023 then 0 else 1) * 22000 + (if b0024 then 0 else 1) * 22000 + (if b0025 then 0 else 1) * 22000 + (if b0028 then 0 else 1) * 22000 + (if b0030 then 0 else 1) * 22000 + (if b0031 then 0 else 1) * 22000 + (if b0032 then 0 else 1) * 22000 + (if b0033 then 0 else 1) * 22000 + (if b0034 then 0 else 1) * 22000 + (if b0054 then 0 else 1) * 22000 < 441
}
Prover Time taken = 1.48367
Prover time = 7.97
Number of prover queries = 8
Learner time = 0.84
Number of learner queries = 7
Total time: 9.00
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:7
verified

Boogie program verifier finished with 1 verified, 0 errors
1.73user 1.96system 0:10.34elapsed 35%CPU (0avgtext+0avgdata 58212maxresident)k
0inputs+328outputs (1major+34934minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 20:39:26 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168033
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1174710
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.16786
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1189300
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.395175
Prover time = 0.73
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 1.05
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.04system 0:02.36elapsed 77%CPU (0avgtext+0avgdata 43488maxresident)k
0inputs+96outputs (1major+13883minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 20:39:29 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 180
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.192819
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1171490
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0067 then 0 else 1) * 72000 + (if b0068 then 0 else 1) * 72000 + (if b0069 then 0 else 1) * 72000 + (if b0070 then 0 else 1) * 72000 + (if b0071 then 0 else 1) * 72000 + (if b0072 then 0 else 1) * 72000 + (if b0073 then 0 else 1) * 72000 + (if b0074 then 0 else 1) * 72000 + (if b0075 then 0 else 1) * 72000 + (if b0076 then 0 else 1) * 72000 + (if b0077 then 0 else 1) * 72000 + (if b0078 then 0 else 1) * 72000 + (if b0079 then 0 else 1) * 72000 + (if b0080 then 0 else 1) * 72000 + (if b0081 then 0 else 1) * 72000 + (if b0082 then 0 else 1) * 72000 + (if b0083 then 0 else 1) * 72000 + (if b0084 then 0 else 1) * 72000 + (if b0085 then 0 else 1) * 72000 + (if b0086 then 0 else 1) * 72000 + (if b0087 then 0 else 1) * 72000 + (if b0088 then 0 else 1) * 72000 + (if b0089 then 0 else 1) * 72000 + (if b0090 then 0 else 1) * 72000 + (if b0091 then 0 else 1) * 72000 + (if b0092 then 0 else 1) * 72000 + (if b0093 then 0 else 1) * 72000 + (if b0094 then 0 else 1) * 72000 + (if b0095 then 0 else 1) * 72000 + (if b0096 then 0 else 1) * 72000 + (if b0097 then 0 else 1) * 72000 + (if b0098 then 0 else 1) * 72000 + (if b0099 then 0 else 1) * 72000 + (if b0100 then 0 else 1) * 72000 + (if b0101 then 0 else 1) * 72000 + (if b0102 then 0 else 1) * 72000 + (if b0103 then 0 else 1) * 72000 + (if b0104 then 0 else 1) * 72000 + (if b0105 then 0 else 1) * 72000 + (if b0106 then 0 else 1) * 72000 + (if b0107 then 0 else 1) * 72000 + (if b0108 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.579544
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1207090
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0067 then 0 else 1) * 72000 + (if b0068 then 0 else 1) * 72000 + (if b0069 then 0 else 1) * 72000 + (if b0076 then 0 else 1) * 72000 + (if b0078 then 0 else 1) * 72000 + (if b0081 then 0 else 1) * 72000 + (if b0082 then 0 else 1) * 72000 + (if b0083 then 0 else 1) * 72000 + (if b0084 then 0 else 1) * 72000 + (if b0097 then 0 else 1) * 72000 + (if b0102 then 0 else 1) * 72000 + (if b0103 then 0 else 1) * 72000 + (if b0105 then 0 else 1) * 72000 + (if b0107 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.577814
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1191990
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0069 then 0 else 1) * 72000 + (if b0076 then 0 else 1) * 72000 + (if b0082 then 0 else 1) * 72000 + (if b0083 then 0 else 1) * 72000 + (if b0097 then 0 else 1) * 72000 + (if b0103 then 0 else 1) * 72000 + (if b0105 then 0 else 1) * 72000 + (if b0107 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 11.822983
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1213500
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0076 then 0 else 1) * 72000 + (if b0083 then 0 else 1) * 72000 + (if b0103 then 0 else 1) * 72000 + (if b0105 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 10.159799
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1231990
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0076 then 0 else 1) * 72000 + (if b0083 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.432048
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1212630
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0083 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.221736
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1247980
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0004 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0006 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0013 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0015 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0024 then 0 else 1) * 72000 + (if b0025 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0027 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0038 then 0 else 1) * 72000 + (if b0039 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0041 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0052 then 0 else 1) * 72000 + (if b0053 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0055 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0128 then 0 else 1) * 72000 + (if b0129 then 0 else 1) * 72000 + (if b0130 then 0 else 1) * 72000 + (if b0131 then 0 else 1) * 72000 + (if b0132 then 0 else 1) * 72000 + (if b0133 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0136 then 0 else 1) * 72000 + (if b0137 then 0 else 1) * 72000 + (if b0138 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0141 then 0 else 1) * 72000 + (if b0142 then 0 else 1) * 72000 + (if b0143 then 0 else 1) * 72000 + (if b0144 then 0 else 1) * 72000 + (if b0145 then 0 else 1) * 72000 + (if b0146 then 0 else 1) * 72000 + (if b0147 then 0 else 1) * 72000 + (if b0148 then 0 else 1) * 72000 + (if b0149 then 0 else 1) * 72000 + (if b0150 then 0 else 1) * 72000 + (if b0151 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0153 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0155 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 8.666755
Added Horn clause: 7 => 8
Added Horn clause: 9 && 0 && 0 => 10
Added Horn clause: 11 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 13 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 15 && 0 && 0 && 0 && 0 => 16
Added Horn clause: 17 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Added Horn clause: 17 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 19
Added Horn clause: 17 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 20
Added Horn clause: 17 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 21
Added Horn clause: 22 && 0 && 0 && 0 && 0 && 0 && 0 => 23
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1223100
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0114 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0118 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0135 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0156 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 9.589759
Added Horn clause: 24 => 25
Added Horn clause: 26 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 27
Added Horn clause: 28 && 29 && 0 && 0 && 0 && 0 && 23 && 0 && 19 => 30
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1217630
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0060 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0117 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0134 then 0 else 1) * 72000 + (if b0139 then 0 else 1) * 72000 + (if b0140 then 0 else 1) * 72000 + (if b0152 then 0 else 1) * 72000 + (if b0154 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 7.395126
Added Horn clause: 31 => 32
Added Horn clause: 33 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 34
Added Horn clause: 33 && 35 && 0 => 36
Added Horn clause: 37 && 38 && 21 && 0 && 0 && 0 && 0 && 0 && 0 => 39
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1226360
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0113 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0157 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 5.479051
Added Horn clause: 40 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 41
Added Horn clause: 42 && 43 && 0 && 0 && 12 && 0 && 23 && 0 && 0 => 44
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1194700
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0035 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0109 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0162 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 7.541902
Added Horn clause: 45 && 46 && 0 && 0 && 36 && 0 && 0 => 47
Added Horn clause: 48 && 49 && 0 && 0 && 0 && 0 && 0 && 0 && 19 => 50
Added Horn clause: 45 && 51 && 21 && 0 && 36 && 0 && 0 && 0 && 0 => 52
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1220870
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0020 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0046 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0110 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 7.883901
Added Horn clause: 53 && 54 && 0 && 0 && 36 => 55
Added Horn clause: 56 => 57
Added Horn clause: 58 && 59 && 0 && 0 && 0 && 0 && 0 && 0 && 47 => 60
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1245870
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0021 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0032 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0059 then 0 else 1) * 72000 + (if b0061 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 8.152264
Added Horn clause: 61 && 62 && 21 && 0 && 0 && 0 && 55 => 63
Added Horn clause: 64 => 65
Added Horn clause: 66 && 35 && 57 => 67
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1239270
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0034 then 0 else 1) * 72000 + (if b0036 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 6.887202
Added Horn clause: 68 && 59 && 69 && 0 && 0 && 0 && 0 => 70
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1231140
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 72000 + (if b0001 then 0 else 1) * 72000 + (if b0002 then 0 else 1) * 72000 + (if b0003 then 0 else 1) * 72000 + (if b0005 then 0 else 1) * 72000 + (if b0007 then 0 else 1) * 72000 + (if b0008 then 0 else 1) * 72000 + (if b0009 then 0 else 1) * 72000 + (if b0010 then 0 else 1) * 72000 + (if b0011 then 0 else 1) * 72000 + (if b0012 then 0 else 1) * 72000 + (if b0014 then 0 else 1) * 72000 + (if b0016 then 0 else 1) * 72000 + (if b0017 then 0 else 1) * 72000 + (if b0018 then 0 else 1) * 72000 + (if b0019 then 0 else 1) * 72000 + (if b0022 then 0 else 1) * 72000 + (if b0023 then 0 else 1) * 72000 + (if b0026 then 0 else 1) * 72000 + (if b0028 then 0 else 1) * 72000 + (if b0029 then 0 else 1) * 72000 + (if b0030 then 0 else 1) * 72000 + (if b0031 then 0 else 1) * 72000 + (if b0033 then 0 else 1) * 72000 + (if b0037 then 0 else 1) * 72000 + (if b0040 then 0 else 1) * 72000 + (if b0042 then 0 else 1) * 72000 + (if b0043 then 0 else 1) * 72000 + (if b0044 then 0 else 1) * 72000 + (if b0045 then 0 else 1) * 72000 + (if b0047 then 0 else 1) * 72000 + (if b0048 then 0 else 1) * 72000 + (if b0049 then 0 else 1) * 72000 + (if b0050 then 0 else 1) * 72000 + (if b0051 then 0 else 1) * 72000 + (if b0054 then 0 else 1) * 72000 + (if b0056 then 0 else 1) * 72000 + (if b0057 then 0 else 1) * 72000 + (if b0058 then 0 else 1) * 72000 + (if b0062 then 0 else 1) * 72000 + (if b0063 then 0 else 1) * 72000 + (if b0064 then 0 else 1) * 72000 + (if b0065 then 0 else 1) * 72000 + (if b0066 then 0 else 1) * 72000 + (if b0111 then 0 else 1) * 72000 + (if b0112 then 0 else 1) * 72000 + (if b0115 then 0 else 1) * 72000 + (if b0116 then 0 else 1) * 72000 + (if b0119 then 0 else 1) * 72000 + (if b0120 then 0 else 1) * 72000 + (if b0121 then 0 else 1) * 72000 + (if b0122 then 0 else 1) * 72000 + (if b0123 then 0 else 1) * 72000 + (if b0124 then 0 else 1) * 72000 + (if b0125 then 0 else 1) * 72000 + (if b0126 then 0 else 1) * 72000 + (if b0127 then 0 else 1) * 72000 + (if b0158 then 0 else 1) * 72000 + (if b0159 then 0 else 1) * 72000 + (if b0160 then 0 else 1) * 72000 + (if b0161 then 0 else 1) * 72000 + (if b0163 then 0 else 1) * 72000 + (if b0164 then 0 else 1) * 72000 + (if b0165 then 0 else 1) * 72000 + (if b0166 then 0 else 1) * 72000 + (if b0167 then 0 else 1) * 72000 + (if b0168 then 0 else 1) * 72000 + (if b0169 then 0 else 1) * 72000 + (if b0170 then 0 else 1) * 72000 + (if b0171 then 0 else 1) * 72000 + (if b0172 then 0 else 1) * 72000 + (if b0173 then 0 else 1) * 72000 + (if b0174 then 0 else 1) * 72000 + (if b0175 then 0 else 1) * 72000 + (if b0176 then 0 else 1) * 72000 + (if b0177 then 0 else 1) * 72000 + (if b0178 then 0 else 1) * 72000 + (if b0179 then 0 else 1) * 72000 < 441
}
Prover Time taken = 5.706544
Prover time = 122.29
Number of prover queries = 16
Learner time = 1.83
Number of learner queries = 15
Total time: 125.14
Number of positive examples:7
Number of negative examples:0
Number of Horn clauses:29
verified

Boogie program verifier finished with 1 verified, 0 errors
7.76user 5.71system 2:06.73elapsed 10%CPU (0avgtext+0avgdata 85328maxresident)k
0inputs+1208outputs (1major+130094minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel2.bpl.ice2.bpl
#################
Tue Apr 27 20:41:36 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel3.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel3.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $kernel3
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169381
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1187270
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.181769
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1196840
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.30545
Prover time = 0.66
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.98
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.05system 0:02.29elapsed 80%CPU (0avgtext+0avgdata 43424maxresident)k
0inputs+112outputs (1major+14773minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel3.bpl.ice2.bpl
#################
Tue Apr 27 20:41:38 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel4.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel4.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $kernel4
Verifying $kernel4: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169177
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel4.bpl.ice2.bpl
Total learner time was 00:00:00.1184980
Verifying $kernel4: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.184951
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel4.bpl.ice2.bpl
Total learner time was 00:00:00.1184640
Verifying $kernel4: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.234286
Prover time = 0.59
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.90
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.11system 0:02.24elapsed 82%CPU (0avgtext+0avgdata 43892maxresident)k
0inputs+96outputs (1major+14396minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel4.bpl.ice2.bpl
#################
Tue Apr 27 20:41:40 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 119
Generating VC of $kernel5
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.181818
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1171530
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0059 then 0 else 1) * 47000 + (if b0060 then 0 else 1) * 47000 + (if b0061 then 0 else 1) * 47000 + (if b0062 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0064 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0066 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0069 then 0 else 1) * 47000 + (if b0070 then 0 else 1) * 47000 + (if b0071 then 0 else 1) * 47000 + (if b0072 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.270177
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1195560
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0066 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.761382
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1193460
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.770549
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1187720
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.368244
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1180030
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.485768
Added Horn clause: 5 => 6
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 8
Added Horn clause: 7 && 0 && 0 => 9
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 10
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1231140
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.442161
Added Horn clause: 15 && 16 && 0 && 0 && 0 && 0 && 12 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1209890
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.488593
Added Horn clause: 18 && 19 && 14 && 0 && 0 => 20
Added Horn clause: 7 && 21 && 0 && 0 && 0 && 0 && 0 => 22
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1199840
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.435901
Added Horn clause: 23 && 24 && 0 && 0 && 0 => 25
Added Horn clause: 15 && 26 && 0 && 0 && 0 && 0 && 20 => 27
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1196790
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.605714
Added Horn clause: 28 => 29
Added Horn clause: 7 && 30 && 0 && 0 && 0 && 0 && 31 => 32
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1234870
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.003411
Added Horn clause: 33 => 34
Added Horn clause: 28 && 26 && 29 && 0 && 0 => 35
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1198550
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.973358
Added Horn clause: 33 && 30 && 34 && 0 && 0 => 36
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1187610
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.871477
Prover time = 44.66
Number of prover queries = 13
Learner time = 1.44
Number of learner queries = 12
Total time: 46.72
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:18
verified

Boogie program verifier finished with 1 verified, 0 errors
3.65user 3.23system 0:48.16elapsed 14%CPU (0avgtext+0avgdata 69212maxresident)k
0inputs+736outputs (1major+70542minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel5.bpl.ice2.bpl
#################
Tue Apr 27 20:42:28 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 217
Generating VC of $kernel6
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.19109
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1193620
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0065 then 0 else 1) * 86000 + (if b0066 then 0 else 1) * 86000 + (if b0067 then 0 else 1) * 86000 + (if b0068 then 0 else 1) * 86000 + (if b0069 then 0 else 1) * 86000 + (if b0070 then 0 else 1) * 86000 + (if b0071 then 0 else 1) * 86000 + (if b0072 then 0 else 1) * 86000 + (if b0073 then 0 else 1) * 86000 + (if b0074 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0076 then 0 else 1) * 86000 + (if b0077 then 0 else 1) * 86000 + (if b0078 then 0 else 1) * 86000 + (if b0079 then 0 else 1) * 86000 + (if b0080 then 0 else 1) * 86000 + (if b0081 then 0 else 1) * 86000 + (if b0082 then 0 else 1) * 86000 + (if b0083 then 0 else 1) * 86000 + (if b0084 then 0 else 1) * 86000 + (if b0085 then 0 else 1) * 86000 + (if b0086 then 0 else 1) * 86000 + (if b0087 then 0 else 1) * 86000 + (if b0088 then 0 else 1) * 86000 + (if b0089 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0091 then 0 else 1) * 86000 + (if b0092 then 0 else 1) * 86000 + (if b0093 then 0 else 1) * 86000 + (if b0094 then 0 else 1) * 86000 + (if b0095 then 0 else 1) * 86000 + (if b0096 then 0 else 1) * 86000 + (if b0097 then 0 else 1) * 86000 + (if b0098 then 0 else 1) * 86000 + (if b0099 then 0 else 1) * 86000 + (if b0100 then 0 else 1) * 86000 + (if b0101 then 0 else 1) * 86000 + (if b0102 then 0 else 1) * 86000 + (if b0103 then 0 else 1) * 86000 + (if b0104 then 0 else 1) * 86000 + (if b0105 then 0 else 1) * 86000 + (if b0106 then 0 else 1) * 86000 + (if b0107 then 0 else 1) * 86000 + (if b0108 then 0 else 1) * 86000 + (if b0109 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.992232
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1210400
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0065 then 0 else 1) * 86000 + (if b0066 then 0 else 1) * 86000 + (if b0071 then 0 else 1) * 86000 + (if b0072 then 0 else 1) * 86000 + (if b0074 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0076 then 0 else 1) * 86000 + (if b0077 then 0 else 1) * 86000 + (if b0082 then 0 else 1) * 86000 + (if b0083 then 0 else 1) * 86000 + (if b0086 then 0 else 1) * 86000 + (if b0088 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0091 then 0 else 1) * 86000 + (if b0092 then 0 else 1) * 86000 + (if b0094 then 0 else 1) * 86000 + (if b0095 then 0 else 1) * 86000 + (if b0096 then 0 else 1) * 86000 + (if b0097 then 0 else 1) * 86000 + (if b0098 then 0 else 1) * 86000 + (if b0101 then 0 else 1) * 86000 + (if b0103 then 0 else 1) * 86000 + (if b0104 then 0 else 1) * 86000 + (if b0105 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 12.641389
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1210080
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0065 then 0 else 1) * 86000 + (if b0071 then 0 else 1) * 86000 + (if b0083 then 0 else 1) * 86000 + (if b0091 then 0 else 1) * 86000 + (if b0103 then 0 else 1) * 86000 + (if b0104 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 10.198499
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1219940
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0083 then 0 else 1) * 86000 + (if b0103 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 11.344295
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1204640
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Prover Time taken = 11.871708
Added Horn clause: 5 => 6
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 8
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 10
Added Horn clause: 9 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 16 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 17
Added Horn clause: 16 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Added Horn clause: 16 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1226850
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Prover Time taken = 13.712036
Added Horn clause: 20 && 21 && 0 => 22
Added Horn clause: 20 && 23 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 24
Added Horn clause: 7 && 25 && 0 && 26 && 0 && 0 && 0 && 0 && 17 => 27
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1210940
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Prover Time taken = 18.208527
Added Horn clause: 20 && 28 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 29
Added Horn clause: 7 && 30 && 0 => 31
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1246990
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Prover Time taken = 24.299927
Added Horn clause: 32 => 33
Added Horn clause: 20 && 34 && 0 => 35
Added Horn clause: 20 && 36 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 37
Added Horn clause: 7 && 38 && 0 && 31 && 19 && 0 && 0 && 0 && 0 => 39
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1225730
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Prover Time taken = 16.267036
Added Horn clause: 7 && 37 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 40
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1219130
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 + (if b0216 then 0 else 1) * 86000 < 441
}
Prover Time taken = 18.715891
Prover time = 147.44
Number of prover queries = 11
Learner time = 1.22
Number of learner queries = 10
Total time: 149.56
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:20
verified

Boogie program verifier finished with 1 verified, 0 errors
6.04user 4.47system 2:31.19elapsed 6%CPU (0avgtext+0avgdata 80428maxresident)k
0inputs+848outputs (1major+94253minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel6.bpl.ice2.bpl
#################
Tue Apr 27 20:44:59 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 128
Generating VC of $kernel7
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.181757
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1177560
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0053 then 0 else 1) * 51000 + (if b0054 then 0 else 1) * 51000 + (if b0055 then 0 else 1) * 51000 + (if b0056 then 0 else 1) * 51000 + (if b0057 then 0 else 1) * 51000 + (if b0058 then 0 else 1) * 51000 + (if b0059 then 0 else 1) * 51000 + (if b0060 then 0 else 1) * 51000 + (if b0061 then 0 else 1) * 51000 + (if b0062 then 0 else 1) * 51000 + (if b0063 then 0 else 1) * 51000 + (if b0064 then 0 else 1) * 51000 + (if b0065 then 0 else 1) * 51000 + (if b0066 then 0 else 1) * 51000 + (if b0067 then 0 else 1) * 51000 + (if b0068 then 0 else 1) * 51000 + (if b0069 then 0 else 1) * 51000 + (if b0070 then 0 else 1) * 51000 + (if b0071 then 0 else 1) * 51000 + (if b0072 then 0 else 1) * 51000 + (if b0073 then 0 else 1) * 51000 + (if b0074 then 0 else 1) * 51000 + (if b0075 then 0 else 1) * 51000 + (if b0076 then 0 else 1) * 51000 + (if b0077 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 14.554752
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1231820
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0055 then 0 else 1) * 51000 + (if b0056 then 0 else 1) * 51000 + (if b0057 then 0 else 1) * 51000 + (if b0058 then 0 else 1) * 51000 + (if b0060 then 0 else 1) * 51000 + (if b0061 then 0 else 1) * 51000 + (if b0065 then 0 else 1) * 51000 + (if b0066 then 0 else 1) * 51000 + (if b0067 then 0 else 1) * 51000 + (if b0072 then 0 else 1) * 51000 + (if b0073 then 0 else 1) * 51000 + (if b0074 then 0 else 1) * 51000 + (if b0075 then 0 else 1) * 51000 + (if b0077 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 15.186727
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1175570
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0058 then 0 else 1) * 51000 + (if b0061 then 0 else 1) * 51000 + (if b0065 then 0 else 1) * 51000 + (if b0066 then 0 else 1) * 51000 + (if b0073 then 0 else 1) * 51000 + (if b0074 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 19.074121
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1200070
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0058 then 0 else 1) * 51000 + (if b0066 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 22.902551
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1192450
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0058 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 19.199879
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1213390
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0004 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0006 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0013 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0015 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0025 then 0 else 1) * 51000 + (if b0026 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0028 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0038 then 0 else 1) * 51000 + (if b0039 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0041 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0087 then 0 else 1) * 51000 + (if b0088 then 0 else 1) * 51000 + (if b0089 then 0 else 1) * 51000 + (if b0090 then 0 else 1) * 51000 + (if b0091 then 0 else 1) * 51000 + (if b0092 then 0 else 1) * 51000 + (if b0093 then 0 else 1) * 51000 + (if b0094 then 0 else 1) * 51000 + (if b0095 then 0 else 1) * 51000 + (if b0096 then 0 else 1) * 51000 + (if b0097 then 0 else 1) * 51000 + (if b0098 then 0 else 1) * 51000 + (if b0099 then 0 else 1) * 51000 + (if b0100 then 0 else 1) * 51000 + (if b0101 then 0 else 1) * 51000 + (if b0102 then 0 else 1) * 51000 + (if b0103 then 0 else 1) * 51000 + (if b0104 then 0 else 1) * 51000 + (if b0105 then 0 else 1) * 51000 + (if b0106 then 0 else 1) * 51000 + (if b0107 then 0 else 1) * 51000 + (if b0108 then 0 else 1) * 51000 + (if b0109 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 18.453454
Added Horn clause: 6 => 7
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 10 && 0 && 0 => 11
Added Horn clause: 10 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 10 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 10 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 10 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 10 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1222480
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0114 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 72.078646
Added Horn clause: 17 && 18 && 0 && 0 && 0 && 0 && 0 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1209920
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0046 then 0 else 1) * 51000 + (if b0047 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0085 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 88.70146
Added Horn clause: 20 && 21 && 0 && 0 && 0 => 22
Added Horn clause: 23 && 24 && 0 && 0 && 0 && 0 && 15 => 25
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1208260
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0011 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0080 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0111 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 83.392734
Added Horn clause: 0 && 21 && 0 && 0 && 0 && 0 && 22 => 26
Added Horn clause: 8 && 25 && 0 && 0 && 0 && 0 && 0 => 27
Added Horn clause: 8 && 25 && 0 && 0 && 0 && 0 && 0 => 28
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1206040
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0019 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0049 then 0 else 1) * 51000 + (if b0050 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0110 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 98.449926
Added Horn clause: 29 => 30
Added Horn clause: 8 && 31 && 0 && 0 && 0 => 32
Added Horn clause: 23 && 25 && 33 && 0 && 0 && 0 && 0 => 34
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1224700
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0033 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0045 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0079 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 96.932197
Added Horn clause: 29 && 21 && 30 && 0 && 0 => 35
Added Horn clause: 20 && 31 && 0 && 0 && 0 && 0 && 32 => 36
Added Horn clause: 20 && 37 && 0 => 38
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1211790
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0021 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0078 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 101.11939
Added Horn clause: 39 => 40
Added Horn clause: 20 && 37 && 0 && 0 && 38 && 0 && 0 => 41
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1204350
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0020 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0048 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 84.945889
Added Horn clause: 39 && 31 && 40 && 0 && 0 => 42
Added Horn clause: 43 => 44
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1230640
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0032 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 101.866885
Added Horn clause: 43 && 37 && 44 => 45
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel7.bpl.ice2.bpl
Total learner time was 00:00:00.1243550
Verifying $kernel7: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 51000 + (if b0001 then 0 else 1) * 51000 + (if b0002 then 0 else 1) * 51000 + (if b0003 then 0 else 1) * 51000 + (if b0005 then 0 else 1) * 51000 + (if b0007 then 0 else 1) * 51000 + (if b0008 then 0 else 1) * 51000 + (if b0009 then 0 else 1) * 51000 + (if b0010 then 0 else 1) * 51000 + (if b0012 then 0 else 1) * 51000 + (if b0014 then 0 else 1) * 51000 + (if b0016 then 0 else 1) * 51000 + (if b0017 then 0 else 1) * 51000 + (if b0018 then 0 else 1) * 51000 + (if b0022 then 0 else 1) * 51000 + (if b0023 then 0 else 1) * 51000 + (if b0024 then 0 else 1) * 51000 + (if b0027 then 0 else 1) * 51000 + (if b0029 then 0 else 1) * 51000 + (if b0030 then 0 else 1) * 51000 + (if b0031 then 0 else 1) * 51000 + (if b0034 then 0 else 1) * 51000 + (if b0035 then 0 else 1) * 51000 + (if b0036 then 0 else 1) * 51000 + (if b0037 then 0 else 1) * 51000 + (if b0040 then 0 else 1) * 51000 + (if b0042 then 0 else 1) * 51000 + (if b0043 then 0 else 1) * 51000 + (if b0044 then 0 else 1) * 51000 + (if b0051 then 0 else 1) * 51000 + (if b0052 then 0 else 1) * 51000 + (if b0081 then 0 else 1) * 51000 + (if b0082 then 0 else 1) * 51000 + (if b0083 then 0 else 1) * 51000 + (if b0084 then 0 else 1) * 51000 + (if b0086 then 0 else 1) * 51000 + (if b0112 then 0 else 1) * 51000 + (if b0113 then 0 else 1) * 51000 + (if b0115 then 0 else 1) * 51000 + (if b0116 then 0 else 1) * 51000 + (if b0117 then 0 else 1) * 51000 + (if b0118 then 0 else 1) * 51000 + (if b0119 then 0 else 1) * 51000 + (if b0120 then 0 else 1) * 51000 + (if b0121 then 0 else 1) * 51000 + (if b0122 then 0 else 1) * 51000 + (if b0123 then 0 else 1) * 51000 + (if b0124 then 0 else 1) * 51000 + (if b0125 then 0 else 1) * 51000 + (if b0126 then 0 else 1) * 51000 + (if b0127 then 0 else 1) * 51000 < 441
}
Prover Time taken = 93.53547
Prover time = 930.58
Number of prover queries = 16
Learner time = 1.82
Number of learner queries = 15
Total time: 933.13
Number of positive examples:6
Number of negative examples:0
Number of Horn clauses:25
verified

Boogie program verifier finished with 1 verified, 0 errors
5.76user 5.18system 15:34.62elapsed 1%CPU (0avgtext+0avgdata 70364maxresident)k
0inputs+1016outputs (1major+88511minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel7.bpl.ice2.bpl
#################
Tue Apr 27 21:00:34 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel8.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel8.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 7
Generating VC of $kernel8
Verifying $kernel8: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1: positive
Prover Time taken = 0.17026
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel8.bpl.ice2.bpl
Total learner time was 00:00:00.1190130
Verifying $kernel8: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.154387
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/correlation/kernel8.bpl.ice2.bpl
Total learner time was 00:00:00.1208820
Verifying $kernel8: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0005 then 0 else 1) * 2000 + (if b0006 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.267091
Prover time = 0.59
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.92
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.11system 0:02.26elapsed 82%CPU (0avgtext+0avgdata 43548maxresident)k
0inputs+104outputs (1major+13961minor)pagefaults 0swaps
FILE:polybench/datamining/correlation/kernel8.bpl.ice2.bpl
#################
Tue Apr 27 21:00:36 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169809
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1183880
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.154529
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1192430
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.574893
Prover time = 0.90
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 1.23
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.09system 0:02.55elapsed 72%CPU (0avgtext+0avgdata 43372maxresident)k
0inputs+96outputs (1major+14015minor)pagefaults 0swaps
FILE:polybench/datamining/covariance/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:00:39 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 93
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.183265
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1274180
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0004 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0006 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0010 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0050 then 0 else 1) * 37000 + (if b0051 then 0 else 1) * 37000 + (if b0052 then 0 else 1) * 37000 + (if b0053 then 0 else 1) * 37000 + (if b0054 then 0 else 1) * 37000 + (if b0055 then 0 else 1) * 37000 + (if b0056 then 0 else 1) * 37000 + (if b0057 then 0 else 1) * 37000 + (if b0058 then 0 else 1) * 37000 + (if b0059 then 0 else 1) * 37000 + (if b0060 then 0 else 1) * 37000 + (if b0061 then 0 else 1) * 37000 + (if b0062 then 0 else 1) * 37000 + (if b0063 then 0 else 1) * 37000 + (if b0064 then 0 else 1) * 37000 + (if b0065 then 0 else 1) * 37000 + (if b0066 then 0 else 1) * 37000 + (if b0067 then 0 else 1) * 37000 + (if b0068 then 0 else 1) * 37000 + (if b0069 then 0 else 1) * 37000 + (if b0070 then 0 else 1) * 37000 + (if b0071 then 0 else 1) * 37000 + (if b0072 then 0 else 1) * 37000 + (if b0073 then 0 else 1) * 37000 + (if b0074 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.283731
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1309530
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0004 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0006 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0010 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0052 then 0 else 1) * 37000 + (if b0054 then 0 else 1) * 37000 + (if b0055 then 0 else 1) * 37000 + (if b0060 then 0 else 1) * 37000 + (if b0061 then 0 else 1) * 37000 + (if b0064 then 0 else 1) * 37000 + (if b0065 then 0 else 1) * 37000 + (if b0066 then 0 else 1) * 37000 + (if b0070 then 0 else 1) * 37000 + (if b0074 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.530803
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1298270
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0004 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0006 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0010 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0054 then 0 else 1) * 37000 + (if b0055 then 0 else 1) * 37000 + (if b0065 then 0 else 1) * 37000 + (if b0074 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.016728
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1301750
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0004 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0006 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0010 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 0.841348
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1285520
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0004 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0006 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0011 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0013 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0035 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0038 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0040 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0046 then 0 else 1) * 37000 + (if b0047 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 2.659289
Added Horn clause: 6 && 0 && 5 => 7
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 10 && 0 && 5 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 10 && 0 && 5 && 0 && 0 => 12
Added Horn clause: 10 && 0 && 5 && 0 && 0 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1314940
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0014 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0031 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0076 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 2.195479
Added Horn clause: 14 && 0 && 0 && 0 && 7 => 15
Added Horn clause: 16 && 0 && 11 && 0 && 0 && 0 && 0 => 17
Added Horn clause: 18 && 0 && 0 && 0 && 0 && 0 && 13 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1303470
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0019 then 0 else 1) * 37000 + (if b0020 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0022 then 0 else 1) * 37000 + (if b0023 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0025 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0080 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 2.150898
Added Horn clause: 20 => 21
Added Horn clause: 22 && 0 && 23 && 0 && 0 && 0 && 0 => 24
Added Horn clause: 22 && 0 && 17 && 0 && 0 => 25
Added Horn clause: 26 && 0 && 0 && 0 && 0 && 0 && 0 => 27
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1292240
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0033 then 0 else 1) * 37000 + (if b0034 then 0 else 1) * 37000 + (if b0036 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0079 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 2.971038
Added Horn clause: 20 && 0 && 21 && 0 && 0 => 28
Added Horn clause: 29 && 0 && 0 && 0 && 0 && 0 && 0 => 30
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1292960
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0032 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0075 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 2.460749
Added Horn clause: 10 && 0 && 0 && 0 && 7 && 0 && 31 => 32
Added Horn clause: 33 && 0 && 11 && 0 && 0 => 34
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1298980
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0017 then 0 else 1) * 37000 + (if b0018 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 2.669085
Added Horn clause: 35 => 36
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1297330
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0044 then 0 else 1) * 37000 + (if b0045 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 3.211455
Added Horn clause: 37 && 0 && 38 => 39
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1279220
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0029 then 0 else 1) * 37000 + (if b0030 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 2.955243
Added Horn clause: 40 && 0 && 38 && 0 && 41 => 42
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1324530
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 37000 + (if b0001 then 0 else 1) * 37000 + (if b0002 then 0 else 1) * 37000 + (if b0003 then 0 else 1) * 37000 + (if b0005 then 0 else 1) * 37000 + (if b0007 then 0 else 1) * 37000 + (if b0008 then 0 else 1) * 37000 + (if b0009 then 0 else 1) * 37000 + (if b0012 then 0 else 1) * 37000 + (if b0015 then 0 else 1) * 37000 + (if b0016 then 0 else 1) * 37000 + (if b0021 then 0 else 1) * 37000 + (if b0024 then 0 else 1) * 37000 + (if b0026 then 0 else 1) * 37000 + (if b0027 then 0 else 1) * 37000 + (if b0028 then 0 else 1) * 37000 + (if b0037 then 0 else 1) * 37000 + (if b0039 then 0 else 1) * 37000 + (if b0041 then 0 else 1) * 37000 + (if b0042 then 0 else 1) * 37000 + (if b0043 then 0 else 1) * 37000 + (if b0048 then 0 else 1) * 37000 + (if b0049 then 0 else 1) * 37000 + (if b0077 then 0 else 1) * 37000 + (if b0078 then 0 else 1) * 37000 + (if b0081 then 0 else 1) * 37000 + (if b0082 then 0 else 1) * 37000 + (if b0083 then 0 else 1) * 37000 + (if b0084 then 0 else 1) * 37000 + (if b0085 then 0 else 1) * 37000 + (if b0086 then 0 else 1) * 37000 + (if b0087 then 0 else 1) * 37000 + (if b0088 then 0 else 1) * 37000 + (if b0089 then 0 else 1) * 37000 + (if b0090 then 0 else 1) * 37000 + (if b0091 then 0 else 1) * 37000 + (if b0092 then 0 else 1) * 37000 < 441
}
Prover Time taken = 3.480315
Prover time = 29.61
Number of prover queries = 14
Learner time = 1.69
Number of learner queries = 13
Total time: 31.77
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:20
verified

Boogie program verifier finished with 1 verified, 0 errors
2.58user 2.69system 0:33.22elapsed 15%CPU (0avgtext+0avgdata 68384maxresident)k
0inputs+664outputs (1major+63047minor)pagefaults 0swaps
FILE:polybench/datamining/covariance/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:01:12 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 32
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171014
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1207250
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 5.102065
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1246820
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 9.052838
Added Horn clause: 0 && 0 && 1 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1198090
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 12.917932
Added Horn clause: 0 && 0 && 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/datamining/covariance/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1256030
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 11.232426
Prover time = 38.48
Number of prover queries = 5
Learner time = 0.49
Number of learner queries = 4
Total time: 39.10
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:7
verified

Boogie program verifier finished with 1 verified, 0 errors
1.03user 1.38system 0:40.46elapsed 5%CPU (0avgtext+0avgdata 51216maxresident)k
0inputs+208outputs (1major+23490minor)pagefaults 0swaps
FILE:polybench/datamining/covariance/kernel2.bpl.ice2.bpl
#################
Tue Apr 27 21:01:53 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 216
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.186189
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1192920
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0065 then 0 else 1) * 86000 + (if b0066 then 0 else 1) * 86000 + (if b0067 then 0 else 1) * 86000 + (if b0068 then 0 else 1) * 86000 + (if b0069 then 0 else 1) * 86000 + (if b0070 then 0 else 1) * 86000 + (if b0071 then 0 else 1) * 86000 + (if b0072 then 0 else 1) * 86000 + (if b0073 then 0 else 1) * 86000 + (if b0074 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0076 then 0 else 1) * 86000 + (if b0077 then 0 else 1) * 86000 + (if b0078 then 0 else 1) * 86000 + (if b0079 then 0 else 1) * 86000 + (if b0080 then 0 else 1) * 86000 + (if b0081 then 0 else 1) * 86000 + (if b0082 then 0 else 1) * 86000 + (if b0083 then 0 else 1) * 86000 + (if b0084 then 0 else 1) * 86000 + (if b0085 then 0 else 1) * 86000 + (if b0086 then 0 else 1) * 86000 + (if b0087 then 0 else 1) * 86000 + (if b0088 then 0 else 1) * 86000 + (if b0089 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0091 then 0 else 1) * 86000 + (if b0092 then 0 else 1) * 86000 + (if b0093 then 0 else 1) * 86000 + (if b0094 then 0 else 1) * 86000 + (if b0095 then 0 else 1) * 86000 + (if b0096 then 0 else 1) * 86000 + (if b0097 then 0 else 1) * 86000 + (if b0098 then 0 else 1) * 86000 + (if b0099 then 0 else 1) * 86000 + (if b0100 then 0 else 1) * 86000 + (if b0101 then 0 else 1) * 86000 + (if b0102 then 0 else 1) * 86000 + (if b0103 then 0 else 1) * 86000 + (if b0104 then 0 else 1) * 86000 + (if b0105 then 0 else 1) * 86000 + (if b0106 then 0 else 1) * 86000 + (if b0107 then 0 else 1) * 86000 + (if b0108 then 0 else 1) * 86000 + (if b0109 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.904794
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1206700
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0065 then 0 else 1) * 86000 + (if b0069 then 0 else 1) * 86000 + (if b0070 then 0 else 1) * 86000 + (if b0074 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0076 then 0 else 1) * 86000 + (if b0081 then 0 else 1) * 86000 + (if b0084 then 0 else 1) * 86000 + (if b0085 then 0 else 1) * 86000 + (if b0089 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0094 then 0 else 1) * 86000 + (if b0095 then 0 else 1) * 86000 + (if b0098 then 0 else 1) * 86000 + (if b0099 then 0 else 1) * 86000 + (if b0102 then 0 else 1) * 86000 + (if b0103 then 0 else 1) * 86000 + (if b0104 then 0 else 1) * 86000 + (if b0105 then 0 else 1) * 86000 + (if b0107 then 0 else 1) * 86000 + (if b0108 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.418622
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1207590
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0070 then 0 else 1) * 86000 + (if b0075 then 0 else 1) * 86000 + (if b0076 then 0 else 1) * 86000 + (if b0081 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0104 then 0 else 1) * 86000 + (if b0108 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.770931
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1237210
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0090 then 0 else 1) * 86000 + (if b0108 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.369796
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1232960
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0108 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.46071
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1221690
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0004 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0006 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0013 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0015 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0027 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0029 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0038 then 0 else 1) * 86000 + (if b0039 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0041 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0052 then 0 else 1) * 86000 + (if b0053 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0055 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0122 then 0 else 1) * 86000 + (if b0123 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0125 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0132 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0134 then 0 else 1) * 86000 + (if b0135 then 0 else 1) * 86000 + (if b0136 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0140 then 0 else 1) * 86000 + (if b0141 then 0 else 1) * 86000 + (if b0142 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0144 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0147 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0150 then 0 else 1) * 86000 + (if b0151 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0161 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0163 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0180 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0182 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0186 then 0 else 1) * 86000 + (if b0187 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0195 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0198 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0202 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Prover Time taken = 8.571985
Added Horn clause: 6 => 7
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 8 && 0 && 0 && 0 && 0 => 10
Added Horn clause: 11 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 11 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 11 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 11 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 11 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 17
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1270110
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0124 then 0 else 1) * 86000 + (if b0126 then 0 else 1) * 86000 + (if b0127 then 0 else 1) * 86000 + (if b0128 then 0 else 1) * 86000 + (if b0129 then 0 else 1) * 86000 + (if b0130 then 0 else 1) * 86000 + (if b0131 then 0 else 1) * 86000 + (if b0133 then 0 else 1) * 86000 + (if b0137 then 0 else 1) * 86000 + (if b0138 then 0 else 1) * 86000 + (if b0139 then 0 else 1) * 86000 + (if b0143 then 0 else 1) * 86000 + (if b0145 then 0 else 1) * 86000 + (if b0146 then 0 else 1) * 86000 + (if b0148 then 0 else 1) * 86000 + (if b0149 then 0 else 1) * 86000 + (if b0152 then 0 else 1) * 86000 + (if b0153 then 0 else 1) * 86000 + (if b0154 then 0 else 1) * 86000 + (if b0155 then 0 else 1) * 86000 + (if b0156 then 0 else 1) * 86000 + (if b0157 then 0 else 1) * 86000 + (if b0158 then 0 else 1) * 86000 + (if b0159 then 0 else 1) * 86000 + (if b0160 then 0 else 1) * 86000 + (if b0162 then 0 else 1) * 86000 + (if b0164 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0181 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0185 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0191 then 0 else 1) * 86000 + (if b0192 then 0 else 1) * 86000 + (if b0193 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0197 then 0 else 1) * 86000 + (if b0199 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0201 then 0 else 1) * 86000 + (if b0203 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Prover Time taken = 8.650937
Added Horn clause: 19 => 20
Added Horn clause: 8 && 21 && 0 => 22
Added Horn clause: 8 && 23 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 24
Added Horn clause: 11 && 25 && 0 && 26 && 17 && 0 && 0 && 0 && 0 => 27
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1228820
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0110 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0121 then 0 else 1) * 86000 + (if b0165 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0183 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0188 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0190 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0196 then 0 else 1) * 86000 + (if b0200 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Prover Time taken = 9.416639
Added Horn clause: 28 => 29
Added Horn clause: 0 && 30 && 0 => 31
Added Horn clause: 32 && 33 && 0 && 34 && 17 && 0 && 12 && 0 && 0 => 35
Added Horn clause: 32 && 36 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 37
Added Horn clause: 32 && 38 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 39
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1227210
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0020 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0111 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0184 then 0 else 1) * 86000 + (if b0189 then 0 else 1) * 86000 + (if b0194 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Prover Time taken = 8.534763
Added Horn clause: 40 => 41
Added Horn clause: 11 && 42 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 43
Added Horn clause: 8 && 44 && 0 => 45
Added Horn clause: 28 && 46 && 0 && 47 && 0 && 0 && 0 && 0 && 18 => 48
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1237960
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0021 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Prover Time taken = 7.021514
Added Horn clause: 49 => 50
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1269780
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 86000 + (if b0001 then 0 else 1) * 86000 + (if b0002 then 0 else 1) * 86000 + (if b0003 then 0 else 1) * 86000 + (if b0005 then 0 else 1) * 86000 + (if b0007 then 0 else 1) * 86000 + (if b0008 then 0 else 1) * 86000 + (if b0009 then 0 else 1) * 86000 + (if b0010 then 0 else 1) * 86000 + (if b0011 then 0 else 1) * 86000 + (if b0012 then 0 else 1) * 86000 + (if b0014 then 0 else 1) * 86000 + (if b0016 then 0 else 1) * 86000 + (if b0017 then 0 else 1) * 86000 + (if b0018 then 0 else 1) * 86000 + (if b0019 then 0 else 1) * 86000 + (if b0022 then 0 else 1) * 86000 + (if b0023 then 0 else 1) * 86000 + (if b0024 then 0 else 1) * 86000 + (if b0025 then 0 else 1) * 86000 + (if b0026 then 0 else 1) * 86000 + (if b0028 then 0 else 1) * 86000 + (if b0030 then 0 else 1) * 86000 + (if b0031 then 0 else 1) * 86000 + (if b0032 then 0 else 1) * 86000 + (if b0033 then 0 else 1) * 86000 + (if b0034 then 0 else 1) * 86000 + (if b0035 then 0 else 1) * 86000 + (if b0036 then 0 else 1) * 86000 + (if b0037 then 0 else 1) * 86000 + (if b0040 then 0 else 1) * 86000 + (if b0042 then 0 else 1) * 86000 + (if b0043 then 0 else 1) * 86000 + (if b0044 then 0 else 1) * 86000 + (if b0045 then 0 else 1) * 86000 + (if b0046 then 0 else 1) * 86000 + (if b0047 then 0 else 1) * 86000 + (if b0048 then 0 else 1) * 86000 + (if b0049 then 0 else 1) * 86000 + (if b0050 then 0 else 1) * 86000 + (if b0051 then 0 else 1) * 86000 + (if b0054 then 0 else 1) * 86000 + (if b0056 then 0 else 1) * 86000 + (if b0057 then 0 else 1) * 86000 + (if b0058 then 0 else 1) * 86000 + (if b0059 then 0 else 1) * 86000 + (if b0060 then 0 else 1) * 86000 + (if b0061 then 0 else 1) * 86000 + (if b0062 then 0 else 1) * 86000 + (if b0063 then 0 else 1) * 86000 + (if b0064 then 0 else 1) * 86000 + (if b0112 then 0 else 1) * 86000 + (if b0113 then 0 else 1) * 86000 + (if b0114 then 0 else 1) * 86000 + (if b0115 then 0 else 1) * 86000 + (if b0116 then 0 else 1) * 86000 + (if b0117 then 0 else 1) * 86000 + (if b0118 then 0 else 1) * 86000 + (if b0119 then 0 else 1) * 86000 + (if b0120 then 0 else 1) * 86000 + (if b0166 then 0 else 1) * 86000 + (if b0167 then 0 else 1) * 86000 + (if b0168 then 0 else 1) * 86000 + (if b0169 then 0 else 1) * 86000 + (if b0170 then 0 else 1) * 86000 + (if b0171 then 0 else 1) * 86000 + (if b0172 then 0 else 1) * 86000 + (if b0173 then 0 else 1) * 86000 + (if b0174 then 0 else 1) * 86000 + (if b0175 then 0 else 1) * 86000 + (if b0176 then 0 else 1) * 86000 + (if b0177 then 0 else 1) * 86000 + (if b0178 then 0 else 1) * 86000 + (if b0179 then 0 else 1) * 86000 + (if b0204 then 0 else 1) * 86000 + (if b0205 then 0 else 1) * 86000 + (if b0206 then 0 else 1) * 86000 + (if b0207 then 0 else 1) * 86000 + (if b0208 then 0 else 1) * 86000 + (if b0209 then 0 else 1) * 86000 + (if b0210 then 0 else 1) * 86000 + (if b0211 then 0 else 1) * 86000 + (if b0212 then 0 else 1) * 86000 + (if b0213 then 0 else 1) * 86000 + (if b0214 then 0 else 1) * 86000 + (if b0215 then 0 else 1) * 86000 < 441
}
Prover Time taken = 7.496287
Prover time = 94.80
Number of prover queries = 12
Learner time = 1.35
Number of learner queries = 11
Total time: 97.18
Number of positive examples:6
Number of negative examples:0
Number of Horn clauses:24
verified

Boogie program verifier finished with 1 verified, 0 errors
6.69user 5.30system 1:38.76elapsed 12%CPU (0avgtext+0avgdata 83104maxresident)k
0inputs+944outputs (1major+103286minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/gemm/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:03:31 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 227
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.196847
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1212870
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0004 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0006 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0013 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0015 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0029 then 0 else 1) * 90000 + (if b0030 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0032 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0056 then 0 else 1) * 90000 + (if b0057 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0059 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0068 then 0 else 1) * 90000 + (if b0069 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0071 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0080 then 0 else 1) * 90000 + (if b0081 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0083 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0091 then 0 else 1) * 90000 + (if b0092 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0094 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0102 then 0 else 1) * 90000 + (if b0103 then 0 else 1) * 90000 + (if b0104 then 0 else 1) * 90000 + (if b0105 then 0 else 1) * 90000 + (if b0106 then 0 else 1) * 90000 + (if b0107 then 0 else 1) * 90000 + (if b0108 then 0 else 1) * 90000 + (if b0109 then 0 else 1) * 90000 + (if b0110 then 0 else 1) * 90000 + (if b0111 then 0 else 1) * 90000 + (if b0112 then 0 else 1) * 90000 + (if b0113 then 0 else 1) * 90000 + (if b0114 then 0 else 1) * 90000 + (if b0115 then 0 else 1) * 90000 + (if b0116 then 0 else 1) * 90000 + (if b0117 then 0 else 1) * 90000 + (if b0118 then 0 else 1) * 90000 + (if b0119 then 0 else 1) * 90000 + (if b0120 then 0 else 1) * 90000 + (if b0121 then 0 else 1) * 90000 + (if b0122 then 0 else 1) * 90000 + (if b0123 then 0 else 1) * 90000 + (if b0124 then 0 else 1) * 90000 + (if b0125 then 0 else 1) * 90000 + (if b0126 then 0 else 1) * 90000 + (if b0127 then 0 else 1) * 90000 + (if b0128 then 0 else 1) * 90000 + (if b0129 then 0 else 1) * 90000 + (if b0130 then 0 else 1) * 90000 + (if b0131 then 0 else 1) * 90000 + (if b0132 then 0 else 1) * 90000 + (if b0133 then 0 else 1) * 90000 + (if b0134 then 0 else 1) * 90000 + (if b0135 then 0 else 1) * 90000 + (if b0136 then 0 else 1) * 90000 + (if b0137 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0164 then 0 else 1) * 90000 + (if b0165 then 0 else 1) * 90000 + (if b0166 then 0 else 1) * 90000 + (if b0167 then 0 else 1) * 90000 + (if b0168 then 0 else 1) * 90000 + (if b0169 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0174 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0177 then 0 else 1) * 90000 + (if b0178 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0183 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0186 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 13.870462
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1229340
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0004 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0006 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0013 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0015 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0029 then 0 else 1) * 90000 + (if b0030 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0032 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0056 then 0 else 1) * 90000 + (if b0057 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0059 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0068 then 0 else 1) * 90000 + (if b0069 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0071 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0080 then 0 else 1) * 90000 + (if b0081 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0083 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0091 then 0 else 1) * 90000 + (if b0092 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0094 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0107 then 0 else 1) * 90000 + (if b0108 then 0 else 1) * 90000 + (if b0114 then 0 else 1) * 90000 + (if b0117 then 0 else 1) * 90000 + (if b0119 then 0 else 1) * 90000 + (if b0127 then 0 else 1) * 90000 + (if b0128 then 0 else 1) * 90000 + (if b0132 then 0 else 1) * 90000 + (if b0135 then 0 else 1) * 90000 + (if b0137 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0164 then 0 else 1) * 90000 + (if b0165 then 0 else 1) * 90000 + (if b0166 then 0 else 1) * 90000 + (if b0167 then 0 else 1) * 90000 + (if b0168 then 0 else 1) * 90000 + (if b0169 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0174 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0177 then 0 else 1) * 90000 + (if b0178 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0183 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0186 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 21.035104
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1259530
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0004 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0006 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0013 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0015 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0029 then 0 else 1) * 90000 + (if b0030 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0032 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0056 then 0 else 1) * 90000 + (if b0057 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0059 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0068 then 0 else 1) * 90000 + (if b0069 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0071 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0080 then 0 else 1) * 90000 + (if b0081 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0083 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0091 then 0 else 1) * 90000 + (if b0092 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0094 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0137 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0164 then 0 else 1) * 90000 + (if b0165 then 0 else 1) * 90000 + (if b0166 then 0 else 1) * 90000 + (if b0167 then 0 else 1) * 90000 + (if b0168 then 0 else 1) * 90000 + (if b0169 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0174 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0177 then 0 else 1) * 90000 + (if b0178 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0183 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0186 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 16.794324
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1249660
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0004 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0006 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0013 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0015 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0029 then 0 else 1) * 90000 + (if b0030 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0032 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0056 then 0 else 1) * 90000 + (if b0057 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0059 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0068 then 0 else 1) * 90000 + (if b0069 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0071 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0080 then 0 else 1) * 90000 + (if b0081 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0083 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0091 then 0 else 1) * 90000 + (if b0092 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0094 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0164 then 0 else 1) * 90000 + (if b0165 then 0 else 1) * 90000 + (if b0166 then 0 else 1) * 90000 + (if b0167 then 0 else 1) * 90000 + (if b0168 then 0 else 1) * 90000 + (if b0169 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0174 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0177 then 0 else 1) * 90000 + (if b0178 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0183 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0186 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 17.085528
Added Horn clause: 4 => 5
Added Horn clause: 4 && 0 && 0 => 6
Added Horn clause: 7 && 0 && 0 => 8
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 10 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 15 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Added Horn clause: 17 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Added Horn clause: 17 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1287720
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0013 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0015 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0030 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0032 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0069 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0071 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0164 then 0 else 1) * 90000 + (if b0165 then 0 else 1) * 90000 + (if b0166 then 0 else 1) * 90000 + (if b0167 then 0 else 1) * 90000 + (if b0168 then 0 else 1) * 90000 + (if b0169 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0174 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0177 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0183 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 18.992782
Added Horn clause: 20 && 0 && 0 && 0 && 0 => 21
Added Horn clause: 22 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 23
Added Horn clause: 24 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 19 => 25
Added Horn clause: 26 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 27
Added Horn clause: 24 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 28
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1220930
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0170 then 0 else 1) * 90000 + (if b0171 then 0 else 1) * 90000 + (if b0172 then 0 else 1) * 90000 + (if b0173 then 0 else 1) * 90000 + (if b0175 then 0 else 1) * 90000 + (if b0176 then 0 else 1) * 90000 + (if b0179 then 0 else 1) * 90000 + (if b0180 then 0 else 1) * 90000 + (if b0181 then 0 else 1) * 90000 + (if b0182 then 0 else 1) * 90000 + (if b0184 then 0 else 1) * 90000 + (if b0185 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 14.332562
Added Horn clause: 29 && 0 && 0 && 0 && 0 => 30
Added Horn clause: 20 && 0 && 0 && 0 && 31 && 32 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 33
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1216930
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0187 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 12.01001
Added Horn clause: 34 && 0 && 0 && 0 && 0 && 35 && 0 && 0 && 16 && 0 && 0 && 0 && 0 => 36
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1242040
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0037 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0188 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 13.863485
Added Horn clause: 37 && 0 && 0 && 0 && 0 && 38 && 0 && 0 && 0 && 0 && 0 => 39
Added Horn clause: 40 && 0 && 0 && 0 && 0 && 41 && 0 && 0 && 0 && 0 && 27 && 0 && 0 => 42
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1265380
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0052 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0138 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 13.494358
Added Horn clause: 43 && 0 && 0 && 0 && 11 && 44 && 0 && 0 && 0 && 0 && 0 => 45
Added Horn clause: 46 && 0 && 0 && 0 && 0 && 38 && 0 && 0 && 0 && 0 && 0 && 0 && 39 => 47
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1241420
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0019 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0139 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 17.671206
Added Horn clause: 48 && 0 && 0 && 0 && 0 => 49
Added Horn clause: 50 && 0 && 0 && 0 && 0 && 44 && 0 && 0 && 0 && 0 && 0 && 0 && 45 => 51
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.0896920
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0024 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0036 then 0 else 1) * 90000 + (if b0038 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 15.415122
Added Horn clause: 48 && 0 && 0 && 0 && 0 && 38 && 49 && 0 && 0 && 0 && 0 => 52
Added Horn clause: 53 && 0 && 0 && 0 && 0 => 54
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1237370
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0051 then 0 else 1) * 90000 + (if b0053 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 12.843169
Added Horn clause: 53 && 0 && 0 && 0 && 0 && 44 && 54 && 0 && 0 && 0 && 0 => 55
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1246210
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 90000 + (if b0001 then 0 else 1) * 90000 + (if b0002 then 0 else 1) * 90000 + (if b0003 then 0 else 1) * 90000 + (if b0005 then 0 else 1) * 90000 + (if b0007 then 0 else 1) * 90000 + (if b0008 then 0 else 1) * 90000 + (if b0009 then 0 else 1) * 90000 + (if b0010 then 0 else 1) * 90000 + (if b0011 then 0 else 1) * 90000 + (if b0012 then 0 else 1) * 90000 + (if b0014 then 0 else 1) * 90000 + (if b0016 then 0 else 1) * 90000 + (if b0017 then 0 else 1) * 90000 + (if b0018 then 0 else 1) * 90000 + (if b0020 then 0 else 1) * 90000 + (if b0021 then 0 else 1) * 90000 + (if b0022 then 0 else 1) * 90000 + (if b0023 then 0 else 1) * 90000 + (if b0025 then 0 else 1) * 90000 + (if b0026 then 0 else 1) * 90000 + (if b0027 then 0 else 1) * 90000 + (if b0028 then 0 else 1) * 90000 + (if b0031 then 0 else 1) * 90000 + (if b0033 then 0 else 1) * 90000 + (if b0034 then 0 else 1) * 90000 + (if b0035 then 0 else 1) * 90000 + (if b0039 then 0 else 1) * 90000 + (if b0040 then 0 else 1) * 90000 + (if b0041 then 0 else 1) * 90000 + (if b0042 then 0 else 1) * 90000 + (if b0043 then 0 else 1) * 90000 + (if b0044 then 0 else 1) * 90000 + (if b0045 then 0 else 1) * 90000 + (if b0046 then 0 else 1) * 90000 + (if b0047 then 0 else 1) * 90000 + (if b0048 then 0 else 1) * 90000 + (if b0049 then 0 else 1) * 90000 + (if b0050 then 0 else 1) * 90000 + (if b0054 then 0 else 1) * 90000 + (if b0055 then 0 else 1) * 90000 + (if b0058 then 0 else 1) * 90000 + (if b0060 then 0 else 1) * 90000 + (if b0061 then 0 else 1) * 90000 + (if b0062 then 0 else 1) * 90000 + (if b0063 then 0 else 1) * 90000 + (if b0064 then 0 else 1) * 90000 + (if b0065 then 0 else 1) * 90000 + (if b0066 then 0 else 1) * 90000 + (if b0067 then 0 else 1) * 90000 + (if b0070 then 0 else 1) * 90000 + (if b0072 then 0 else 1) * 90000 + (if b0073 then 0 else 1) * 90000 + (if b0074 then 0 else 1) * 90000 + (if b0075 then 0 else 1) * 90000 + (if b0076 then 0 else 1) * 90000 + (if b0077 then 0 else 1) * 90000 + (if b0078 then 0 else 1) * 90000 + (if b0079 then 0 else 1) * 90000 + (if b0082 then 0 else 1) * 90000 + (if b0084 then 0 else 1) * 90000 + (if b0085 then 0 else 1) * 90000 + (if b0086 then 0 else 1) * 90000 + (if b0087 then 0 else 1) * 90000 + (if b0088 then 0 else 1) * 90000 + (if b0089 then 0 else 1) * 90000 + (if b0090 then 0 else 1) * 90000 + (if b0093 then 0 else 1) * 90000 + (if b0095 then 0 else 1) * 90000 + (if b0096 then 0 else 1) * 90000 + (if b0097 then 0 else 1) * 90000 + (if b0098 then 0 else 1) * 90000 + (if b0099 then 0 else 1) * 90000 + (if b0100 then 0 else 1) * 90000 + (if b0101 then 0 else 1) * 90000 + (if b0140 then 0 else 1) * 90000 + (if b0141 then 0 else 1) * 90000 + (if b0142 then 0 else 1) * 90000 + (if b0143 then 0 else 1) * 90000 + (if b0144 then 0 else 1) * 90000 + (if b0145 then 0 else 1) * 90000 + (if b0146 then 0 else 1) * 90000 + (if b0147 then 0 else 1) * 90000 + (if b0148 then 0 else 1) * 90000 + (if b0149 then 0 else 1) * 90000 + (if b0150 then 0 else 1) * 90000 + (if b0151 then 0 else 1) * 90000 + (if b0152 then 0 else 1) * 90000 + (if b0153 then 0 else 1) * 90000 + (if b0154 then 0 else 1) * 90000 + (if b0155 then 0 else 1) * 90000 + (if b0156 then 0 else 1) * 90000 + (if b0157 then 0 else 1) * 90000 + (if b0158 then 0 else 1) * 90000 + (if b0159 then 0 else 1) * 90000 + (if b0160 then 0 else 1) * 90000 + (if b0161 then 0 else 1) * 90000 + (if b0162 then 0 else 1) * 90000 + (if b0163 then 0 else 1) * 90000 + (if b0189 then 0 else 1) * 90000 + (if b0190 then 0 else 1) * 90000 + (if b0191 then 0 else 1) * 90000 + (if b0192 then 0 else 1) * 90000 + (if b0193 then 0 else 1) * 90000 + (if b0194 then 0 else 1) * 90000 + (if b0195 then 0 else 1) * 90000 + (if b0196 then 0 else 1) * 90000 + (if b0197 then 0 else 1) * 90000 + (if b0198 then 0 else 1) * 90000 + (if b0199 then 0 else 1) * 90000 + (if b0200 then 0 else 1) * 90000 + (if b0201 then 0 else 1) * 90000 + (if b0202 then 0 else 1) * 90000 + (if b0203 then 0 else 1) * 90000 + (if b0204 then 0 else 1) * 90000 + (if b0205 then 0 else 1) * 90000 + (if b0206 then 0 else 1) * 90000 + (if b0207 then 0 else 1) * 90000 + (if b0208 then 0 else 1) * 90000 + (if b0209 then 0 else 1) * 90000 + (if b0210 then 0 else 1) * 90000 + (if b0211 then 0 else 1) * 90000 + (if b0212 then 0 else 1) * 90000 + (if b0213 then 0 else 1) * 90000 + (if b0214 then 0 else 1) * 90000 + (if b0215 then 0 else 1) * 90000 + (if b0216 then 0 else 1) * 90000 + (if b0217 then 0 else 1) * 90000 + (if b0218 then 0 else 1) * 90000 + (if b0219 then 0 else 1) * 90000 + (if b0220 then 0 else 1) * 90000 + (if b0221 then 0 else 1) * 90000 + (if b0222 then 0 else 1) * 90000 + (if b0223 then 0 else 1) * 90000 + (if b0224 then 0 else 1) * 90000 + (if b0225 then 0 else 1) * 90000 + (if b0226 then 0 else 1) * 90000 < 441
}
Prover Time taken = 11.104826
Prover time = 198.71
Number of prover queries = 14
Learner time = 1.58
Number of learner queries = 13
Total time: 201.94
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:27
verified

Boogie program verifier finished with 1 verified, 0 errors
7.56user 4.28system 3:23.63elapsed 5%CPU (0avgtext+0avgdata 96604maxresident)k
0inputs+1288outputs (1major+154231minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/gemver/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:06:55 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 88
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.177869
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1176220
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0035 then 0 else 1) * 35000 + (if b0036 then 0 else 1) * 35000 + (if b0037 then 0 else 1) * 35000 + (if b0038 then 0 else 1) * 35000 + (if b0039 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0041 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0044 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.827571
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1229640
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0040 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0043 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.874739
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1258090
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0042 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.886639
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1191020
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.840808
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1182340
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0013 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0015 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0022 then 0 else 1) * 35000 + (if b0023 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0025 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.821254
Added Horn clause: 5 => 6
Added Horn clause: 7 && 0 && 0 => 8
Added Horn clause: 9 && 0 && 0 && 0 && 0 => 10
Added Horn clause: 9 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 12 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 12 && 0 && 0 && 0 && 0 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1206900
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.887859
Added Horn clause: 15 => 16
Added Horn clause: 17 && 0 && 0 && 0 && 0 => 18
Added Horn clause: 17 && 19 && 14 && 0 && 0 => 20
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1228950
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.325257
Added Horn clause: 17 && 0 && 0 && 0 && 0 => 21
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1205280
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0014 then 0 else 1) * 35000 + (if b0016 then 0 else 1) * 35000 + (if b0017 then 0 else 1) * 35000 + (if b0018 then 0 else 1) * 35000 + (if b0019 then 0 else 1) * 35000 + (if b0020 then 0 else 1) * 35000 + (if b0021 then 0 else 1) * 35000 + (if b0024 then 0 else 1) * 35000 + (if b0026 then 0 else 1) * 35000 + (if b0027 then 0 else 1) * 35000 + (if b0028 then 0 else 1) * 35000 + (if b0029 then 0 else 1) * 35000 + (if b0030 then 0 else 1) * 35000 + (if b0031 then 0 else 1) * 35000 + (if b0032 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.101679
Prover time = 15.74
Number of prover queries = 9
Learner time = 0.97
Number of learner queries = 8
Total time: 16.98
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:10
verified

Boogie program verifier finished with 1 verified, 0 errors
2.31user 2.45system 0:18.41elapsed 25%CPU (0avgtext+0avgdata 67416maxresident)k
0inputs+376outputs (1major+44929minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/gemver/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:07:13 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 106
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.180064
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1197850
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0045 then 0 else 1) * 42000 + (if b0046 then 0 else 1) * 42000 + (if b0047 then 0 else 1) * 42000 + (if b0048 then 0 else 1) * 42000 + (if b0049 then 0 else 1) * 42000 + (if b0050 then 0 else 1) * 42000 + (if b0051 then 0 else 1) * 42000 + (if b0052 then 0 else 1) * 42000 + (if b0053 then 0 else 1) * 42000 + (if b0054 then 0 else 1) * 42000 + (if b0055 then 0 else 1) * 42000 + (if b0056 then 0 else 1) * 42000 + (if b0057 then 0 else 1) * 42000 + (if b0058 then 0 else 1) * 42000 + (if b0059 then 0 else 1) * 42000 + (if b0060 then 0 else 1) * 42000 + (if b0061 then 0 else 1) * 42000 + (if b0062 then 0 else 1) * 42000 + (if b0063 then 0 else 1) * 42000 + (if b0064 then 0 else 1) * 42000 + (if b0065 then 0 else 1) * 42000 + (if b0066 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.055264
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1193680
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0045 then 0 else 1) * 42000 + (if b0047 then 0 else 1) * 42000 + (if b0056 then 0 else 1) * 42000 + (if b0057 then 0 else 1) * 42000 + (if b0063 then 0 else 1) * 42000 + (if b0064 then 0 else 1) * 42000 + (if b0066 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.070801
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1218710
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0045 then 0 else 1) * 42000 + (if b0056 then 0 else 1) * 42000 + (if b0057 then 0 else 1) * 42000 + (if b0063 then 0 else 1) * 42000 + (if b0064 then 0 else 1) * 42000 + (if b0066 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.942676
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1209480
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0045 then 0 else 1) * 42000 + (if b0056 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.135856
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1192360
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 3.06123
Added Horn clause: 5 => 6
Added Horn clause: 7 && 0 && 0 => 8
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 10
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1189150
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 2.578542
Added Horn clause: 15 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1199620
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 3.64713
Added Horn clause: 17 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1211690
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 3.440384
Prover time = 25.11
Number of prover queries = 9
Learner time = 0.96
Number of learner queries = 8
Total time: 26.43
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:10
verified

Boogie program verifier finished with 1 verified, 0 errors
2.81user 2.72system 0:27.84elapsed 19%CPU (0avgtext+0avgdata 70024maxresident)k
0inputs+456outputs (1major+54505minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/gemver/kernel2.bpl.ice2.bpl
#################
Tue Apr 27 21:07:41 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 119
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.182739
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1230480
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0059 then 0 else 1) * 47000 + (if b0060 then 0 else 1) * 47000 + (if b0061 then 0 else 1) * 47000 + (if b0062 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0064 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0066 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0069 then 0 else 1) * 47000 + (if b0070 then 0 else 1) * 47000 + (if b0071 then 0 else 1) * 47000 + (if b0072 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.018067
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1233870
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0059 then 0 else 1) * 47000 + (if b0060 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0066 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0069 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.197914
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1290260
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.95452
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1255630
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.69068
Added Horn clause: 4 => 5
Added Horn clause: 6 && 0 && 0 && 0 && 0 => 7
Added Horn clause: 6 && 0 && 0 => 8
Added Horn clause: 9 && 0 && 0 && 0 && 0 => 10
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 6 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 13 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 15 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1253930
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 2.426881
Added Horn clause: 17 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1293630
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.324034
Added Horn clause: 15 && 0 && 0 && 0 && 0 && 0 && 0 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1260890
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.744327
Prover time = 25.54
Number of prover queries = 8
Learner time = 0.88
Number of learner queries = 7
Total time: 26.83
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:10
verified

Boogie program verifier finished with 1 verified, 0 errors
2.77user 2.52system 0:28.31elapsed 18%CPU (0avgtext+0avgdata 70176maxresident)k
0inputs+416outputs (1major+51811minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/gesummv/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:08:10 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 194
Generating VC of $kernel3
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.188888
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1201550
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0064 then 0 else 1) * 77000 + (if b0065 then 0 else 1) * 77000 + (if b0066 then 0 else 1) * 77000 + (if b0067 then 0 else 1) * 77000 + (if b0068 then 0 else 1) * 77000 + (if b0069 then 0 else 1) * 77000 + (if b0070 then 0 else 1) * 77000 + (if b0071 then 0 else 1) * 77000 + (if b0072 then 0 else 1) * 77000 + (if b0073 then 0 else 1) * 77000 + (if b0074 then 0 else 1) * 77000 + (if b0075 then 0 else 1) * 77000 + (if b0076 then 0 else 1) * 77000 + (if b0077 then 0 else 1) * 77000 + (if b0078 then 0 else 1) * 77000 + (if b0079 then 0 else 1) * 77000 + (if b0080 then 0 else 1) * 77000 + (if b0081 then 0 else 1) * 77000 + (if b0082 then 0 else 1) * 77000 + (if b0083 then 0 else 1) * 77000 + (if b0084 then 0 else 1) * 77000 + (if b0085 then 0 else 1) * 77000 + (if b0086 then 0 else 1) * 77000 + (if b0087 then 0 else 1) * 77000 + (if b0088 then 0 else 1) * 77000 + (if b0089 then 0 else 1) * 77000 + (if b0090 then 0 else 1) * 77000 + (if b0091 then 0 else 1) * 77000 + (if b0092 then 0 else 1) * 77000 + (if b0093 then 0 else 1) * 77000 + (if b0094 then 0 else 1) * 77000 + (if b0095 then 0 else 1) * 77000 + (if b0096 then 0 else 1) * 77000 + (if b0097 then 0 else 1) * 77000 + (if b0098 then 0 else 1) * 77000 + (if b0099 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0111 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 11.219744
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1196130
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0067 then 0 else 1) * 77000 + (if b0072 then 0 else 1) * 77000 + (if b0073 then 0 else 1) * 77000 + (if b0077 then 0 else 1) * 77000 + (if b0079 then 0 else 1) * 77000 + (if b0080 then 0 else 1) * 77000 + (if b0081 then 0 else 1) * 77000 + (if b0083 then 0 else 1) * 77000 + (if b0085 then 0 else 1) * 77000 + (if b0087 then 0 else 1) * 77000 + (if b0088 then 0 else 1) * 77000 + (if b0089 then 0 else 1) * 77000 + (if b0090 then 0 else 1) * 77000 + (if b0093 then 0 else 1) * 77000 + (if b0096 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0111 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.092494
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1209520
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0067 then 0 else 1) * 77000 + (if b0077 then 0 else 1) * 77000 + (if b0080 then 0 else 1) * 77000 + (if b0081 then 0 else 1) * 77000 + (if b0083 then 0 else 1) * 77000 + (if b0090 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0111 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.924634
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1232740
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0077 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0111 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 11.972279
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1247900
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0004 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0006 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0013 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0015 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0027 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0029 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0038 then 0 else 1) * 77000 + (if b0039 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0041 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0051 then 0 else 1) * 77000 + (if b0052 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0054 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0111 then 0 else 1) * 77000 + (if b0112 then 0 else 1) * 77000 + (if b0113 then 0 else 1) * 77000 + (if b0114 then 0 else 1) * 77000 + (if b0115 then 0 else 1) * 77000 + (if b0116 then 0 else 1) * 77000 + (if b0117 then 0 else 1) * 77000 + (if b0118 then 0 else 1) * 77000 + (if b0119 then 0 else 1) * 77000 + (if b0120 then 0 else 1) * 77000 + (if b0121 then 0 else 1) * 77000 + (if b0122 then 0 else 1) * 77000 + (if b0123 then 0 else 1) * 77000 + (if b0124 then 0 else 1) * 77000 + (if b0125 then 0 else 1) * 77000 + (if b0126 then 0 else 1) * 77000 + (if b0127 then 0 else 1) * 77000 + (if b0128 then 0 else 1) * 77000 + (if b0129 then 0 else 1) * 77000 + (if b0130 then 0 else 1) * 77000 + (if b0131 then 0 else 1) * 77000 + (if b0132 then 0 else 1) * 77000 + (if b0133 then 0 else 1) * 77000 + (if b0134 then 0 else 1) * 77000 + (if b0135 then 0 else 1) * 77000 + (if b0136 then 0 else 1) * 77000 + (if b0137 then 0 else 1) * 77000 + (if b0138 then 0 else 1) * 77000 + (if b0139 then 0 else 1) * 77000 + (if b0140 then 0 else 1) * 77000 + (if b0141 then 0 else 1) * 77000 + (if b0142 then 0 else 1) * 77000 + (if b0143 then 0 else 1) * 77000 + (if b0144 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0165 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0173 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0176 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0179 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Prover Time taken = 11.844534
Added Horn clause: 5 => 6
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 8
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 10
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 9 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Added Horn clause: 17 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1193280
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0145 then 0 else 1) * 77000 + (if b0146 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0160 then 0 else 1) * 77000 + (if b0161 then 0 else 1) * 77000 + (if b0162 then 0 else 1) * 77000 + (if b0163 then 0 else 1) * 77000 + (if b0164 then 0 else 1) * 77000 + (if b0166 then 0 else 1) * 77000 + (if b0167 then 0 else 1) * 77000 + (if b0168 then 0 else 1) * 77000 + (if b0169 then 0 else 1) * 77000 + (if b0170 then 0 else 1) * 77000 + (if b0171 then 0 else 1) * 77000 + (if b0172 then 0 else 1) * 77000 + (if b0174 then 0 else 1) * 77000 + (if b0175 then 0 else 1) * 77000 + (if b0177 then 0 else 1) * 77000 + (if b0178 then 0 else 1) * 77000 + (if b0180 then 0 else 1) * 77000 + (if b0181 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0192 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Prover Time taken = 9.287535
Added Horn clause: 0 && 19 && 0 => 20
Added Horn clause: 21 && 22 && 0 && 23 && 0 && 0 && 0 && 0 && 0 => 24
Added Horn clause: 21 && 25 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 26
Added Horn clause: 27 && 25 && 0 && 23 && 18 && 0 && 0 && 0 && 28 => 29
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1205250
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0101 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0158 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Prover Time taken = 15.671016
Added Horn clause: 21 && 30 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 31
Added Horn clause: 21 && 32 && 0 && 33 && 18 && 0 && 14 && 0 && 0 => 34
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1250500
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0021 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0025 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0100 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Prover Time taken = 12.808502
Added Horn clause: 35 => 36
Added Horn clause: 9 && 37 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 38
Added Horn clause: 9 && 39 && 0 && 34 && 18 && 0 && 0 && 0 && 0 => 40
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1259030
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0020 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Prover Time taken = 9.542831
Added Horn clause: 41 => 42
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1215700
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 77000 + (if b0001 then 0 else 1) * 77000 + (if b0002 then 0 else 1) * 77000 + (if b0003 then 0 else 1) * 77000 + (if b0005 then 0 else 1) * 77000 + (if b0007 then 0 else 1) * 77000 + (if b0008 then 0 else 1) * 77000 + (if b0009 then 0 else 1) * 77000 + (if b0010 then 0 else 1) * 77000 + (if b0011 then 0 else 1) * 77000 + (if b0012 then 0 else 1) * 77000 + (if b0014 then 0 else 1) * 77000 + (if b0016 then 0 else 1) * 77000 + (if b0017 then 0 else 1) * 77000 + (if b0018 then 0 else 1) * 77000 + (if b0019 then 0 else 1) * 77000 + (if b0022 then 0 else 1) * 77000 + (if b0023 then 0 else 1) * 77000 + (if b0024 then 0 else 1) * 77000 + (if b0026 then 0 else 1) * 77000 + (if b0028 then 0 else 1) * 77000 + (if b0030 then 0 else 1) * 77000 + (if b0031 then 0 else 1) * 77000 + (if b0032 then 0 else 1) * 77000 + (if b0033 then 0 else 1) * 77000 + (if b0034 then 0 else 1) * 77000 + (if b0035 then 0 else 1) * 77000 + (if b0036 then 0 else 1) * 77000 + (if b0037 then 0 else 1) * 77000 + (if b0040 then 0 else 1) * 77000 + (if b0042 then 0 else 1) * 77000 + (if b0043 then 0 else 1) * 77000 + (if b0044 then 0 else 1) * 77000 + (if b0045 then 0 else 1) * 77000 + (if b0046 then 0 else 1) * 77000 + (if b0047 then 0 else 1) * 77000 + (if b0048 then 0 else 1) * 77000 + (if b0049 then 0 else 1) * 77000 + (if b0050 then 0 else 1) * 77000 + (if b0053 then 0 else 1) * 77000 + (if b0055 then 0 else 1) * 77000 + (if b0056 then 0 else 1) * 77000 + (if b0057 then 0 else 1) * 77000 + (if b0058 then 0 else 1) * 77000 + (if b0059 then 0 else 1) * 77000 + (if b0060 then 0 else 1) * 77000 + (if b0061 then 0 else 1) * 77000 + (if b0062 then 0 else 1) * 77000 + (if b0063 then 0 else 1) * 77000 + (if b0102 then 0 else 1) * 77000 + (if b0103 then 0 else 1) * 77000 + (if b0104 then 0 else 1) * 77000 + (if b0105 then 0 else 1) * 77000 + (if b0106 then 0 else 1) * 77000 + (if b0107 then 0 else 1) * 77000 + (if b0108 then 0 else 1) * 77000 + (if b0109 then 0 else 1) * 77000 + (if b0110 then 0 else 1) * 77000 + (if b0147 then 0 else 1) * 77000 + (if b0148 then 0 else 1) * 77000 + (if b0149 then 0 else 1) * 77000 + (if b0150 then 0 else 1) * 77000 + (if b0151 then 0 else 1) * 77000 + (if b0152 then 0 else 1) * 77000 + (if b0153 then 0 else 1) * 77000 + (if b0154 then 0 else 1) * 77000 + (if b0155 then 0 else 1) * 77000 + (if b0156 then 0 else 1) * 77000 + (if b0157 then 0 else 1) * 77000 + (if b0159 then 0 else 1) * 77000 + (if b0182 then 0 else 1) * 77000 + (if b0183 then 0 else 1) * 77000 + (if b0184 then 0 else 1) * 77000 + (if b0185 then 0 else 1) * 77000 + (if b0186 then 0 else 1) * 77000 + (if b0187 then 0 else 1) * 77000 + (if b0188 then 0 else 1) * 77000 + (if b0189 then 0 else 1) * 77000 + (if b0190 then 0 else 1) * 77000 + (if b0191 then 0 else 1) * 77000 + (if b0193 then 0 else 1) * 77000 < 441
}
Prover Time taken = 9.648793
Prover time = 111.20
Number of prover queries = 11
Learner time = 1.22
Number of learner queries = 10
Total time: 113.27
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:20
verified

Boogie program verifier finished with 1 verified, 0 errors
5.54user 4.16system 1:54.82elapsed 8%CPU (0avgtext+0avgdata 84844maxresident)k
0inputs+752outputs (1major+89650minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/symm/kernel3.bpl.ice2.bpl
#################
Tue Apr 27 21:10:04 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 228
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.19358
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1196660
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0065 then 0 else 1) * 91000 + (if b0066 then 0 else 1) * 91000 + (if b0067 then 0 else 1) * 91000 + (if b0068 then 0 else 1) * 91000 + (if b0069 then 0 else 1) * 91000 + (if b0070 then 0 else 1) * 91000 + (if b0071 then 0 else 1) * 91000 + (if b0072 then 0 else 1) * 91000 + (if b0073 then 0 else 1) * 91000 + (if b0074 then 0 else 1) * 91000 + (if b0075 then 0 else 1) * 91000 + (if b0076 then 0 else 1) * 91000 + (if b0077 then 0 else 1) * 91000 + (if b0078 then 0 else 1) * 91000 + (if b0079 then 0 else 1) * 91000 + (if b0080 then 0 else 1) * 91000 + (if b0081 then 0 else 1) * 91000 + (if b0082 then 0 else 1) * 91000 + (if b0083 then 0 else 1) * 91000 + (if b0084 then 0 else 1) * 91000 + (if b0085 then 0 else 1) * 91000 + (if b0086 then 0 else 1) * 91000 + (if b0087 then 0 else 1) * 91000 + (if b0088 then 0 else 1) * 91000 + (if b0089 then 0 else 1) * 91000 + (if b0090 then 0 else 1) * 91000 + (if b0091 then 0 else 1) * 91000 + (if b0092 then 0 else 1) * 91000 + (if b0093 then 0 else 1) * 91000 + (if b0094 then 0 else 1) * 91000 + (if b0095 then 0 else 1) * 91000 + (if b0096 then 0 else 1) * 91000 + (if b0097 then 0 else 1) * 91000 + (if b0098 then 0 else 1) * 91000 + (if b0099 then 0 else 1) * 91000 + (if b0100 then 0 else 1) * 91000 + (if b0101 then 0 else 1) * 91000 + (if b0102 then 0 else 1) * 91000 + (if b0103 then 0 else 1) * 91000 + (if b0104 then 0 else 1) * 91000 + (if b0105 then 0 else 1) * 91000 + (if b0106 then 0 else 1) * 91000 + (if b0107 then 0 else 1) * 91000 + (if b0108 then 0 else 1) * 91000 + (if b0109 then 0 else 1) * 91000 + (if b0110 then 0 else 1) * 91000 + (if b0111 then 0 else 1) * 91000 + (if b0112 then 0 else 1) * 91000 + (if b0113 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0125 then 0 else 1) * 91000 + (if b0126 then 0 else 1) * 91000 + (if b0127 then 0 else 1) * 91000 + (if b0128 then 0 else 1) * 91000 + (if b0129 then 0 else 1) * 91000 + (if b0130 then 0 else 1) * 91000 + (if b0131 then 0 else 1) * 91000 + (if b0132 then 0 else 1) * 91000 + (if b0133 then 0 else 1) * 91000 + (if b0134 then 0 else 1) * 91000 + (if b0135 then 0 else 1) * 91000 + (if b0136 then 0 else 1) * 91000 + (if b0137 then 0 else 1) * 91000 + (if b0138 then 0 else 1) * 91000 + (if b0139 then 0 else 1) * 91000 + (if b0140 then 0 else 1) * 91000 + (if b0141 then 0 else 1) * 91000 + (if b0142 then 0 else 1) * 91000 + (if b0143 then 0 else 1) * 91000 + (if b0144 then 0 else 1) * 91000 + (if b0145 then 0 else 1) * 91000 + (if b0146 then 0 else 1) * 91000 + (if b0147 then 0 else 1) * 91000 + (if b0148 then 0 else 1) * 91000 + (if b0149 then 0 else 1) * 91000 + (if b0150 then 0 else 1) * 91000 + (if b0151 then 0 else 1) * 91000 + (if b0152 then 0 else 1) * 91000 + (if b0153 then 0 else 1) * 91000 + (if b0154 then 0 else 1) * 91000 + (if b0155 then 0 else 1) * 91000 + (if b0156 then 0 else 1) * 91000 + (if b0157 then 0 else 1) * 91000 + (if b0158 then 0 else 1) * 91000 + (if b0159 then 0 else 1) * 91000 + (if b0160 then 0 else 1) * 91000 + (if b0161 then 0 else 1) * 91000 + (if b0162 then 0 else 1) * 91000 + (if b0163 then 0 else 1) * 91000 + (if b0164 then 0 else 1) * 91000 + (if b0165 then 0 else 1) * 91000 + (if b0166 then 0 else 1) * 91000 + (if b0167 then 0 else 1) * 91000 + (if b0168 then 0 else 1) * 91000 + (if b0169 then 0 else 1) * 91000 + (if b0170 then 0 else 1) * 91000 + (if b0171 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,0,1,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.875012
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1239680
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0068 then 0 else 1) * 91000 + (if b0069 then 0 else 1) * 91000 + (if b0071 then 0 else 1) * 91000 + (if b0075 then 0 else 1) * 91000 + (if b0077 then 0 else 1) * 91000 + (if b0079 then 0 else 1) * 91000 + (if b0081 then 0 else 1) * 91000 + (if b0082 then 0 else 1) * 91000 + (if b0084 then 0 else 1) * 91000 + (if b0085 then 0 else 1) * 91000 + (if b0088 then 0 else 1) * 91000 + (if b0089 then 0 else 1) * 91000 + (if b0090 then 0 else 1) * 91000 + (if b0091 then 0 else 1) * 91000 + (if b0093 then 0 else 1) * 91000 + (if b0095 then 0 else 1) * 91000 + (if b0096 then 0 else 1) * 91000 + (if b0101 then 0 else 1) * 91000 + (if b0104 then 0 else 1) * 91000 + (if b0105 then 0 else 1) * 91000 + (if b0106 then 0 else 1) * 91000 + (if b0107 then 0 else 1) * 91000 + (if b0108 then 0 else 1) * 91000 + (if b0109 then 0 else 1) * 91000 + (if b0111 then 0 else 1) * 91000 + (if b0113 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0125 then 0 else 1) * 91000 + (if b0126 then 0 else 1) * 91000 + (if b0127 then 0 else 1) * 91000 + (if b0128 then 0 else 1) * 91000 + (if b0129 then 0 else 1) * 91000 + (if b0130 then 0 else 1) * 91000 + (if b0131 then 0 else 1) * 91000 + (if b0132 then 0 else 1) * 91000 + (if b0133 then 0 else 1) * 91000 + (if b0134 then 0 else 1) * 91000 + (if b0135 then 0 else 1) * 91000 + (if b0136 then 0 else 1) * 91000 + (if b0137 then 0 else 1) * 91000 + (if b0138 then 0 else 1) * 91000 + (if b0139 then 0 else 1) * 91000 + (if b0140 then 0 else 1) * 91000 + (if b0141 then 0 else 1) * 91000 + (if b0142 then 0 else 1) * 91000 + (if b0143 then 0 else 1) * 91000 + (if b0144 then 0 else 1) * 91000 + (if b0145 then 0 else 1) * 91000 + (if b0146 then 0 else 1) * 91000 + (if b0147 then 0 else 1) * 91000 + (if b0148 then 0 else 1) * 91000 + (if b0149 then 0 else 1) * 91000 + (if b0150 then 0 else 1) * 91000 + (if b0151 then 0 else 1) * 91000 + (if b0152 then 0 else 1) * 91000 + (if b0153 then 0 else 1) * 91000 + (if b0154 then 0 else 1) * 91000 + (if b0155 then 0 else 1) * 91000 + (if b0156 then 0 else 1) * 91000 + (if b0157 then 0 else 1) * 91000 + (if b0158 then 0 else 1) * 91000 + (if b0159 then 0 else 1) * 91000 + (if b0160 then 0 else 1) * 91000 + (if b0161 then 0 else 1) * 91000 + (if b0162 then 0 else 1) * 91000 + (if b0163 then 0 else 1) * 91000 + (if b0164 then 0 else 1) * 91000 + (if b0165 then 0 else 1) * 91000 + (if b0166 then 0 else 1) * 91000 + (if b0167 then 0 else 1) * 91000 + (if b0168 then 0 else 1) * 91000 + (if b0169 then 0 else 1) * 91000 + (if b0170 then 0 else 1) * 91000 + (if b0171 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 10.291342
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1211190
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0071 then 0 else 1) * 91000 + (if b0075 then 0 else 1) * 91000 + (if b0082 then 0 else 1) * 91000 + (if b0091 then 0 else 1) * 91000 + (if b0107 then 0 else 1) * 91000 + (if b0109 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0125 then 0 else 1) * 91000 + (if b0126 then 0 else 1) * 91000 + (if b0127 then 0 else 1) * 91000 + (if b0128 then 0 else 1) * 91000 + (if b0129 then 0 else 1) * 91000 + (if b0130 then 0 else 1) * 91000 + (if b0131 then 0 else 1) * 91000 + (if b0132 then 0 else 1) * 91000 + (if b0133 then 0 else 1) * 91000 + (if b0134 then 0 else 1) * 91000 + (if b0135 then 0 else 1) * 91000 + (if b0136 then 0 else 1) * 91000 + (if b0137 then 0 else 1) * 91000 + (if b0138 then 0 else 1) * 91000 + (if b0139 then 0 else 1) * 91000 + (if b0140 then 0 else 1) * 91000 + (if b0141 then 0 else 1) * 91000 + (if b0142 then 0 else 1) * 91000 + (if b0143 then 0 else 1) * 91000 + (if b0144 then 0 else 1) * 91000 + (if b0145 then 0 else 1) * 91000 + (if b0146 then 0 else 1) * 91000 + (if b0147 then 0 else 1) * 91000 + (if b0148 then 0 else 1) * 91000 + (if b0149 then 0 else 1) * 91000 + (if b0150 then 0 else 1) * 91000 + (if b0151 then 0 else 1) * 91000 + (if b0152 then 0 else 1) * 91000 + (if b0153 then 0 else 1) * 91000 + (if b0154 then 0 else 1) * 91000 + (if b0155 then 0 else 1) * 91000 + (if b0156 then 0 else 1) * 91000 + (if b0157 then 0 else 1) * 91000 + (if b0158 then 0 else 1) * 91000 + (if b0159 then 0 else 1) * 91000 + (if b0160 then 0 else 1) * 91000 + (if b0161 then 0 else 1) * 91000 + (if b0162 then 0 else 1) * 91000 + (if b0163 then 0 else 1) * 91000 + (if b0164 then 0 else 1) * 91000 + (if b0165 then 0 else 1) * 91000 + (if b0166 then 0 else 1) * 91000 + (if b0167 then 0 else 1) * 91000 + (if b0168 then 0 else 1) * 91000 + (if b0169 then 0 else 1) * 91000 + (if b0170 then 0 else 1) * 91000 + (if b0171 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.177971
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1272650
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0091 then 0 else 1) * 91000 + (if b0107 then 0 else 1) * 91000 + (if b0109 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0125 then 0 else 1) * 91000 + (if b0126 then 0 else 1) * 91000 + (if b0127 then 0 else 1) * 91000 + (if b0128 then 0 else 1) * 91000 + (if b0129 then 0 else 1) * 91000 + (if b0130 then 0 else 1) * 91000 + (if b0131 then 0 else 1) * 91000 + (if b0132 then 0 else 1) * 91000 + (if b0133 then 0 else 1) * 91000 + (if b0134 then 0 else 1) * 91000 + (if b0135 then 0 else 1) * 91000 + (if b0136 then 0 else 1) * 91000 + (if b0137 then 0 else 1) * 91000 + (if b0138 then 0 else 1) * 91000 + (if b0139 then 0 else 1) * 91000 + (if b0140 then 0 else 1) * 91000 + (if b0141 then 0 else 1) * 91000 + (if b0142 then 0 else 1) * 91000 + (if b0143 then 0 else 1) * 91000 + (if b0144 then 0 else 1) * 91000 + (if b0145 then 0 else 1) * 91000 + (if b0146 then 0 else 1) * 91000 + (if b0147 then 0 else 1) * 91000 + (if b0148 then 0 else 1) * 91000 + (if b0149 then 0 else 1) * 91000 + (if b0150 then 0 else 1) * 91000 + (if b0151 then 0 else 1) * 91000 + (if b0152 then 0 else 1) * 91000 + (if b0153 then 0 else 1) * 91000 + (if b0154 then 0 else 1) * 91000 + (if b0155 then 0 else 1) * 91000 + (if b0156 then 0 else 1) * 91000 + (if b0157 then 0 else 1) * 91000 + (if b0158 then 0 else 1) * 91000 + (if b0159 then 0 else 1) * 91000 + (if b0160 then 0 else 1) * 91000 + (if b0161 then 0 else 1) * 91000 + (if b0162 then 0 else 1) * 91000 + (if b0163 then 0 else 1) * 91000 + (if b0164 then 0 else 1) * 91000 + (if b0165 then 0 else 1) * 91000 + (if b0166 then 0 else 1) * 91000 + (if b0167 then 0 else 1) * 91000 + (if b0168 then 0 else 1) * 91000 + (if b0169 then 0 else 1) * 91000 + (if b0170 then 0 else 1) * 91000 + (if b0171 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.618839
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1238280
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0004 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0006 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0013 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0015 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0027 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0029 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0038 then 0 else 1) * 91000 + (if b0039 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0041 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0052 then 0 else 1) * 91000 + (if b0053 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0055 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0125 then 0 else 1) * 91000 + (if b0126 then 0 else 1) * 91000 + (if b0127 then 0 else 1) * 91000 + (if b0128 then 0 else 1) * 91000 + (if b0129 then 0 else 1) * 91000 + (if b0130 then 0 else 1) * 91000 + (if b0131 then 0 else 1) * 91000 + (if b0132 then 0 else 1) * 91000 + (if b0133 then 0 else 1) * 91000 + (if b0134 then 0 else 1) * 91000 + (if b0135 then 0 else 1) * 91000 + (if b0136 then 0 else 1) * 91000 + (if b0137 then 0 else 1) * 91000 + (if b0138 then 0 else 1) * 91000 + (if b0139 then 0 else 1) * 91000 + (if b0140 then 0 else 1) * 91000 + (if b0141 then 0 else 1) * 91000 + (if b0142 then 0 else 1) * 91000 + (if b0143 then 0 else 1) * 91000 + (if b0144 then 0 else 1) * 91000 + (if b0145 then 0 else 1) * 91000 + (if b0146 then 0 else 1) * 91000 + (if b0147 then 0 else 1) * 91000 + (if b0148 then 0 else 1) * 91000 + (if b0149 then 0 else 1) * 91000 + (if b0150 then 0 else 1) * 91000 + (if b0151 then 0 else 1) * 91000 + (if b0152 then 0 else 1) * 91000 + (if b0153 then 0 else 1) * 91000 + (if b0154 then 0 else 1) * 91000 + (if b0155 then 0 else 1) * 91000 + (if b0156 then 0 else 1) * 91000 + (if b0157 then 0 else 1) * 91000 + (if b0158 then 0 else 1) * 91000 + (if b0159 then 0 else 1) * 91000 + (if b0160 then 0 else 1) * 91000 + (if b0161 then 0 else 1) * 91000 + (if b0162 then 0 else 1) * 91000 + (if b0163 then 0 else 1) * 91000 + (if b0164 then 0 else 1) * 91000 + (if b0165 then 0 else 1) * 91000 + (if b0166 then 0 else 1) * 91000 + (if b0167 then 0 else 1) * 91000 + (if b0168 then 0 else 1) * 91000 + (if b0169 then 0 else 1) * 91000 + (if b0170 then 0 else 1) * 91000 + (if b0171 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0190 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0202 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Prover Time taken = 9.838669
Added Horn clause: 5 => 6
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 8
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 10 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 17
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1223700
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0172 then 0 else 1) * 91000 + (if b0173 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0188 then 0 else 1) * 91000 + (if b0189 then 0 else 1) * 91000 + (if b0191 then 0 else 1) * 91000 + (if b0192 then 0 else 1) * 91000 + (if b0193 then 0 else 1) * 91000 + (if b0194 then 0 else 1) * 91000 + (if b0195 then 0 else 1) * 91000 + (if b0196 then 0 else 1) * 91000 + (if b0197 then 0 else 1) * 91000 + (if b0198 then 0 else 1) * 91000 + (if b0199 then 0 else 1) * 91000 + (if b0200 then 0 else 1) * 91000 + (if b0201 then 0 else 1) * 91000 + (if b0203 then 0 else 1) * 91000 + (if b0204 then 0 else 1) * 91000 + (if b0205 then 0 else 1) * 91000 + (if b0206 then 0 else 1) * 91000 + (if b0207 then 0 else 1) * 91000 + (if b0208 then 0 else 1) * 91000 + (if b0209 then 0 else 1) * 91000 + (if b0210 then 0 else 1) * 91000 + (if b0211 then 0 else 1) * 91000 + (if b0212 then 0 else 1) * 91000 + (if b0213 then 0 else 1) * 91000 + (if b0214 then 0 else 1) * 91000 + (if b0215 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Prover Time taken = 9.398559
Added Horn clause: 7 && 19 && 0 => 20
Added Horn clause: 12 && 21 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 22
Added Horn clause: 7 && 23 && 0 && 24 && 18 && 0 && 0 && 0 && 0 => 25
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1222320
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0114 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Prover Time taken = 5.780474
Added Horn clause: 10 && 26 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 27
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1216580
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0020 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0115 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Prover Time taken = 7.089895
Added Horn clause: 28 => 29
Added Horn clause: 10 && 30 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 31
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1224940
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0021 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Prover Time taken = 6.390681
Added Horn clause: 32 => 33
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1251160
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 91000 + (if b0001 then 0 else 1) * 91000 + (if b0002 then 0 else 1) * 91000 + (if b0003 then 0 else 1) * 91000 + (if b0005 then 0 else 1) * 91000 + (if b0007 then 0 else 1) * 91000 + (if b0008 then 0 else 1) * 91000 + (if b0009 then 0 else 1) * 91000 + (if b0010 then 0 else 1) * 91000 + (if b0011 then 0 else 1) * 91000 + (if b0012 then 0 else 1) * 91000 + (if b0014 then 0 else 1) * 91000 + (if b0016 then 0 else 1) * 91000 + (if b0017 then 0 else 1) * 91000 + (if b0018 then 0 else 1) * 91000 + (if b0019 then 0 else 1) * 91000 + (if b0022 then 0 else 1) * 91000 + (if b0023 then 0 else 1) * 91000 + (if b0024 then 0 else 1) * 91000 + (if b0025 then 0 else 1) * 91000 + (if b0026 then 0 else 1) * 91000 + (if b0028 then 0 else 1) * 91000 + (if b0030 then 0 else 1) * 91000 + (if b0031 then 0 else 1) * 91000 + (if b0032 then 0 else 1) * 91000 + (if b0033 then 0 else 1) * 91000 + (if b0034 then 0 else 1) * 91000 + (if b0035 then 0 else 1) * 91000 + (if b0036 then 0 else 1) * 91000 + (if b0037 then 0 else 1) * 91000 + (if b0040 then 0 else 1) * 91000 + (if b0042 then 0 else 1) * 91000 + (if b0043 then 0 else 1) * 91000 + (if b0044 then 0 else 1) * 91000 + (if b0045 then 0 else 1) * 91000 + (if b0046 then 0 else 1) * 91000 + (if b0047 then 0 else 1) * 91000 + (if b0048 then 0 else 1) * 91000 + (if b0049 then 0 else 1) * 91000 + (if b0050 then 0 else 1) * 91000 + (if b0051 then 0 else 1) * 91000 + (if b0054 then 0 else 1) * 91000 + (if b0056 then 0 else 1) * 91000 + (if b0057 then 0 else 1) * 91000 + (if b0058 then 0 else 1) * 91000 + (if b0059 then 0 else 1) * 91000 + (if b0060 then 0 else 1) * 91000 + (if b0061 then 0 else 1) * 91000 + (if b0062 then 0 else 1) * 91000 + (if b0063 then 0 else 1) * 91000 + (if b0064 then 0 else 1) * 91000 + (if b0116 then 0 else 1) * 91000 + (if b0117 then 0 else 1) * 91000 + (if b0118 then 0 else 1) * 91000 + (if b0119 then 0 else 1) * 91000 + (if b0120 then 0 else 1) * 91000 + (if b0121 then 0 else 1) * 91000 + (if b0122 then 0 else 1) * 91000 + (if b0123 then 0 else 1) * 91000 + (if b0124 then 0 else 1) * 91000 + (if b0174 then 0 else 1) * 91000 + (if b0175 then 0 else 1) * 91000 + (if b0176 then 0 else 1) * 91000 + (if b0177 then 0 else 1) * 91000 + (if b0178 then 0 else 1) * 91000 + (if b0179 then 0 else 1) * 91000 + (if b0180 then 0 else 1) * 91000 + (if b0181 then 0 else 1) * 91000 + (if b0182 then 0 else 1) * 91000 + (if b0183 then 0 else 1) * 91000 + (if b0184 then 0 else 1) * 91000 + (if b0185 then 0 else 1) * 91000 + (if b0186 then 0 else 1) * 91000 + (if b0187 then 0 else 1) * 91000 + (if b0216 then 0 else 1) * 91000 + (if b0217 then 0 else 1) * 91000 + (if b0218 then 0 else 1) * 91000 + (if b0219 then 0 else 1) * 91000 + (if b0220 then 0 else 1) * 91000 + (if b0221 then 0 else 1) * 91000 + (if b0222 then 0 else 1) * 91000 + (if b0223 then 0 else 1) * 91000 + (if b0224 then 0 else 1) * 91000 + (if b0225 then 0 else 1) * 91000 + (if b0226 then 0 else 1) * 91000 + (if b0227 then 0 else 1) * 91000 < 441
}
Prover Time taken = 6.424949
Prover time = 84.08
Number of prover queries = 11
Learner time = 1.23
Number of learner queries = 10
Total time: 86.15
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:17
verified

Boogie program verifier finished with 1 verified, 0 errors
6.14user 4.43system 1:27.82elapsed 12%CPU (0avgtext+0avgdata 83004maxresident)k
0inputs+824outputs (1major+98160minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/syr2k/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:11:32 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 221
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.193245
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1206900
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0066 then 0 else 1) * 88000 + (if b0067 then 0 else 1) * 88000 + (if b0068 then 0 else 1) * 88000 + (if b0069 then 0 else 1) * 88000 + (if b0070 then 0 else 1) * 88000 + (if b0071 then 0 else 1) * 88000 + (if b0072 then 0 else 1) * 88000 + (if b0073 then 0 else 1) * 88000 + (if b0074 then 0 else 1) * 88000 + (if b0075 then 0 else 1) * 88000 + (if b0076 then 0 else 1) * 88000 + (if b0077 then 0 else 1) * 88000 + (if b0078 then 0 else 1) * 88000 + (if b0079 then 0 else 1) * 88000 + (if b0080 then 0 else 1) * 88000 + (if b0081 then 0 else 1) * 88000 + (if b0082 then 0 else 1) * 88000 + (if b0083 then 0 else 1) * 88000 + (if b0084 then 0 else 1) * 88000 + (if b0085 then 0 else 1) * 88000 + (if b0086 then 0 else 1) * 88000 + (if b0087 then 0 else 1) * 88000 + (if b0088 then 0 else 1) * 88000 + (if b0089 then 0 else 1) * 88000 + (if b0090 then 0 else 1) * 88000 + (if b0091 then 0 else 1) * 88000 + (if b0092 then 0 else 1) * 88000 + (if b0093 then 0 else 1) * 88000 + (if b0094 then 0 else 1) * 88000 + (if b0095 then 0 else 1) * 88000 + (if b0096 then 0 else 1) * 88000 + (if b0097 then 0 else 1) * 88000 + (if b0098 then 0 else 1) * 88000 + (if b0099 then 0 else 1) * 88000 + (if b0100 then 0 else 1) * 88000 + (if b0101 then 0 else 1) * 88000 + (if b0102 then 0 else 1) * 88000 + (if b0103 then 0 else 1) * 88000 + (if b0104 then 0 else 1) * 88000 + (if b0105 then 0 else 1) * 88000 + (if b0106 then 0 else 1) * 88000 + (if b0107 then 0 else 1) * 88000 + (if b0108 then 0 else 1) * 88000 + (if b0109 then 0 else 1) * 88000 + (if b0110 then 0 else 1) * 88000 + (if b0111 then 0 else 1) * 88000 + (if b0112 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.181499
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1221810
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0066 then 0 else 1) * 88000 + (if b0067 then 0 else 1) * 88000 + (if b0068 then 0 else 1) * 88000 + (if b0069 then 0 else 1) * 88000 + (if b0072 then 0 else 1) * 88000 + (if b0073 then 0 else 1) * 88000 + (if b0074 then 0 else 1) * 88000 + (if b0075 then 0 else 1) * 88000 + (if b0076 then 0 else 1) * 88000 + (if b0077 then 0 else 1) * 88000 + (if b0078 then 0 else 1) * 88000 + (if b0082 then 0 else 1) * 88000 + (if b0084 then 0 else 1) * 88000 + (if b0087 then 0 else 1) * 88000 + (if b0088 then 0 else 1) * 88000 + (if b0089 then 0 else 1) * 88000 + (if b0090 then 0 else 1) * 88000 + (if b0091 then 0 else 1) * 88000 + (if b0092 then 0 else 1) * 88000 + (if b0093 then 0 else 1) * 88000 + (if b0095 then 0 else 1) * 88000 + (if b0096 then 0 else 1) * 88000 + (if b0097 then 0 else 1) * 88000 + (if b0098 then 0 else 1) * 88000 + (if b0099 then 0 else 1) * 88000 + (if b0100 then 0 else 1) * 88000 + (if b0105 then 0 else 1) * 88000 + (if b0106 then 0 else 1) * 88000 + (if b0108 then 0 else 1) * 88000 + (if b0111 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.901225
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1219590
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0066 then 0 else 1) * 88000 + (if b0076 then 0 else 1) * 88000 + (if b0087 then 0 else 1) * 88000 + (if b0088 then 0 else 1) * 88000 + (if b0089 then 0 else 1) * 88000 + (if b0091 then 0 else 1) * 88000 + (if b0093 then 0 else 1) * 88000 + (if b0096 then 0 else 1) * 88000 + (if b0097 then 0 else 1) * 88000 + (if b0099 then 0 else 1) * 88000 + (if b0100 then 0 else 1) * 88000 + (if b0105 then 0 else 1) * 88000 + (if b0106 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 11.068515
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1207450
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0076 then 0 else 1) * 88000 + (if b0087 then 0 else 1) * 88000 + (if b0089 then 0 else 1) * 88000 + (if b0099 then 0 else 1) * 88000 + (if b0100 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 10.615812
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1216670
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0076 then 0 else 1) * 88000 + (if b0087 then 0 else 1) * 88000 + (if b0099 then 0 else 1) * 88000 + (if b0100 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.965375
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1208650
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0076 then 0 else 1) * 88000 + (if b0087 then 0 else 1) * 88000 + (if b0099 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 9.481685
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1207470
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0076 then 0 else 1) * 88000 + (if b0087 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.78383
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1210350
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0004 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0006 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0011 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0039 then 0 else 1) * 88000 + (if b0040 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0042 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0053 then 0 else 1) * 88000 + (if b0054 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0056 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0124 then 0 else 1) * 88000 + (if b0125 then 0 else 1) * 88000 + (if b0126 then 0 else 1) * 88000 + (if b0127 then 0 else 1) * 88000 + (if b0128 then 0 else 1) * 88000 + (if b0129 then 0 else 1) * 88000 + (if b0130 then 0 else 1) * 88000 + (if b0131 then 0 else 1) * 88000 + (if b0132 then 0 else 1) * 88000 + (if b0133 then 0 else 1) * 88000 + (if b0134 then 0 else 1) * 88000 + (if b0135 then 0 else 1) * 88000 + (if b0136 then 0 else 1) * 88000 + (if b0137 then 0 else 1) * 88000 + (if b0138 then 0 else 1) * 88000 + (if b0139 then 0 else 1) * 88000 + (if b0140 then 0 else 1) * 88000 + (if b0141 then 0 else 1) * 88000 + (if b0142 then 0 else 1) * 88000 + (if b0143 then 0 else 1) * 88000 + (if b0144 then 0 else 1) * 88000 + (if b0145 then 0 else 1) * 88000 + (if b0146 then 0 else 1) * 88000 + (if b0147 then 0 else 1) * 88000 + (if b0148 then 0 else 1) * 88000 + (if b0149 then 0 else 1) * 88000 + (if b0150 then 0 else 1) * 88000 + (if b0151 then 0 else 1) * 88000 + (if b0152 then 0 else 1) * 88000 + (if b0153 then 0 else 1) * 88000 + (if b0154 then 0 else 1) * 88000 + (if b0155 then 0 else 1) * 88000 + (if b0156 then 0 else 1) * 88000 + (if b0157 then 0 else 1) * 88000 + (if b0158 then 0 else 1) * 88000 + (if b0159 then 0 else 1) * 88000 + (if b0160 then 0 else 1) * 88000 + (if b0161 then 0 else 1) * 88000 + (if b0162 then 0 else 1) * 88000 + (if b0163 then 0 else 1) * 88000 + (if b0164 then 0 else 1) * 88000 + (if b0165 then 0 else 1) * 88000 + (if b0166 then 0 else 1) * 88000 + (if b0167 then 0 else 1) * 88000 + (if b0168 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0182 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0185 then 0 else 1) * 88000 + (if b0186 then 0 else 1) * 88000 + (if b0187 then 0 else 1) * 88000 + (if b0188 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0191 then 0 else 1) * 88000 + (if b0192 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0195 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0203 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0206 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0208 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Prover Time taken = 10.808644
Added Horn clause: 8 => 9
Added Horn clause: 10 => 11
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 12 && 0 && 0 => 15
Added Horn clause: 12 && 0 && 0 && 0 && 0 => 16
Added Horn clause: 12 && 0 && 0 && 0 && 0 && 0 && 0 => 17
Added Horn clause: 18 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 19
Added Horn clause: 18 && 0 && 0 && 0 && 0 && 0 && 0 => 20
Added Horn clause: 18 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 21
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1226330
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0014 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0016 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0026 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0028 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0030 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0122 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0189 then 0 else 1) * 88000 + (if b0190 then 0 else 1) * 88000 + (if b0193 then 0 else 1) * 88000 + (if b0194 then 0 else 1) * 88000 + (if b0196 then 0 else 1) * 88000 + (if b0197 then 0 else 1) * 88000 + (if b0198 then 0 else 1) * 88000 + (if b0199 then 0 else 1) * 88000 + (if b0200 then 0 else 1) * 88000 + (if b0201 then 0 else 1) * 88000 + (if b0202 then 0 else 1) * 88000 + (if b0204 then 0 else 1) * 88000 + (if b0205 then 0 else 1) * 88000 + (if b0207 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Prover Time taken = 8.740593
Added Horn clause: 22 && 23 && 11 => 24
Added Horn clause: 25 && 26 && 11 && 0 && 0 && 0 && 0 && 0 && 0 => 27
Added Horn clause: 25 && 28 && 11 && 15 && 0 && 0 && 0 && 0 && 0 => 29
Added Horn clause: 22 && 30 && 11 => 31
Added Horn clause: 32 && 33 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 34
Added Horn clause: 32 && 35 && 11 && 36 && 0 && 0 && 0 && 0 && 0 => 37
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1220600
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0012 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0169 then 0 else 1) * 88000 + (if b0170 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Prover Time taken = 7.451118
Added Horn clause: 18 && 27 && 11 && 0 && 0 && 0 && 0 && 0 && 0 => 38
Added Horn clause: 39 && 27 && 11 && 0 && 0 && 0 && 0 && 0 && 0 => 40
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1230300
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0114 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Prover Time taken = 9.260733
Added Horn clause: 39 && 41 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 42
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1228330
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0022 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0113 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Prover Time taken = 11.827348
Added Horn clause: 43 => 44
Added Horn clause: 39 && 45 && 46 && 0 && 0 && 0 && 0 && 0 && 0 => 47
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1226540
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0021 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Prover Time taken = 8.7703
Added Horn clause: 48 => 49
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1240910
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 88000 + (if b0001 then 0 else 1) * 88000 + (if b0002 then 0 else 1) * 88000 + (if b0003 then 0 else 1) * 88000 + (if b0005 then 0 else 1) * 88000 + (if b0007 then 0 else 1) * 88000 + (if b0008 then 0 else 1) * 88000 + (if b0009 then 0 else 1) * 88000 + (if b0010 then 0 else 1) * 88000 + (if b0013 then 0 else 1) * 88000 + (if b0015 then 0 else 1) * 88000 + (if b0017 then 0 else 1) * 88000 + (if b0018 then 0 else 1) * 88000 + (if b0019 then 0 else 1) * 88000 + (if b0020 then 0 else 1) * 88000 + (if b0023 then 0 else 1) * 88000 + (if b0024 then 0 else 1) * 88000 + (if b0025 then 0 else 1) * 88000 + (if b0027 then 0 else 1) * 88000 + (if b0029 then 0 else 1) * 88000 + (if b0031 then 0 else 1) * 88000 + (if b0032 then 0 else 1) * 88000 + (if b0033 then 0 else 1) * 88000 + (if b0034 then 0 else 1) * 88000 + (if b0035 then 0 else 1) * 88000 + (if b0036 then 0 else 1) * 88000 + (if b0037 then 0 else 1) * 88000 + (if b0038 then 0 else 1) * 88000 + (if b0041 then 0 else 1) * 88000 + (if b0043 then 0 else 1) * 88000 + (if b0044 then 0 else 1) * 88000 + (if b0045 then 0 else 1) * 88000 + (if b0046 then 0 else 1) * 88000 + (if b0047 then 0 else 1) * 88000 + (if b0048 then 0 else 1) * 88000 + (if b0049 then 0 else 1) * 88000 + (if b0050 then 0 else 1) * 88000 + (if b0051 then 0 else 1) * 88000 + (if b0052 then 0 else 1) * 88000 + (if b0055 then 0 else 1) * 88000 + (if b0057 then 0 else 1) * 88000 + (if b0058 then 0 else 1) * 88000 + (if b0059 then 0 else 1) * 88000 + (if b0060 then 0 else 1) * 88000 + (if b0061 then 0 else 1) * 88000 + (if b0062 then 0 else 1) * 88000 + (if b0063 then 0 else 1) * 88000 + (if b0064 then 0 else 1) * 88000 + (if b0065 then 0 else 1) * 88000 + (if b0115 then 0 else 1) * 88000 + (if b0116 then 0 else 1) * 88000 + (if b0117 then 0 else 1) * 88000 + (if b0118 then 0 else 1) * 88000 + (if b0119 then 0 else 1) * 88000 + (if b0120 then 0 else 1) * 88000 + (if b0121 then 0 else 1) * 88000 + (if b0123 then 0 else 1) * 88000 + (if b0171 then 0 else 1) * 88000 + (if b0172 then 0 else 1) * 88000 + (if b0173 then 0 else 1) * 88000 + (if b0174 then 0 else 1) * 88000 + (if b0175 then 0 else 1) * 88000 + (if b0176 then 0 else 1) * 88000 + (if b0177 then 0 else 1) * 88000 + (if b0178 then 0 else 1) * 88000 + (if b0179 then 0 else 1) * 88000 + (if b0180 then 0 else 1) * 88000 + (if b0181 then 0 else 1) * 88000 + (if b0183 then 0 else 1) * 88000 + (if b0184 then 0 else 1) * 88000 + (if b0209 then 0 else 1) * 88000 + (if b0210 then 0 else 1) * 88000 + (if b0211 then 0 else 1) * 88000 + (if b0212 then 0 else 1) * 88000 + (if b0213 then 0 else 1) * 88000 + (if b0214 then 0 else 1) * 88000 + (if b0215 then 0 else 1) * 88000 + (if b0216 then 0 else 1) * 88000 + (if b0217 then 0 else 1) * 88000 + (if b0218 then 0 else 1) * 88000 + (if b0219 then 0 else 1) * 88000 + (if b0220 then 0 else 1) * 88000 < 441
}
Prover Time taken = 11.05279
Prover time = 137.10
Number of prover queries = 15
Learner time = 1.71
Number of learner queries = 14
Total time: 140.05
Number of positive examples:8
Number of negative examples:0
Number of Horn clauses:22
verified

Boogie program verifier finished with 1 verified, 0 errors
8.34user 5.78system 2:21.65elapsed 9%CPU (0avgtext+0avgdata 79568maxresident)k
0inputs+1192outputs (1major+126148minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/syrk/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:13:54 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 365
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.198258
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1221910
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0163 then 0 else 1) * 146000 + (if b0164 then 0 else 1) * 146000 + (if b0165 then 0 else 1) * 146000 + (if b0166 then 0 else 1) * 146000 + (if b0167 then 0 else 1) * 146000 + (if b0168 then 0 else 1) * 146000 + (if b0169 then 0 else 1) * 146000 + (if b0170 then 0 else 1) * 146000 + (if b0171 then 0 else 1) * 146000 + (if b0172 then 0 else 1) * 146000 + (if b0173 then 0 else 1) * 146000 + (if b0174 then 0 else 1) * 146000 + (if b0175 then 0 else 1) * 146000 + (if b0176 then 0 else 1) * 146000 + (if b0177 then 0 else 1) * 146000 + (if b0178 then 0 else 1) * 146000 + (if b0179 then 0 else 1) * 146000 + (if b0180 then 0 else 1) * 146000 + (if b0181 then 0 else 1) * 146000 + (if b0182 then 0 else 1) * 146000 + (if b0183 then 0 else 1) * 146000 + (if b0184 then 0 else 1) * 146000 + (if b0185 then 0 else 1) * 146000 + (if b0186 then 0 else 1) * 146000 + (if b0187 then 0 else 1) * 146000 + (if b0188 then 0 else 1) * 146000 + (if b0189 then 0 else 1) * 146000 + (if b0190 then 0 else 1) * 146000 + (if b0191 then 0 else 1) * 146000 + (if b0192 then 0 else 1) * 146000 + (if b0193 then 0 else 1) * 146000 + (if b0194 then 0 else 1) * 146000 + (if b0195 then 0 else 1) * 146000 + (if b0196 then 0 else 1) * 146000 + (if b0197 then 0 else 1) * 146000 + (if b0198 then 0 else 1) * 146000 + (if b0199 then 0 else 1) * 146000 + (if b0200 then 0 else 1) * 146000 + (if b0201 then 0 else 1) * 146000 + (if b0202 then 0 else 1) * 146000 + (if b0203 then 0 else 1) * 146000 + (if b0204 then 0 else 1) * 146000 + (if b0205 then 0 else 1) * 146000 + (if b0206 then 0 else 1) * 146000 + (if b0207 then 0 else 1) * 146000 + (if b0208 then 0 else 1) * 146000 + (if b0209 then 0 else 1) * 146000 + (if b0210 then 0 else 1) * 146000 + (if b0211 then 0 else 1) * 146000 + (if b0212 then 0 else 1) * 146000 + (if b0213 then 0 else 1) * 146000 + (if b0214 then 0 else 1) * 146000 + (if b0215 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0226 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0229 then 0 else 1) * 146000 + (if b0230 then 0 else 1) * 146000 + (if b0231 then 0 else 1) * 146000 + (if b0232 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0236 then 0 else 1) * 146000 + (if b0237 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0240 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0242 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0244 then 0 else 1) * 146000 + (if b0245 then 0 else 1) * 146000 + (if b0246 then 0 else 1) * 146000 + (if b0247 then 0 else 1) * 146000 + (if b0248 then 0 else 1) * 146000 + (if b0249 then 0 else 1) * 146000 + (if b0250 then 0 else 1) * 146000 + (if b0251 then 0 else 1) * 146000 + (if b0252 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0254 then 0 else 1) * 146000 + (if b0255 then 0 else 1) * 146000 + (if b0256 then 0 else 1) * 146000 + (if b0257 then 0 else 1) * 146000 + (if b0258 then 0 else 1) * 146000 + (if b0259 then 0 else 1) * 146000 + (if b0260 then 0 else 1) * 146000 + (if b0261 then 0 else 1) * 146000 + (if b0262 then 0 else 1) * 146000 + (if b0263 then 0 else 1) * 146000 + (if b0264 then 0 else 1) * 146000 + (if b0265 then 0 else 1) * 146000 + (if b0266 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0268 then 0 else 1) * 146000 + (if b0269 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0273 then 0 else 1) * 146000 + (if b0274 then 0 else 1) * 146000 + (if b0275 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 25.149217
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1254470
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0165 then 0 else 1) * 146000 + (if b0166 then 0 else 1) * 146000 + (if b0167 then 0 else 1) * 146000 + (if b0169 then 0 else 1) * 146000 + (if b0172 then 0 else 1) * 146000 + (if b0173 then 0 else 1) * 146000 + (if b0174 then 0 else 1) * 146000 + (if b0175 then 0 else 1) * 146000 + (if b0176 then 0 else 1) * 146000 + (if b0178 then 0 else 1) * 146000 + (if b0179 then 0 else 1) * 146000 + (if b0181 then 0 else 1) * 146000 + (if b0182 then 0 else 1) * 146000 + (if b0184 then 0 else 1) * 146000 + (if b0187 then 0 else 1) * 146000 + (if b0188 then 0 else 1) * 146000 + (if b0196 then 0 else 1) * 146000 + (if b0199 then 0 else 1) * 146000 + (if b0200 then 0 else 1) * 146000 + (if b0201 then 0 else 1) * 146000 + (if b0204 then 0 else 1) * 146000 + (if b0205 then 0 else 1) * 146000 + (if b0212 then 0 else 1) * 146000 + (if b0214 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0226 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0229 then 0 else 1) * 146000 + (if b0230 then 0 else 1) * 146000 + (if b0231 then 0 else 1) * 146000 + (if b0232 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0236 then 0 else 1) * 146000 + (if b0237 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0240 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0242 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0244 then 0 else 1) * 146000 + (if b0245 then 0 else 1) * 146000 + (if b0246 then 0 else 1) * 146000 + (if b0247 then 0 else 1) * 146000 + (if b0248 then 0 else 1) * 146000 + (if b0249 then 0 else 1) * 146000 + (if b0250 then 0 else 1) * 146000 + (if b0251 then 0 else 1) * 146000 + (if b0252 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0254 then 0 else 1) * 146000 + (if b0255 then 0 else 1) * 146000 + (if b0256 then 0 else 1) * 146000 + (if b0257 then 0 else 1) * 146000 + (if b0258 then 0 else 1) * 146000 + (if b0259 then 0 else 1) * 146000 + (if b0260 then 0 else 1) * 146000 + (if b0261 then 0 else 1) * 146000 + (if b0262 then 0 else 1) * 146000 + (if b0263 then 0 else 1) * 146000 + (if b0264 then 0 else 1) * 146000 + (if b0265 then 0 else 1) * 146000 + (if b0266 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0268 then 0 else 1) * 146000 + (if b0269 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0273 then 0 else 1) * 146000 + (if b0274 then 0 else 1) * 146000 + (if b0275 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 24.583619
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1233430
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0174 then 0 else 1) * 146000 + (if b0181 then 0 else 1) * 146000 + (if b0182 then 0 else 1) * 146000 + (if b0184 then 0 else 1) * 146000 + (if b0196 then 0 else 1) * 146000 + (if b0201 then 0 else 1) * 146000 + (if b0205 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0226 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0229 then 0 else 1) * 146000 + (if b0230 then 0 else 1) * 146000 + (if b0231 then 0 else 1) * 146000 + (if b0232 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0236 then 0 else 1) * 146000 + (if b0237 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0240 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0242 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0244 then 0 else 1) * 146000 + (if b0245 then 0 else 1) * 146000 + (if b0246 then 0 else 1) * 146000 + (if b0247 then 0 else 1) * 146000 + (if b0248 then 0 else 1) * 146000 + (if b0249 then 0 else 1) * 146000 + (if b0250 then 0 else 1) * 146000 + (if b0251 then 0 else 1) * 146000 + (if b0252 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0254 then 0 else 1) * 146000 + (if b0255 then 0 else 1) * 146000 + (if b0256 then 0 else 1) * 146000 + (if b0257 then 0 else 1) * 146000 + (if b0258 then 0 else 1) * 146000 + (if b0259 then 0 else 1) * 146000 + (if b0260 then 0 else 1) * 146000 + (if b0261 then 0 else 1) * 146000 + (if b0262 then 0 else 1) * 146000 + (if b0263 then 0 else 1) * 146000 + (if b0264 then 0 else 1) * 146000 + (if b0265 then 0 else 1) * 146000 + (if b0266 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0268 then 0 else 1) * 146000 + (if b0269 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0273 then 0 else 1) * 146000 + (if b0274 then 0 else 1) * 146000 + (if b0275 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 21.679789
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1305760
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0182 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0226 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0229 then 0 else 1) * 146000 + (if b0230 then 0 else 1) * 146000 + (if b0231 then 0 else 1) * 146000 + (if b0232 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0236 then 0 else 1) * 146000 + (if b0237 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0240 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0242 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0244 then 0 else 1) * 146000 + (if b0245 then 0 else 1) * 146000 + (if b0246 then 0 else 1) * 146000 + (if b0247 then 0 else 1) * 146000 + (if b0248 then 0 else 1) * 146000 + (if b0249 then 0 else 1) * 146000 + (if b0250 then 0 else 1) * 146000 + (if b0251 then 0 else 1) * 146000 + (if b0252 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0254 then 0 else 1) * 146000 + (if b0255 then 0 else 1) * 146000 + (if b0256 then 0 else 1) * 146000 + (if b0257 then 0 else 1) * 146000 + (if b0258 then 0 else 1) * 146000 + (if b0259 then 0 else 1) * 146000 + (if b0260 then 0 else 1) * 146000 + (if b0261 then 0 else 1) * 146000 + (if b0262 then 0 else 1) * 146000 + (if b0263 then 0 else 1) * 146000 + (if b0264 then 0 else 1) * 146000 + (if b0265 then 0 else 1) * 146000 + (if b0266 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0268 then 0 else 1) * 146000 + (if b0269 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0273 then 0 else 1) * 146000 + (if b0274 then 0 else 1) * 146000 + (if b0275 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 27.292856
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1272040
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0004 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0006 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0013 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0015 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0058 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0080 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0135 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0149 then 0 else 1) * 146000 + (if b0150 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0152 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0226 then 0 else 1) * 146000 + (if b0227 then 0 else 1) * 146000 + (if b0228 then 0 else 1) * 146000 + (if b0229 then 0 else 1) * 146000 + (if b0230 then 0 else 1) * 146000 + (if b0231 then 0 else 1) * 146000 + (if b0232 then 0 else 1) * 146000 + (if b0233 then 0 else 1) * 146000 + (if b0234 then 0 else 1) * 146000 + (if b0235 then 0 else 1) * 146000 + (if b0236 then 0 else 1) * 146000 + (if b0237 then 0 else 1) * 146000 + (if b0238 then 0 else 1) * 146000 + (if b0239 then 0 else 1) * 146000 + (if b0240 then 0 else 1) * 146000 + (if b0241 then 0 else 1) * 146000 + (if b0242 then 0 else 1) * 146000 + (if b0243 then 0 else 1) * 146000 + (if b0244 then 0 else 1) * 146000 + (if b0245 then 0 else 1) * 146000 + (if b0246 then 0 else 1) * 146000 + (if b0247 then 0 else 1) * 146000 + (if b0248 then 0 else 1) * 146000 + (if b0249 then 0 else 1) * 146000 + (if b0250 then 0 else 1) * 146000 + (if b0251 then 0 else 1) * 146000 + (if b0252 then 0 else 1) * 146000 + (if b0253 then 0 else 1) * 146000 + (if b0254 then 0 else 1) * 146000 + (if b0255 then 0 else 1) * 146000 + (if b0256 then 0 else 1) * 146000 + (if b0257 then 0 else 1) * 146000 + (if b0258 then 0 else 1) * 146000 + (if b0259 then 0 else 1) * 146000 + (if b0260 then 0 else 1) * 146000 + (if b0261 then 0 else 1) * 146000 + (if b0262 then 0 else 1) * 146000 + (if b0263 then 0 else 1) * 146000 + (if b0264 then 0 else 1) * 146000 + (if b0265 then 0 else 1) * 146000 + (if b0266 then 0 else 1) * 146000 + (if b0267 then 0 else 1) * 146000 + (if b0268 then 0 else 1) * 146000 + (if b0269 then 0 else 1) * 146000 + (if b0270 then 0 else 1) * 146000 + (if b0271 then 0 else 1) * 146000 + (if b0272 then 0 else 1) * 146000 + (if b0273 then 0 else 1) * 146000 + (if b0274 then 0 else 1) * 146000 + (if b0275 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0292 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0294 then 0 else 1) * 146000 + (if b0295 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0297 then 0 else 1) * 146000 + (if b0298 then 0 else 1) * 146000 + (if b0299 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0311 then 0 else 1) * 146000 + (if b0312 then 0 else 1) * 146000 + (if b0313 then 0 else 1) * 146000 + (if b0314 then 0 else 1) * 146000 + (if b0315 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0318 then 0 else 1) * 146000 + (if b0319 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 24.575349
Added Horn clause: 5 => 6
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 8
Added Horn clause: 7 && 0 && 0 => 9
Added Horn clause: 10 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 10 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1311560
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0027 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0029 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0040 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0042 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0081 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0083 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0123 then 0 else 1) * 146000 + (if b0124 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0126 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0275 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0290 then 0 else 1) * 146000 + (if b0291 then 0 else 1) * 146000 + (if b0293 then 0 else 1) * 146000 + (if b0296 then 0 else 1) * 146000 + (if b0300 then 0 else 1) * 146000 + (if b0301 then 0 else 1) * 146000 + (if b0302 then 0 else 1) * 146000 + (if b0303 then 0 else 1) * 146000 + (if b0304 then 0 else 1) * 146000 + (if b0305 then 0 else 1) * 146000 + (if b0306 then 0 else 1) * 146000 + (if b0307 then 0 else 1) * 146000 + (if b0308 then 0 else 1) * 146000 + (if b0309 then 0 else 1) * 146000 + (if b0310 then 0 else 1) * 146000 + (if b0316 then 0 else 1) * 146000 + (if b0317 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0350 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0354 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 25.120904
Added Horn clause: 18 => 19
Added Horn clause: 7 && 20 && 12 => 21
Added Horn clause: 7 && 22 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 23
Added Horn clause: 10 && 24 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 25
Added Horn clause: 10 && 24 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 26
Added Horn clause: 10 && 24 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 27
Added Horn clause: 10 && 28 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 29
Added Horn clause: 10 && 30 && 0 && 31 && 9 && 0 && 15 && 0 && 0 => 32
Added Horn clause: 10 && 33 && 12 && 34 && 0 && 0 && 35 && 0 && 0 && 0 && 0 => 36
Added Horn clause: 10 && 33 && 12 && 34 && 0 && 0 && 35 && 0 && 0 && 0 && 0 => 37
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1299910
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0061 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0063 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0141 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0351 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0353 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 16.107205
Added Horn clause: 38 && 39 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 23 && 29 && 0 && 26 => 40
Added Horn clause: 38 && 41 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 42
Added Horn clause: 43 && 44 && 0 && 45 && 9 && 0 && 0 && 0 && 36 => 46
Added Horn clause: 38 && 47 && 0 && 48 && 9 && 0 && 15 && 0 && 0 && 0 && 0 && 0 && 0 => 49
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1262870
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0115 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0147 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0352 then 0 else 1) * 146000 + (if b0355 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 16.595184
Added Horn clause: 7 && 50 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 51
Added Horn clause: 10 && 52 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 29 && 0 && 0 => 53
Added Horn clause: 10 && 54 && 12 && 55 && 56 && 0 && 0 && 0 && 57 => 58
Added Horn clause: 7 && 54 && 12 && 59 && 56 && 0 && 15 && 0 && 36 && 0 && 46 => 60
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1272030
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0049 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0121 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0320 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0356 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 21.521773
Added Horn clause: 43 && 61 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 62 && 0 => 63
Added Horn clause: 43 && 64 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 65 && 0 && 0 && 0 => 66
Added Horn clause: 43 && 67 && 12 && 68 && 56 && 0 && 15 && 0 && 36 && 0 && 46 && 0 && 60 => 69
Added Horn clause: 38 && 70 && 0 && 68 && 9 && 0 && 15 && 0 && 36 && 0 && 58 => 71
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1344210
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0054 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0095 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0276 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0321 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 18.664189
Added Horn clause: 7 && 72 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 73 && 0 => 74
Added Horn clause: 75 && 76 && 0 && 77 && 0 && 0 && 0 => 78
Added Horn clause: 0 && 79 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 62 && 0 && 0 && 63 => 80
Added Horn clause: 75 && 81 && 0 && 82 && 9 && 0 && 0 && 0 && 36 && 0 && 58 && 0 && 71 => 83
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1327890
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0068 then 0 else 1) * 146000 + (if b0069 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0100 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0139 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0277 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 22.744108
Added Horn clause: 10 && 84 && 0 && 85 && 49 && 0 && 0 && 0 && 78 => 86
Added Horn clause: 7 && 87 && 0 => 88
Added Horn clause: 7 && 89 && 0 && 90 && 0 && 0 && 0 => 91
Added Horn clause: 7 && 92 && 12 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 73 && 0 && 0 && 74 => 93
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1355690
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0074 then 0 else 1) * 146000 + (if b0075 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0093 then 0 else 1) * 146000 + (if b0094 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0113 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0145 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 16.899566
Added Horn clause: 7 && 94 && 0 => 95
Added Horn clause: 43 && 96 && 12 && 77 && 88 && 0 && 0 => 97
Added Horn clause: 43 && 98 && 0 && 99 && 56 && 0 && 0 && 0 && 78 && 0 && 86 => 100
Added Horn clause: 43 && 98 && 0 && 101 && 56 && 0 && 0 && 0 && 91 => 102
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1360000
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0035 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0098 then 0 else 1) * 146000 + (if b0099 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0119 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0137 then 0 else 1) * 146000 + (if b0138 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 20.082844
Added Horn clause: 75 && 103 && 0 && 104 && 105 && 0 && 0 => 106
Added Horn clause: 75 && 87 && 0 && 77 && 88 && 0 && 0 && 0 && 97 => 107
Added Horn clause: 7 && 108 && 0 && 109 && 49 && 0 && 0 && 0 && 91 && 0 && 102 => 110
Added Horn clause: 10 && 111 && 0 && 77 && 0 && 0 && 0 && 0 && 78 && 0 && 86 && 0 && 100 => 112
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1349720
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0038 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0048 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0111 then 0 else 1) * 146000 + (if b0112 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0143 then 0 else 1) * 146000 + (if b0144 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 21.583602
Added Horn clause: 10 && 103 && 0 && 104 && 105 && 0 && 0 && 0 && 106 => 113
Added Horn clause: 10 && 114 && 0 && 115 && 56 && 0 && 0 && 0 && 91 && 0 && 102 && 0 && 110 => 116
Added Horn clause: 7 && 87 && 0 && 77 && 88 && 0 && 0 && 0 && 97 && 0 && 107 => 117
Added Horn clause: 10 && 118 && 12 && 119 && 49 && 0 && 0 && 0 && 78 && 0 && 86 && 0 && 100 && 62 && 112 => 120
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1400820
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0034 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0053 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0117 then 0 else 1) * 146000 + (if b0118 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 19.521266
Added Horn clause: 7 && 87 && 0 && 77 && 121 && 0 && 0 && 0 && 122 && 0 && 123 && 0 && 124 => 125
Added Horn clause: 7 && 94 && 0 && 90 && 95 && 0 && 0 && 0 && 126 && 0 && 127 => 128
Added Horn clause: 10 && 129 && 0 && 90 && 0 && 0 && 0 && 0 && 91 && 0 && 102 && 0 && 110 && 73 && 116 => 130
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1369020
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0037 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0047 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 16.096996
Added Horn clause: 7 && 131 && 12 && 90 && 95 && 0 && 0 && 0 && 126 && 0 && 132 && 0 && 128 => 133
Added Horn clause: 7 && 134 && 12 && 77 && 88 && 0 && 0 && 0 && 97 && 0 && 135 && 0 && 117 && 62 && 136 => 137
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1405150
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0052 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0216 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 16.020445
Added Horn clause: 7 && 94 && 0 && 90 && 95 && 0 && 0 && 0 && 126 && 0 && 127 && 0 && 128 && 73 && 133 => 138
Added Horn clause: 7 && 87 && 0 && 77 && 88 && 0 && 0 && 0 && 97 && 0 && 107 && 0 && 117 && 62 && 136 && 0 && 137 => 139
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1415950
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0019 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0217 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 17.364683
Added Horn clause: 140 => 141
Added Horn clause: 10 && 94 && 0 && 90 && 95 && 0 && 0 && 0 && 126 && 0 && 127 && 0 && 128 && 73 && 133 && 0 && 138 => 142
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1399040
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0021 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0067 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 14.432107
Added Horn clause: 143 => 144
Added Horn clause: 140 && 87 && 141 => 145
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1453220
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0073 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0092 then 0 else 1) * 146000 + (if b0096 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 14.140802
Added Horn clause: 143 && 94 && 144 => 146
Added Horn clause: 140 && 87 && 141 && 77 && 145 && 0 && 0 => 147
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1418580
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0097 then 0 else 1) * 146000 + (if b0101 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0136 then 0 else 1) * 146000 + (if b0140 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 12.134882
Added Horn clause: 140 && 87 && 141 && 77 && 148 && 0 && 0 && 0 && 149 => 150
Added Horn clause: 151 && 103 && 152 && 104 && 153 && 0 && 0 => 154
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1433830
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0110 then 0 else 1) * 146000 + (if b0114 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0142 then 0 else 1) * 146000 + (if b0146 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 14.317651
Added Horn clause: 143 && 94 && 144 && 90 && 155 && 0 && 0 && 0 && 156 => 157
Added Horn clause: 140 && 87 && 141 && 77 && 145 && 0 && 0 && 0 && 147 && 0 && 158 => 159
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1444290
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0033 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0116 then 0 else 1) * 146000 + (if b0120 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 18.445555
Added Horn clause: 140 && 87 && 141 && 77 && 148 && 0 && 0 && 0 && 149 && 0 && 150 && 0 && 160 => 161
Added Horn clause: 143 && 94 && 144 && 90 && 162 && 0 && 0 && 0 && 163 && 0 && 164 => 165
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1451150
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0036 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0046 then 0 else 1) * 146000 + (if b0050 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 16.209431
Added Horn clause: 140 && 87 && 141 && 77 && 145 && 0 && 0 && 0 && 147 && 0 && 158 && 0 && 159 && 62 && 166 => 167
Added Horn clause: 151 && 103 && 152 && 104 && 153 && 0 && 0 && 0 && 154 && 0 && 168 && 0 && 169 => 170
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1471030
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0051 then 0 else 1) * 146000 + (if b0055 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 13.400373
Added Horn clause: 143 && 94 && 144 && 90 && 162 && 0 && 0 && 0 && 163 && 0 && 164 && 0 && 165 && 73 && 171 => 172
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1492390
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool, b0243: bool, b0244: bool, b0245: bool, b0246: bool, b0247: bool, b0248: bool, b0249: bool, b0250: bool, b0251: bool, b0252: bool, b0253: bool, b0254: bool, b0255: bool, b0256: bool, b0257: bool, b0258: bool, b0259: bool, b0260: bool, b0261: bool, b0262: bool, b0263: bool, b0264: bool, b0265: bool, b0266: bool, b0267: bool, b0268: bool, b0269: bool, b0270: bool, b0271: bool, b0272: bool, b0273: bool, b0274: bool, b0275: bool, b0276: bool, b0277: bool, b0278: bool, b0279: bool, b0280: bool, b0281: bool, b0282: bool, b0283: bool, b0284: bool, b0285: bool, b0286: bool, b0287: bool, b0288: bool, b0289: bool, b0290: bool, b0291: bool, b0292: bool, b0293: bool, b0294: bool, b0295: bool, b0296: bool, b0297: bool, b0298: bool, b0299: bool, b0300: bool, b0301: bool, b0302: bool, b0303: bool, b0304: bool, b0305: bool, b0306: bool, b0307: bool, b0308: bool, b0309: bool, b0310: bool, b0311: bool, b0312: bool, b0313: bool, b0314: bool, b0315: bool, b0316: bool, b0317: bool, b0318: bool, b0319: bool, b0320: bool, b0321: bool, b0322: bool, b0323: bool, b0324: bool, b0325: bool, b0326: bool, b0327: bool, b0328: bool, b0329: bool, b0330: bool, b0331: bool, b0332: bool, b0333: bool, b0334: bool, b0335: bool, b0336: bool, b0337: bool, b0338: bool, b0339: bool, b0340: bool, b0341: bool, b0342: bool, b0343: bool, b0344: bool, b0345: bool, b0346: bool, b0347: bool, b0348: bool, b0349: bool, b0350: bool, b0351: bool, b0352: bool, b0353: bool, b0354: bool, b0355: bool, b0356: bool, b0357: bool, b0358: bool, b0359: bool, b0360: bool, b0361: bool, b0362: bool, b0363: bool, b0364: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 146000 + (if b0001 then 0 else 1) * 146000 + (if b0002 then 0 else 1) * 146000 + (if b0003 then 0 else 1) * 146000 + (if b0005 then 0 else 1) * 146000 + (if b0007 then 0 else 1) * 146000 + (if b0008 then 0 else 1) * 146000 + (if b0009 then 0 else 1) * 146000 + (if b0010 then 0 else 1) * 146000 + (if b0011 then 0 else 1) * 146000 + (if b0012 then 0 else 1) * 146000 + (if b0014 then 0 else 1) * 146000 + (if b0016 then 0 else 1) * 146000 + (if b0017 then 0 else 1) * 146000 + (if b0018 then 0 else 1) * 146000 + (if b0020 then 0 else 1) * 146000 + (if b0022 then 0 else 1) * 146000 + (if b0023 then 0 else 1) * 146000 + (if b0024 then 0 else 1) * 146000 + (if b0025 then 0 else 1) * 146000 + (if b0026 then 0 else 1) * 146000 + (if b0028 then 0 else 1) * 146000 + (if b0030 then 0 else 1) * 146000 + (if b0031 then 0 else 1) * 146000 + (if b0032 then 0 else 1) * 146000 + (if b0039 then 0 else 1) * 146000 + (if b0041 then 0 else 1) * 146000 + (if b0043 then 0 else 1) * 146000 + (if b0044 then 0 else 1) * 146000 + (if b0045 then 0 else 1) * 146000 + (if b0056 then 0 else 1) * 146000 + (if b0057 then 0 else 1) * 146000 + (if b0059 then 0 else 1) * 146000 + (if b0060 then 0 else 1) * 146000 + (if b0062 then 0 else 1) * 146000 + (if b0064 then 0 else 1) * 146000 + (if b0065 then 0 else 1) * 146000 + (if b0066 then 0 else 1) * 146000 + (if b0070 then 0 else 1) * 146000 + (if b0071 then 0 else 1) * 146000 + (if b0072 then 0 else 1) * 146000 + (if b0076 then 0 else 1) * 146000 + (if b0077 then 0 else 1) * 146000 + (if b0078 then 0 else 1) * 146000 + (if b0079 then 0 else 1) * 146000 + (if b0082 then 0 else 1) * 146000 + (if b0084 then 0 else 1) * 146000 + (if b0085 then 0 else 1) * 146000 + (if b0086 then 0 else 1) * 146000 + (if b0087 then 0 else 1) * 146000 + (if b0088 then 0 else 1) * 146000 + (if b0089 then 0 else 1) * 146000 + (if b0090 then 0 else 1) * 146000 + (if b0091 then 0 else 1) * 146000 + (if b0102 then 0 else 1) * 146000 + (if b0103 then 0 else 1) * 146000 + (if b0104 then 0 else 1) * 146000 + (if b0105 then 0 else 1) * 146000 + (if b0106 then 0 else 1) * 146000 + (if b0107 then 0 else 1) * 146000 + (if b0108 then 0 else 1) * 146000 + (if b0109 then 0 else 1) * 146000 + (if b0122 then 0 else 1) * 146000 + (if b0125 then 0 else 1) * 146000 + (if b0127 then 0 else 1) * 146000 + (if b0128 then 0 else 1) * 146000 + (if b0129 then 0 else 1) * 146000 + (if b0130 then 0 else 1) * 146000 + (if b0131 then 0 else 1) * 146000 + (if b0132 then 0 else 1) * 146000 + (if b0133 then 0 else 1) * 146000 + (if b0134 then 0 else 1) * 146000 + (if b0148 then 0 else 1) * 146000 + (if b0151 then 0 else 1) * 146000 + (if b0153 then 0 else 1) * 146000 + (if b0154 then 0 else 1) * 146000 + (if b0155 then 0 else 1) * 146000 + (if b0156 then 0 else 1) * 146000 + (if b0157 then 0 else 1) * 146000 + (if b0158 then 0 else 1) * 146000 + (if b0159 then 0 else 1) * 146000 + (if b0160 then 0 else 1) * 146000 + (if b0161 then 0 else 1) * 146000 + (if b0162 then 0 else 1) * 146000 + (if b0218 then 0 else 1) * 146000 + (if b0219 then 0 else 1) * 146000 + (if b0220 then 0 else 1) * 146000 + (if b0221 then 0 else 1) * 146000 + (if b0222 then 0 else 1) * 146000 + (if b0223 then 0 else 1) * 146000 + (if b0224 then 0 else 1) * 146000 + (if b0225 then 0 else 1) * 146000 + (if b0278 then 0 else 1) * 146000 + (if b0279 then 0 else 1) * 146000 + (if b0280 then 0 else 1) * 146000 + (if b0281 then 0 else 1) * 146000 + (if b0282 then 0 else 1) * 146000 + (if b0283 then 0 else 1) * 146000 + (if b0284 then 0 else 1) * 146000 + (if b0285 then 0 else 1) * 146000 + (if b0286 then 0 else 1) * 146000 + (if b0287 then 0 else 1) * 146000 + (if b0288 then 0 else 1) * 146000 + (if b0289 then 0 else 1) * 146000 + (if b0322 then 0 else 1) * 146000 + (if b0323 then 0 else 1) * 146000 + (if b0324 then 0 else 1) * 146000 + (if b0325 then 0 else 1) * 146000 + (if b0326 then 0 else 1) * 146000 + (if b0327 then 0 else 1) * 146000 + (if b0328 then 0 else 1) * 146000 + (if b0329 then 0 else 1) * 146000 + (if b0330 then 0 else 1) * 146000 + (if b0331 then 0 else 1) * 146000 + (if b0332 then 0 else 1) * 146000 + (if b0333 then 0 else 1) * 146000 + (if b0334 then 0 else 1) * 146000 + (if b0335 then 0 else 1) * 146000 + (if b0336 then 0 else 1) * 146000 + (if b0337 then 0 else 1) * 146000 + (if b0338 then 0 else 1) * 146000 + (if b0339 then 0 else 1) * 146000 + (if b0340 then 0 else 1) * 146000 + (if b0341 then 0 else 1) * 146000 + (if b0342 then 0 else 1) * 146000 + (if b0343 then 0 else 1) * 146000 + (if b0344 then 0 else 1) * 146000 + (if b0345 then 0 else 1) * 146000 + (if b0346 then 0 else 1) * 146000 + (if b0347 then 0 else 1) * 146000 + (if b0348 then 0 else 1) * 146000 + (if b0349 then 0 else 1) * 146000 + (if b0357 then 0 else 1) * 146000 + (if b0358 then 0 else 1) * 146000 + (if b0359 then 0 else 1) * 146000 + (if b0360 then 0 else 1) * 146000 + (if b0361 then 0 else 1) * 146000 + (if b0362 then 0 else 1) * 146000 + (if b0363 then 0 else 1) * 146000 + (if b0364 then 0 else 1) * 146000 < 441
}
Prover Time taken = 8.483365
Prover time = 483.37
Number of prover queries = 27
Learner time = 3.53
Number of learner queries = 26
Total time: 492.70
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:74
verified

Boogie program verifier finished with 1 verified, 0 errors
21.85user 9.84system 8:14.48elapsed 6%CPU (0avgtext+0avgdata 120904maxresident)k
0inputs+5816outputs (1major+379068minor)pagefaults 0swaps
FILE:polybench/linear-algebra/blas/trmm/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:22:08 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 190
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.194784
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1198350
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0065 then 0 else 1) * 76000 + (if b0066 then 0 else 1) * 76000 + (if b0067 then 0 else 1) * 76000 + (if b0068 then 0 else 1) * 76000 + (if b0069 then 0 else 1) * 76000 + (if b0070 then 0 else 1) * 76000 + (if b0071 then 0 else 1) * 76000 + (if b0072 then 0 else 1) * 76000 + (if b0073 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0075 then 0 else 1) * 76000 + (if b0076 then 0 else 1) * 76000 + (if b0077 then 0 else 1) * 76000 + (if b0078 then 0 else 1) * 76000 + (if b0079 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0081 then 0 else 1) * 76000 + (if b0082 then 0 else 1) * 76000 + (if b0083 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0087 then 0 else 1) * 76000 + (if b0088 then 0 else 1) * 76000 + (if b0089 then 0 else 1) * 76000 + (if b0090 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0092 then 0 else 1) * 76000 + (if b0093 then 0 else 1) * 76000 + (if b0094 then 0 else 1) * 76000 + (if b0095 then 0 else 1) * 76000 + (if b0096 then 0 else 1) * 76000 + (if b0097 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0099 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.158826
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1218380
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0070 then 0 else 1) * 76000 + (if b0073 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0081 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0096 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.196597
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1225880
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0096 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.123218
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1205780
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 6.895155
Added Horn clause: 4 => 5
Added Horn clause: 6 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 7
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 6 && 0 && 0 && 0 && 0 => 10
Added Horn clause: 6 && 0 && 0 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 6 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 6 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 6 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1217650
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 6.819684
Added Horn clause: 17 => 18
Added Horn clause: 17 && 19 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 20
Added Horn clause: 17 && 21 && 0 => 22
Added Horn clause: 17 && 23 && 0 && 0 && 15 && 0 && 0 && 0 && 0 => 24
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1228840
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 4.943769
Added Horn clause: 25 => 26
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1234810
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 < 441
}
Prover Time taken = 4.38019
Prover time = 45.71
Number of prover queries = 8
Learner time = 0.85
Number of learner queries = 7
Total time: 47.19
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:15
verified

Boogie program verifier finished with 1 verified, 0 errors
4.02user 3.37system 0:48.72elapsed 15%CPU (0avgtext+0avgdata 83968maxresident)k
0inputs+504outputs (1major+70243minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/2mm/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:22:57 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 44
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169759
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1238240
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.017452
Added Horn clause: 0 && 0 && 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1208050
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.050606
Added Horn clause: 0 => 6
Added Horn clause: 0 && 0 && 5 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1176660
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.048722
Added Horn clause: 2 && 0 && 6 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1186310
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.961274
Added Horn clause: 0 && 0 && 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1196080
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 0.925538
Prover time = 5.17
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 5.91
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.09user 1.47system 0:07.29elapsed 35%CPU (0avgtext+0avgdata 54400maxresident)k
0inputs+224outputs (1major+26551minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/2mm/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:23:04 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 192
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.185611
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1225480
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0065 then 0 else 1) * 76000 + (if b0066 then 0 else 1) * 76000 + (if b0067 then 0 else 1) * 76000 + (if b0068 then 0 else 1) * 76000 + (if b0069 then 0 else 1) * 76000 + (if b0070 then 0 else 1) * 76000 + (if b0071 then 0 else 1) * 76000 + (if b0072 then 0 else 1) * 76000 + (if b0073 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0075 then 0 else 1) * 76000 + (if b0076 then 0 else 1) * 76000 + (if b0077 then 0 else 1) * 76000 + (if b0078 then 0 else 1) * 76000 + (if b0079 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0081 then 0 else 1) * 76000 + (if b0082 then 0 else 1) * 76000 + (if b0083 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0087 then 0 else 1) * 76000 + (if b0088 then 0 else 1) * 76000 + (if b0089 then 0 else 1) * 76000 + (if b0090 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0092 then 0 else 1) * 76000 + (if b0093 then 0 else 1) * 76000 + (if b0094 then 0 else 1) * 76000 + (if b0095 then 0 else 1) * 76000 + (if b0096 then 0 else 1) * 76000 + (if b0097 then 0 else 1) * 76000 + (if b0098 then 0 else 1) * 76000 + (if b0099 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.718685
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1210330
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0069 then 0 else 1) * 76000 + (if b0070 then 0 else 1) * 76000 + (if b0072 then 0 else 1) * 76000 + (if b0074 then 0 else 1) * 76000 + (if b0077 then 0 else 1) * 76000 + (if b0079 then 0 else 1) * 76000 + (if b0080 then 0 else 1) * 76000 + (if b0082 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0085 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0090 then 0 else 1) * 76000 + (if b0091 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.270532
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1209950
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0090 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.447668
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1198290
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0084 then 0 else 1) * 76000 + (if b0086 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 7.862163
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1199750
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0004 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0006 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0013 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0015 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0027 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0029 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0038 then 0 else 1) * 76000 + (if b0039 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0041 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0052 then 0 else 1) * 76000 + (if b0053 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0055 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0111 then 0 else 1) * 76000 + (if b0112 then 0 else 1) * 76000 + (if b0113 then 0 else 1) * 76000 + (if b0114 then 0 else 1) * 76000 + (if b0115 then 0 else 1) * 76000 + (if b0116 then 0 else 1) * 76000 + (if b0117 then 0 else 1) * 76000 + (if b0118 then 0 else 1) * 76000 + (if b0119 then 0 else 1) * 76000 + (if b0120 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0122 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0125 then 0 else 1) * 76000 + (if b0126 then 0 else 1) * 76000 + (if b0127 then 0 else 1) * 76000 + (if b0128 then 0 else 1) * 76000 + (if b0129 then 0 else 1) * 76000 + (if b0130 then 0 else 1) * 76000 + (if b0131 then 0 else 1) * 76000 + (if b0132 then 0 else 1) * 76000 + (if b0133 then 0 else 1) * 76000 + (if b0134 then 0 else 1) * 76000 + (if b0135 then 0 else 1) * 76000 + (if b0136 then 0 else 1) * 76000 + (if b0137 then 0 else 1) * 76000 + (if b0138 then 0 else 1) * 76000 + (if b0139 then 0 else 1) * 76000 + (if b0140 then 0 else 1) * 76000 + (if b0141 then 0 else 1) * 76000 + (if b0142 then 0 else 1) * 76000 + (if b0143 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0160 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0162 then 0 else 1) * 76000 + (if b0163 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0168 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0174 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0179 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 7.818654
Added Horn clause: 5 => 6
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 8
Added Horn clause: 9 && 0 && 0 && 0 && 0 => 10
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 9 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Added Horn clause: 7 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1251940
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0124 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0161 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0166 then 0 else 1) * 76000 + (if b0167 then 0 else 1) * 76000 + (if b0169 then 0 else 1) * 76000 + (if b0170 then 0 else 1) * 76000 + (if b0171 then 0 else 1) * 76000 + (if b0172 then 0 else 1) * 76000 + (if b0173 then 0 else 1) * 76000 + (if b0175 then 0 else 1) * 76000 + (if b0176 then 0 else 1) * 76000 + (if b0177 then 0 else 1) * 76000 + (if b0178 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0190 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 7.97388
Added Horn clause: 18 => 19
Added Horn clause: 20 && 21 && 0 => 22
Added Horn clause: 20 && 23 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 24
Added Horn clause: 25 && 26 && 0 && 27 && 0 && 0 && 11 && 0 && 14 => 28
Added Horn clause: 25 && 26 && 0 && 29 && 16 && 0 && 11 && 0 && 14 => 30
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1256270
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0121 then 0 else 1) * 76000 + (if b0123 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0165 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 7.616125
Added Horn clause: 31 => 32
Added Horn clause: 7 && 33 && 0 => 34
Added Horn clause: 9 && 35 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 36
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1220160
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0145 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0164 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 6.12326
Added Horn clause: 9 && 37 && 0 => 38
Added Horn clause: 9 && 39 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 40
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1253560
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0101 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0144 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 6.268252
Added Horn clause: 7 && 41 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 42
Added Horn clause: 7 && 43 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 44
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1266100
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0021 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0100 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 8.8654
Added Horn clause: 7 && 45 && 17 && 0 && 0 && 0 && 0 && 0 && 0 => 46
Added Horn clause: 47 => 48
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1239360
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0020 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 7.315544
Added Horn clause: 49 => 50
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1237200
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 76000 + (if b0001 then 0 else 1) * 76000 + (if b0002 then 0 else 1) * 76000 + (if b0003 then 0 else 1) * 76000 + (if b0005 then 0 else 1) * 76000 + (if b0007 then 0 else 1) * 76000 + (if b0008 then 0 else 1) * 76000 + (if b0009 then 0 else 1) * 76000 + (if b0010 then 0 else 1) * 76000 + (if b0011 then 0 else 1) * 76000 + (if b0012 then 0 else 1) * 76000 + (if b0014 then 0 else 1) * 76000 + (if b0016 then 0 else 1) * 76000 + (if b0017 then 0 else 1) * 76000 + (if b0018 then 0 else 1) * 76000 + (if b0019 then 0 else 1) * 76000 + (if b0022 then 0 else 1) * 76000 + (if b0023 then 0 else 1) * 76000 + (if b0024 then 0 else 1) * 76000 + (if b0025 then 0 else 1) * 76000 + (if b0026 then 0 else 1) * 76000 + (if b0028 then 0 else 1) * 76000 + (if b0030 then 0 else 1) * 76000 + (if b0031 then 0 else 1) * 76000 + (if b0032 then 0 else 1) * 76000 + (if b0033 then 0 else 1) * 76000 + (if b0034 then 0 else 1) * 76000 + (if b0035 then 0 else 1) * 76000 + (if b0036 then 0 else 1) * 76000 + (if b0037 then 0 else 1) * 76000 + (if b0040 then 0 else 1) * 76000 + (if b0042 then 0 else 1) * 76000 + (if b0043 then 0 else 1) * 76000 + (if b0044 then 0 else 1) * 76000 + (if b0045 then 0 else 1) * 76000 + (if b0046 then 0 else 1) * 76000 + (if b0047 then 0 else 1) * 76000 + (if b0048 then 0 else 1) * 76000 + (if b0049 then 0 else 1) * 76000 + (if b0050 then 0 else 1) * 76000 + (if b0051 then 0 else 1) * 76000 + (if b0054 then 0 else 1) * 76000 + (if b0056 then 0 else 1) * 76000 + (if b0057 then 0 else 1) * 76000 + (if b0058 then 0 else 1) * 76000 + (if b0059 then 0 else 1) * 76000 + (if b0060 then 0 else 1) * 76000 + (if b0061 then 0 else 1) * 76000 + (if b0062 then 0 else 1) * 76000 + (if b0063 then 0 else 1) * 76000 + (if b0064 then 0 else 1) * 76000 + (if b0102 then 0 else 1) * 76000 + (if b0103 then 0 else 1) * 76000 + (if b0104 then 0 else 1) * 76000 + (if b0105 then 0 else 1) * 76000 + (if b0106 then 0 else 1) * 76000 + (if b0107 then 0 else 1) * 76000 + (if b0108 then 0 else 1) * 76000 + (if b0109 then 0 else 1) * 76000 + (if b0110 then 0 else 1) * 76000 + (if b0146 then 0 else 1) * 76000 + (if b0147 then 0 else 1) * 76000 + (if b0148 then 0 else 1) * 76000 + (if b0149 then 0 else 1) * 76000 + (if b0150 then 0 else 1) * 76000 + (if b0151 then 0 else 1) * 76000 + (if b0152 then 0 else 1) * 76000 + (if b0153 then 0 else 1) * 76000 + (if b0154 then 0 else 1) * 76000 + (if b0155 then 0 else 1) * 76000 + (if b0156 then 0 else 1) * 76000 + (if b0157 then 0 else 1) * 76000 + (if b0158 then 0 else 1) * 76000 + (if b0159 then 0 else 1) * 76000 + (if b0180 then 0 else 1) * 76000 + (if b0181 then 0 else 1) * 76000 + (if b0182 then 0 else 1) * 76000 + (if b0183 then 0 else 1) * 76000 + (if b0184 then 0 else 1) * 76000 + (if b0185 then 0 else 1) * 76000 + (if b0186 then 0 else 1) * 76000 + (if b0187 then 0 else 1) * 76000 + (if b0188 then 0 else 1) * 76000 + (if b0189 then 0 else 1) * 76000 + (if b0191 then 0 else 1) * 76000 < 441
}
Prover Time taken = 6.142426
Prover time = 89.61
Number of prover queries = 13
Learner time = 1.48
Number of learner queries = 12
Total time: 91.98
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:25
verified

Boogie program verifier finished with 1 verified, 0 errors
6.06user 4.42system 1:33.52elapsed 11%CPU (0avgtext+0avgdata 84764maxresident)k
0inputs+944outputs (1major+101592minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/2mm/kernel2.bpl.ice2.bpl
#################
Tue Apr 27 21:24:38 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 34
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169442
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1177640
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0016 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0022 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 0.708714
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1176200
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 0.835143
Added Horn clause: 0 && 0 && 1 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1173590
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 0.811857
Prover time = 2.53
Number of prover queries = 4
Learner time = 0.35
Number of learner queries = 3
Total time: 2.98
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
0.91user 1.24system 0:04.33elapsed 49%CPU (0avgtext+0avgdata 49316maxresident)k
0inputs+144outputs (1major+20738minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/3mm/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:24:42 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 243
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.193028
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.0936890
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0004 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0006 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0013 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0015 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0020 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0026 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0028 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0037 then 0 else 1) * 97000 + (if b0038 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0040 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0051 then 0 else 1) * 97000 + (if b0052 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0054 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0063 then 0 else 1) * 97000 + (if b0064 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0066 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0076 then 0 else 1) * 97000 + (if b0077 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0079 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0088 then 0 else 1) * 97000 + (if b0089 then 0 else 1) * 97000 + (if b0090 then 0 else 1) * 97000 + (if b0091 then 0 else 1) * 97000 + (if b0092 then 0 else 1) * 97000 + (if b0093 then 0 else 1) * 97000 + (if b0094 then 0 else 1) * 97000 + (if b0095 then 0 else 1) * 97000 + (if b0096 then 0 else 1) * 97000 + (if b0097 then 0 else 1) * 97000 + (if b0098 then 0 else 1) * 97000 + (if b0099 then 0 else 1) * 97000 + (if b0100 then 0 else 1) * 97000 + (if b0101 then 0 else 1) * 97000 + (if b0102 then 0 else 1) * 97000 + (if b0103 then 0 else 1) * 97000 + (if b0104 then 0 else 1) * 97000 + (if b0105 then 0 else 1) * 97000 + (if b0106 then 0 else 1) * 97000 + (if b0107 then 0 else 1) * 97000 + (if b0108 then 0 else 1) * 97000 + (if b0109 then 0 else 1) * 97000 + (if b0110 then 0 else 1) * 97000 + (if b0111 then 0 else 1) * 97000 + (if b0112 then 0 else 1) * 97000 + (if b0113 then 0 else 1) * 97000 + (if b0114 then 0 else 1) * 97000 + (if b0115 then 0 else 1) * 97000 + (if b0116 then 0 else 1) * 97000 + (if b0117 then 0 else 1) * 97000 + (if b0118 then 0 else 1) * 97000 + (if b0119 then 0 else 1) * 97000 + (if b0120 then 0 else 1) * 97000 + (if b0121 then 0 else 1) * 97000 + (if b0122 then 0 else 1) * 97000 + (if b0123 then 0 else 1) * 97000 + (if b0124 then 0 else 1) * 97000 + (if b0125 then 0 else 1) * 97000 + (if b0126 then 0 else 1) * 97000 + (if b0127 then 0 else 1) * 97000 + (if b0128 then 0 else 1) * 97000 + (if b0129 then 0 else 1) * 97000 + (if b0130 then 0 else 1) * 97000 + (if b0131 then 0 else 1) * 97000 + (if b0132 then 0 else 1) * 97000 + (if b0133 then 0 else 1) * 97000 + (if b0134 then 0 else 1) * 97000 + (if b0135 then 0 else 1) * 97000 + (if b0136 then 0 else 1) * 97000 + (if b0137 then 0 else 1) * 97000 + (if b0138 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0146 then 0 else 1) * 97000 + (if b0147 then 0 else 1) * 97000 + (if b0148 then 0 else 1) * 97000 + (if b0149 then 0 else 1) * 97000 + (if b0150 then 0 else 1) * 97000 + (if b0151 then 0 else 1) * 97000 + (if b0152 then 0 else 1) * 97000 + (if b0153 then 0 else 1) * 97000 + (if b0154 then 0 else 1) * 97000 + (if b0155 then 0 else 1) * 97000 + (if b0156 then 0 else 1) * 97000 + (if b0157 then 0 else 1) * 97000 + (if b0158 then 0 else 1) * 97000 + (if b0159 then 0 else 1) * 97000 + (if b0160 then 0 else 1) * 97000 + (if b0161 then 0 else 1) * 97000 + (if b0162 then 0 else 1) * 97000 + (if b0163 then 0 else 1) * 97000 + (if b0164 then 0 else 1) * 97000 + (if b0165 then 0 else 1) * 97000 + (if b0166 then 0 else 1) * 97000 + (if b0167 then 0 else 1) * 97000 + (if b0168 then 0 else 1) * 97000 + (if b0169 then 0 else 1) * 97000 + (if b0170 then 0 else 1) * 97000 + (if b0171 then 0 else 1) * 97000 + (if b0172 then 0 else 1) * 97000 + (if b0173 then 0 else 1) * 97000 + (if b0174 then 0 else 1) * 97000 + (if b0175 then 0 else 1) * 97000 + (if b0176 then 0 else 1) * 97000 + (if b0177 then 0 else 1) * 97000 + (if b0178 then 0 else 1) * 97000 + (if b0179 then 0 else 1) * 97000 + (if b0180 then 0 else 1) * 97000 + (if b0181 then 0 else 1) * 97000 + (if b0182 then 0 else 1) * 97000 + (if b0183 then 0 else 1) * 97000 + (if b0184 then 0 else 1) * 97000 + (if b0185 then 0 else 1) * 97000 + (if b0186 then 0 else 1) * 97000 + (if b0187 then 0 else 1) * 97000 + (if b0188 then 0 else 1) * 97000 + (if b0189 then 0 else 1) * 97000 + (if b0190 then 0 else 1) * 97000 + (if b0191 then 0 else 1) * 97000 + (if b0192 then 0 else 1) * 97000 + (if b0193 then 0 else 1) * 97000 + (if b0194 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0211 then 0 else 1) * 97000 + (if b0212 then 0 else 1) * 97000 + (if b0213 then 0 else 1) * 97000 + (if b0214 then 0 else 1) * 97000 + (if b0215 then 0 else 1) * 97000 + (if b0216 then 0 else 1) * 97000 + (if b0217 then 0 else 1) * 97000 + (if b0218 then 0 else 1) * 97000 + (if b0219 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0221 then 0 else 1) * 97000 + (if b0222 then 0 else 1) * 97000 + (if b0223 then 0 else 1) * 97000 + (if b0224 then 0 else 1) * 97000 + (if b0225 then 0 else 1) * 97000 + (if b0226 then 0 else 1) * 97000 + (if b0227 then 0 else 1) * 97000 + (if b0228 then 0 else 1) * 97000 + (if b0229 then 0 else 1) * 97000 + (if b0230 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 12.320229
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1223620
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0004 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0006 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0013 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0015 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0020 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0026 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0028 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0037 then 0 else 1) * 97000 + (if b0038 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0040 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0051 then 0 else 1) * 97000 + (if b0052 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0054 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0063 then 0 else 1) * 97000 + (if b0064 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0066 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0076 then 0 else 1) * 97000 + (if b0077 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0079 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0088 then 0 else 1) * 97000 + (if b0091 then 0 else 1) * 97000 + (if b0094 then 0 else 1) * 97000 + (if b0095 then 0 else 1) * 97000 + (if b0098 then 0 else 1) * 97000 + (if b0101 then 0 else 1) * 97000 + (if b0104 then 0 else 1) * 97000 + (if b0105 then 0 else 1) * 97000 + (if b0111 then 0 else 1) * 97000 + (if b0114 then 0 else 1) * 97000 + (if b0116 then 0 else 1) * 97000 + (if b0118 then 0 else 1) * 97000 + (if b0120 then 0 else 1) * 97000 + (if b0125 then 0 else 1) * 97000 + (if b0130 then 0 else 1) * 97000 + (if b0131 then 0 else 1) * 97000 + (if b0133 then 0 else 1) * 97000 + (if b0135 then 0 else 1) * 97000 + (if b0136 then 0 else 1) * 97000 + (if b0138 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0146 then 0 else 1) * 97000 + (if b0147 then 0 else 1) * 97000 + (if b0148 then 0 else 1) * 97000 + (if b0149 then 0 else 1) * 97000 + (if b0150 then 0 else 1) * 97000 + (if b0151 then 0 else 1) * 97000 + (if b0152 then 0 else 1) * 97000 + (if b0153 then 0 else 1) * 97000 + (if b0154 then 0 else 1) * 97000 + (if b0155 then 0 else 1) * 97000 + (if b0156 then 0 else 1) * 97000 + (if b0157 then 0 else 1) * 97000 + (if b0158 then 0 else 1) * 97000 + (if b0159 then 0 else 1) * 97000 + (if b0160 then 0 else 1) * 97000 + (if b0161 then 0 else 1) * 97000 + (if b0162 then 0 else 1) * 97000 + (if b0163 then 0 else 1) * 97000 + (if b0164 then 0 else 1) * 97000 + (if b0165 then 0 else 1) * 97000 + (if b0166 then 0 else 1) * 97000 + (if b0167 then 0 else 1) * 97000 + (if b0168 then 0 else 1) * 97000 + (if b0169 then 0 else 1) * 97000 + (if b0170 then 0 else 1) * 97000 + (if b0171 then 0 else 1) * 97000 + (if b0172 then 0 else 1) * 97000 + (if b0173 then 0 else 1) * 97000 + (if b0174 then 0 else 1) * 97000 + (if b0175 then 0 else 1) * 97000 + (if b0176 then 0 else 1) * 97000 + (if b0177 then 0 else 1) * 97000 + (if b0178 then 0 else 1) * 97000 + (if b0179 then 0 else 1) * 97000 + (if b0180 then 0 else 1) * 97000 + (if b0181 then 0 else 1) * 97000 + (if b0182 then 0 else 1) * 97000 + (if b0183 then 0 else 1) * 97000 + (if b0184 then 0 else 1) * 97000 + (if b0185 then 0 else 1) * 97000 + (if b0186 then 0 else 1) * 97000 + (if b0187 then 0 else 1) * 97000 + (if b0188 then 0 else 1) * 97000 + (if b0189 then 0 else 1) * 97000 + (if b0190 then 0 else 1) * 97000 + (if b0191 then 0 else 1) * 97000 + (if b0192 then 0 else 1) * 97000 + (if b0193 then 0 else 1) * 97000 + (if b0194 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0211 then 0 else 1) * 97000 + (if b0212 then 0 else 1) * 97000 + (if b0213 then 0 else 1) * 97000 + (if b0214 then 0 else 1) * 97000 + (if b0215 then 0 else 1) * 97000 + (if b0216 then 0 else 1) * 97000 + (if b0217 then 0 else 1) * 97000 + (if b0218 then 0 else 1) * 97000 + (if b0219 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0221 then 0 else 1) * 97000 + (if b0222 then 0 else 1) * 97000 + (if b0223 then 0 else 1) * 97000 + (if b0224 then 0 else 1) * 97000 + (if b0225 then 0 else 1) * 97000 + (if b0226 then 0 else 1) * 97000 + (if b0227 then 0 else 1) * 97000 + (if b0228 then 0 else 1) * 97000 + (if b0229 then 0 else 1) * 97000 + (if b0230 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 17.107002
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1207070
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0004 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0006 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0013 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0015 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0020 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0026 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0028 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0037 then 0 else 1) * 97000 + (if b0038 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0040 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0051 then 0 else 1) * 97000 + (if b0052 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0054 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0063 then 0 else 1) * 97000 + (if b0064 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0066 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0076 then 0 else 1) * 97000 + (if b0077 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0079 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0101 then 0 else 1) * 97000 + (if b0104 then 0 else 1) * 97000 + (if b0114 then 0 else 1) * 97000 + (if b0118 then 0 else 1) * 97000 + (if b0125 then 0 else 1) * 97000 + (if b0130 then 0 else 1) * 97000 + (if b0135 then 0 else 1) * 97000 + (if b0138 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0146 then 0 else 1) * 97000 + (if b0147 then 0 else 1) * 97000 + (if b0148 then 0 else 1) * 97000 + (if b0149 then 0 else 1) * 97000 + (if b0150 then 0 else 1) * 97000 + (if b0151 then 0 else 1) * 97000 + (if b0152 then 0 else 1) * 97000 + (if b0153 then 0 else 1) * 97000 + (if b0154 then 0 else 1) * 97000 + (if b0155 then 0 else 1) * 97000 + (if b0156 then 0 else 1) * 97000 + (if b0157 then 0 else 1) * 97000 + (if b0158 then 0 else 1) * 97000 + (if b0159 then 0 else 1) * 97000 + (if b0160 then 0 else 1) * 97000 + (if b0161 then 0 else 1) * 97000 + (if b0162 then 0 else 1) * 97000 + (if b0163 then 0 else 1) * 97000 + (if b0164 then 0 else 1) * 97000 + (if b0165 then 0 else 1) * 97000 + (if b0166 then 0 else 1) * 97000 + (if b0167 then 0 else 1) * 97000 + (if b0168 then 0 else 1) * 97000 + (if b0169 then 0 else 1) * 97000 + (if b0170 then 0 else 1) * 97000 + (if b0171 then 0 else 1) * 97000 + (if b0172 then 0 else 1) * 97000 + (if b0173 then 0 else 1) * 97000 + (if b0174 then 0 else 1) * 97000 + (if b0175 then 0 else 1) * 97000 + (if b0176 then 0 else 1) * 97000 + (if b0177 then 0 else 1) * 97000 + (if b0178 then 0 else 1) * 97000 + (if b0179 then 0 else 1) * 97000 + (if b0180 then 0 else 1) * 97000 + (if b0181 then 0 else 1) * 97000 + (if b0182 then 0 else 1) * 97000 + (if b0183 then 0 else 1) * 97000 + (if b0184 then 0 else 1) * 97000 + (if b0185 then 0 else 1) * 97000 + (if b0186 then 0 else 1) * 97000 + (if b0187 then 0 else 1) * 97000 + (if b0188 then 0 else 1) * 97000 + (if b0189 then 0 else 1) * 97000 + (if b0190 then 0 else 1) * 97000 + (if b0191 then 0 else 1) * 97000 + (if b0192 then 0 else 1) * 97000 + (if b0193 then 0 else 1) * 97000 + (if b0194 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0211 then 0 else 1) * 97000 + (if b0212 then 0 else 1) * 97000 + (if b0213 then 0 else 1) * 97000 + (if b0214 then 0 else 1) * 97000 + (if b0215 then 0 else 1) * 97000 + (if b0216 then 0 else 1) * 97000 + (if b0217 then 0 else 1) * 97000 + (if b0218 then 0 else 1) * 97000 + (if b0219 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0221 then 0 else 1) * 97000 + (if b0222 then 0 else 1) * 97000 + (if b0223 then 0 else 1) * 97000 + (if b0224 then 0 else 1) * 97000 + (if b0225 then 0 else 1) * 97000 + (if b0226 then 0 else 1) * 97000 + (if b0227 then 0 else 1) * 97000 + (if b0228 then 0 else 1) * 97000 + (if b0229 then 0 else 1) * 97000 + (if b0230 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 14.30908
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1239450
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0004 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0006 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0013 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0015 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0020 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0026 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0028 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0037 then 0 else 1) * 97000 + (if b0038 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0040 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0051 then 0 else 1) * 97000 + (if b0052 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0054 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0063 then 0 else 1) * 97000 + (if b0064 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0066 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0076 then 0 else 1) * 97000 + (if b0077 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0079 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0114 then 0 else 1) * 97000 + (if b0125 then 0 else 1) * 97000 + (if b0130 then 0 else 1) * 97000 + (if b0138 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0146 then 0 else 1) * 97000 + (if b0147 then 0 else 1) * 97000 + (if b0148 then 0 else 1) * 97000 + (if b0149 then 0 else 1) * 97000 + (if b0150 then 0 else 1) * 97000 + (if b0151 then 0 else 1) * 97000 + (if b0152 then 0 else 1) * 97000 + (if b0153 then 0 else 1) * 97000 + (if b0154 then 0 else 1) * 97000 + (if b0155 then 0 else 1) * 97000 + (if b0156 then 0 else 1) * 97000 + (if b0157 then 0 else 1) * 97000 + (if b0158 then 0 else 1) * 97000 + (if b0159 then 0 else 1) * 97000 + (if b0160 then 0 else 1) * 97000 + (if b0161 then 0 else 1) * 97000 + (if b0162 then 0 else 1) * 97000 + (if b0163 then 0 else 1) * 97000 + (if b0164 then 0 else 1) * 97000 + (if b0165 then 0 else 1) * 97000 + (if b0166 then 0 else 1) * 97000 + (if b0167 then 0 else 1) * 97000 + (if b0168 then 0 else 1) * 97000 + (if b0169 then 0 else 1) * 97000 + (if b0170 then 0 else 1) * 97000 + (if b0171 then 0 else 1) * 97000 + (if b0172 then 0 else 1) * 97000 + (if b0173 then 0 else 1) * 97000 + (if b0174 then 0 else 1) * 97000 + (if b0175 then 0 else 1) * 97000 + (if b0176 then 0 else 1) * 97000 + (if b0177 then 0 else 1) * 97000 + (if b0178 then 0 else 1) * 97000 + (if b0179 then 0 else 1) * 97000 + (if b0180 then 0 else 1) * 97000 + (if b0181 then 0 else 1) * 97000 + (if b0182 then 0 else 1) * 97000 + (if b0183 then 0 else 1) * 97000 + (if b0184 then 0 else 1) * 97000 + (if b0185 then 0 else 1) * 97000 + (if b0186 then 0 else 1) * 97000 + (if b0187 then 0 else 1) * 97000 + (if b0188 then 0 else 1) * 97000 + (if b0189 then 0 else 1) * 97000 + (if b0190 then 0 else 1) * 97000 + (if b0191 then 0 else 1) * 97000 + (if b0192 then 0 else 1) * 97000 + (if b0193 then 0 else 1) * 97000 + (if b0194 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0211 then 0 else 1) * 97000 + (if b0212 then 0 else 1) * 97000 + (if b0213 then 0 else 1) * 97000 + (if b0214 then 0 else 1) * 97000 + (if b0215 then 0 else 1) * 97000 + (if b0216 then 0 else 1) * 97000 + (if b0217 then 0 else 1) * 97000 + (if b0218 then 0 else 1) * 97000 + (if b0219 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0221 then 0 else 1) * 97000 + (if b0222 then 0 else 1) * 97000 + (if b0223 then 0 else 1) * 97000 + (if b0224 then 0 else 1) * 97000 + (if b0225 then 0 else 1) * 97000 + (if b0226 then 0 else 1) * 97000 + (if b0227 then 0 else 1) * 97000 + (if b0228 then 0 else 1) * 97000 + (if b0229 then 0 else 1) * 97000 + (if b0230 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 14.191635
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1214910
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0004 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0006 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0013 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0015 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0020 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0026 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0028 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0037 then 0 else 1) * 97000 + (if b0038 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0040 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0051 then 0 else 1) * 97000 + (if b0052 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0054 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0063 then 0 else 1) * 97000 + (if b0064 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0066 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0076 then 0 else 1) * 97000 + (if b0077 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0079 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0125 then 0 else 1) * 97000 + (if b0138 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0146 then 0 else 1) * 97000 + (if b0147 then 0 else 1) * 97000 + (if b0148 then 0 else 1) * 97000 + (if b0149 then 0 else 1) * 97000 + (if b0150 then 0 else 1) * 97000 + (if b0151 then 0 else 1) * 97000 + (if b0152 then 0 else 1) * 97000 + (if b0153 then 0 else 1) * 97000 + (if b0154 then 0 else 1) * 97000 + (if b0155 then 0 else 1) * 97000 + (if b0156 then 0 else 1) * 97000 + (if b0157 then 0 else 1) * 97000 + (if b0158 then 0 else 1) * 97000 + (if b0159 then 0 else 1) * 97000 + (if b0160 then 0 else 1) * 97000 + (if b0161 then 0 else 1) * 97000 + (if b0162 then 0 else 1) * 97000 + (if b0163 then 0 else 1) * 97000 + (if b0164 then 0 else 1) * 97000 + (if b0165 then 0 else 1) * 97000 + (if b0166 then 0 else 1) * 97000 + (if b0167 then 0 else 1) * 97000 + (if b0168 then 0 else 1) * 97000 + (if b0169 then 0 else 1) * 97000 + (if b0170 then 0 else 1) * 97000 + (if b0171 then 0 else 1) * 97000 + (if b0172 then 0 else 1) * 97000 + (if b0173 then 0 else 1) * 97000 + (if b0174 then 0 else 1) * 97000 + (if b0175 then 0 else 1) * 97000 + (if b0176 then 0 else 1) * 97000 + (if b0177 then 0 else 1) * 97000 + (if b0178 then 0 else 1) * 97000 + (if b0179 then 0 else 1) * 97000 + (if b0180 then 0 else 1) * 97000 + (if b0181 then 0 else 1) * 97000 + (if b0182 then 0 else 1) * 97000 + (if b0183 then 0 else 1) * 97000 + (if b0184 then 0 else 1) * 97000 + (if b0185 then 0 else 1) * 97000 + (if b0186 then 0 else 1) * 97000 + (if b0187 then 0 else 1) * 97000 + (if b0188 then 0 else 1) * 97000 + (if b0189 then 0 else 1) * 97000 + (if b0190 then 0 else 1) * 97000 + (if b0191 then 0 else 1) * 97000 + (if b0192 then 0 else 1) * 97000 + (if b0193 then 0 else 1) * 97000 + (if b0194 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0211 then 0 else 1) * 97000 + (if b0212 then 0 else 1) * 97000 + (if b0213 then 0 else 1) * 97000 + (if b0214 then 0 else 1) * 97000 + (if b0215 then 0 else 1) * 97000 + (if b0216 then 0 else 1) * 97000 + (if b0217 then 0 else 1) * 97000 + (if b0218 then 0 else 1) * 97000 + (if b0219 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0221 then 0 else 1) * 97000 + (if b0222 then 0 else 1) * 97000 + (if b0223 then 0 else 1) * 97000 + (if b0224 then 0 else 1) * 97000 + (if b0225 then 0 else 1) * 97000 + (if b0226 then 0 else 1) * 97000 + (if b0227 then 0 else 1) * 97000 + (if b0228 then 0 else 1) * 97000 + (if b0229 then 0 else 1) * 97000 + (if b0230 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 12.627738
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1223000
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0004 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0006 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0013 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0015 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0020 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0026 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0028 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0037 then 0 else 1) * 97000 + (if b0038 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0040 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0051 then 0 else 1) * 97000 + (if b0052 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0054 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0063 then 0 else 1) * 97000 + (if b0064 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0066 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0076 then 0 else 1) * 97000 + (if b0077 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0079 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0138 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0146 then 0 else 1) * 97000 + (if b0147 then 0 else 1) * 97000 + (if b0148 then 0 else 1) * 97000 + (if b0149 then 0 else 1) * 97000 + (if b0150 then 0 else 1) * 97000 + (if b0151 then 0 else 1) * 97000 + (if b0152 then 0 else 1) * 97000 + (if b0153 then 0 else 1) * 97000 + (if b0154 then 0 else 1) * 97000 + (if b0155 then 0 else 1) * 97000 + (if b0156 then 0 else 1) * 97000 + (if b0157 then 0 else 1) * 97000 + (if b0158 then 0 else 1) * 97000 + (if b0159 then 0 else 1) * 97000 + (if b0160 then 0 else 1) * 97000 + (if b0161 then 0 else 1) * 97000 + (if b0162 then 0 else 1) * 97000 + (if b0163 then 0 else 1) * 97000 + (if b0164 then 0 else 1) * 97000 + (if b0165 then 0 else 1) * 97000 + (if b0166 then 0 else 1) * 97000 + (if b0167 then 0 else 1) * 97000 + (if b0168 then 0 else 1) * 97000 + (if b0169 then 0 else 1) * 97000 + (if b0170 then 0 else 1) * 97000 + (if b0171 then 0 else 1) * 97000 + (if b0172 then 0 else 1) * 97000 + (if b0173 then 0 else 1) * 97000 + (if b0174 then 0 else 1) * 97000 + (if b0175 then 0 else 1) * 97000 + (if b0176 then 0 else 1) * 97000 + (if b0177 then 0 else 1) * 97000 + (if b0178 then 0 else 1) * 97000 + (if b0179 then 0 else 1) * 97000 + (if b0180 then 0 else 1) * 97000 + (if b0181 then 0 else 1) * 97000 + (if b0182 then 0 else 1) * 97000 + (if b0183 then 0 else 1) * 97000 + (if b0184 then 0 else 1) * 97000 + (if b0185 then 0 else 1) * 97000 + (if b0186 then 0 else 1) * 97000 + (if b0187 then 0 else 1) * 97000 + (if b0188 then 0 else 1) * 97000 + (if b0189 then 0 else 1) * 97000 + (if b0190 then 0 else 1) * 97000 + (if b0191 then 0 else 1) * 97000 + (if b0192 then 0 else 1) * 97000 + (if b0193 then 0 else 1) * 97000 + (if b0194 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0211 then 0 else 1) * 97000 + (if b0212 then 0 else 1) * 97000 + (if b0213 then 0 else 1) * 97000 + (if b0214 then 0 else 1) * 97000 + (if b0215 then 0 else 1) * 97000 + (if b0216 then 0 else 1) * 97000 + (if b0217 then 0 else 1) * 97000 + (if b0218 then 0 else 1) * 97000 + (if b0219 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0221 then 0 else 1) * 97000 + (if b0222 then 0 else 1) * 97000 + (if b0223 then 0 else 1) * 97000 + (if b0224 then 0 else 1) * 97000 + (if b0225 then 0 else 1) * 97000 + (if b0226 then 0 else 1) * 97000 + (if b0227 then 0 else 1) * 97000 + (if b0228 then 0 else 1) * 97000 + (if b0229 then 0 else 1) * 97000 + (if b0230 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Prover Time taken = 12.258136
Added Horn clause: 6 => 7
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 8 && 0 && 0 => 10
Added Horn clause: 8 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 8 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 8 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Added Horn clause: 17 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1246340
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0020 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0026 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0028 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0037 then 0 else 1) * 97000 + (if b0038 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0040 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0138 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0194 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0211 then 0 else 1) * 97000 + (if b0212 then 0 else 1) * 97000 + (if b0213 then 0 else 1) * 97000 + (if b0214 then 0 else 1) * 97000 + (if b0215 then 0 else 1) * 97000 + (if b0216 then 0 else 1) * 97000 + (if b0217 then 0 else 1) * 97000 + (if b0218 then 0 else 1) * 97000 + (if b0219 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0221 then 0 else 1) * 97000 + (if b0222 then 0 else 1) * 97000 + (if b0223 then 0 else 1) * 97000 + (if b0224 then 0 else 1) * 97000 + (if b0225 then 0 else 1) * 97000 + (if b0226 then 0 else 1) * 97000 + (if b0227 then 0 else 1) * 97000 + (if b0228 then 0 else 1) * 97000 + (if b0229 then 0 else 1) * 97000 + (if b0230 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Prover Time taken = 11.317209
Added Horn clause: 8 && 19 && 0 && 0 && 13 && 0 && 12 => 20
Added Horn clause: 17 && 21 && 0 && 0 && 0 && 0 && 12 && 0 && 0 && 0 && 0 && 0 && 0 => 22
Added Horn clause: 8 && 23 && 0 && 0 && 13 && 0 && 12 && 0 && 0 && 0 && 0 && 0 && 0 => 24
Added Horn clause: 8 && 23 && 0 && 0 && 13 && 0 && 12 && 0 && 0 && 0 && 0 => 25
Added Horn clause: 8 && 26 && 0 && 0 && 0 && 0 && 12 && 0 && 0 && 0 && 0 && 0 && 0 => 27
Added Horn clause: 17 && 28 && 0 && 0 && 0 && 0 && 12 && 0 && 0 && 0 && 0 && 0 && 0 => 29
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1233310
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0020 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0138 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0215 then 0 else 1) * 97000 + (if b0216 then 0 else 1) * 97000 + (if b0217 then 0 else 1) * 97000 + (if b0218 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0221 then 0 else 1) * 97000 + (if b0222 then 0 else 1) * 97000 + (if b0227 then 0 else 1) * 97000 + (if b0228 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Prover Time taken = 11.392459
Added Horn clause: 17 && 30 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 31
Added Horn clause: 8 && 32 && 0 && 0 && 13 && 0 && 12 => 33
Added Horn clause: 17 && 34 && 0 && 0 && 13 && 0 && 12 && 35 && 29 && 0 && 0 && 0 && 0 => 36
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1245880
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0020 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0215 then 0 else 1) * 97000 + (if b0216 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0221 then 0 else 1) * 97000 + (if b0222 then 0 else 1) * 97000 + (if b0228 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Prover Time taken = 9.643748
Added Horn clause: 37 => 38
Added Horn clause: 17 && 39 && 0 && 0 && 13 && 0 && 0 => 40
Added Horn clause: 8 && 41 && 0 && 0 && 13 && 0 && 12 && 35 && 29 && 0 && 0 && 0 && 0 => 42
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1234100
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0216 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0221 then 0 else 1) * 97000 + (if b0222 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Prover Time taken = 8.443644
Added Horn clause: 17 && 43 && 0 && 0 && 0 && 0 && 0 && 44 && 29 && 0 && 45 && 0 && 0 => 46
Added Horn clause: 17 && 47 && 0 && 0 && 0 && 0 && 0 => 48
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1242920
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0216 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Prover Time taken = 10.065597
Added Horn clause: 49 && 50 && 0 && 0 && 0 && 0 && 0 => 51
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1279740
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0220 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Prover Time taken = 9.493587
Added Horn clause: 52 && 53 && 0 && 0 && 0 && 0 && 12 => 54
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1234080
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool, b0135: bool, b0136: bool, b0137: bool, b0138: bool, b0139: bool, b0140: bool, b0141: bool, b0142: bool, b0143: bool, b0144: bool, b0145: bool, b0146: bool, b0147: bool, b0148: bool, b0149: bool, b0150: bool, b0151: bool, b0152: bool, b0153: bool, b0154: bool, b0155: bool, b0156: bool, b0157: bool, b0158: bool, b0159: bool, b0160: bool, b0161: bool, b0162: bool, b0163: bool, b0164: bool, b0165: bool, b0166: bool, b0167: bool, b0168: bool, b0169: bool, b0170: bool, b0171: bool, b0172: bool, b0173: bool, b0174: bool, b0175: bool, b0176: bool, b0177: bool, b0178: bool, b0179: bool, b0180: bool, b0181: bool, b0182: bool, b0183: bool, b0184: bool, b0185: bool, b0186: bool, b0187: bool, b0188: bool, b0189: bool, b0190: bool, b0191: bool, b0192: bool, b0193: bool, b0194: bool, b0195: bool, b0196: bool, b0197: bool, b0198: bool, b0199: bool, b0200: bool, b0201: bool, b0202: bool, b0203: bool, b0204: bool, b0205: bool, b0206: bool, b0207: bool, b0208: bool, b0209: bool, b0210: bool, b0211: bool, b0212: bool, b0213: bool, b0214: bool, b0215: bool, b0216: bool, b0217: bool, b0218: bool, b0219: bool, b0220: bool, b0221: bool, b0222: bool, b0223: bool, b0224: bool, b0225: bool, b0226: bool, b0227: bool, b0228: bool, b0229: bool, b0230: bool, b0231: bool, b0232: bool, b0233: bool, b0234: bool, b0235: bool, b0236: bool, b0237: bool, b0238: bool, b0239: bool, b0240: bool, b0241: bool, b0242: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 97000 + (if b0001 then 0 else 1) * 97000 + (if b0002 then 0 else 1) * 97000 + (if b0003 then 0 else 1) * 97000 + (if b0005 then 0 else 1) * 97000 + (if b0007 then 0 else 1) * 97000 + (if b0008 then 0 else 1) * 97000 + (if b0009 then 0 else 1) * 97000 + (if b0010 then 0 else 1) * 97000 + (if b0011 then 0 else 1) * 97000 + (if b0012 then 0 else 1) * 97000 + (if b0014 then 0 else 1) * 97000 + (if b0016 then 0 else 1) * 97000 + (if b0017 then 0 else 1) * 97000 + (if b0018 then 0 else 1) * 97000 + (if b0019 then 0 else 1) * 97000 + (if b0021 then 0 else 1) * 97000 + (if b0022 then 0 else 1) * 97000 + (if b0023 then 0 else 1) * 97000 + (if b0024 then 0 else 1) * 97000 + (if b0025 then 0 else 1) * 97000 + (if b0027 then 0 else 1) * 97000 + (if b0029 then 0 else 1) * 97000 + (if b0030 then 0 else 1) * 97000 + (if b0031 then 0 else 1) * 97000 + (if b0032 then 0 else 1) * 97000 + (if b0033 then 0 else 1) * 97000 + (if b0034 then 0 else 1) * 97000 + (if b0035 then 0 else 1) * 97000 + (if b0036 then 0 else 1) * 97000 + (if b0039 then 0 else 1) * 97000 + (if b0041 then 0 else 1) * 97000 + (if b0042 then 0 else 1) * 97000 + (if b0043 then 0 else 1) * 97000 + (if b0044 then 0 else 1) * 97000 + (if b0045 then 0 else 1) * 97000 + (if b0046 then 0 else 1) * 97000 + (if b0047 then 0 else 1) * 97000 + (if b0048 then 0 else 1) * 97000 + (if b0049 then 0 else 1) * 97000 + (if b0050 then 0 else 1) * 97000 + (if b0053 then 0 else 1) * 97000 + (if b0055 then 0 else 1) * 97000 + (if b0056 then 0 else 1) * 97000 + (if b0057 then 0 else 1) * 97000 + (if b0058 then 0 else 1) * 97000 + (if b0059 then 0 else 1) * 97000 + (if b0060 then 0 else 1) * 97000 + (if b0061 then 0 else 1) * 97000 + (if b0062 then 0 else 1) * 97000 + (if b0065 then 0 else 1) * 97000 + (if b0067 then 0 else 1) * 97000 + (if b0068 then 0 else 1) * 97000 + (if b0069 then 0 else 1) * 97000 + (if b0070 then 0 else 1) * 97000 + (if b0071 then 0 else 1) * 97000 + (if b0072 then 0 else 1) * 97000 + (if b0073 then 0 else 1) * 97000 + (if b0074 then 0 else 1) * 97000 + (if b0075 then 0 else 1) * 97000 + (if b0078 then 0 else 1) * 97000 + (if b0080 then 0 else 1) * 97000 + (if b0081 then 0 else 1) * 97000 + (if b0082 then 0 else 1) * 97000 + (if b0083 then 0 else 1) * 97000 + (if b0084 then 0 else 1) * 97000 + (if b0085 then 0 else 1) * 97000 + (if b0086 then 0 else 1) * 97000 + (if b0087 then 0 else 1) * 97000 + (if b0139 then 0 else 1) * 97000 + (if b0140 then 0 else 1) * 97000 + (if b0141 then 0 else 1) * 97000 + (if b0142 then 0 else 1) * 97000 + (if b0143 then 0 else 1) * 97000 + (if b0144 then 0 else 1) * 97000 + (if b0145 then 0 else 1) * 97000 + (if b0195 then 0 else 1) * 97000 + (if b0196 then 0 else 1) * 97000 + (if b0197 then 0 else 1) * 97000 + (if b0198 then 0 else 1) * 97000 + (if b0199 then 0 else 1) * 97000 + (if b0200 then 0 else 1) * 97000 + (if b0201 then 0 else 1) * 97000 + (if b0202 then 0 else 1) * 97000 + (if b0203 then 0 else 1) * 97000 + (if b0204 then 0 else 1) * 97000 + (if b0205 then 0 else 1) * 97000 + (if b0206 then 0 else 1) * 97000 + (if b0207 then 0 else 1) * 97000 + (if b0208 then 0 else 1) * 97000 + (if b0209 then 0 else 1) * 97000 + (if b0210 then 0 else 1) * 97000 + (if b0231 then 0 else 1) * 97000 + (if b0232 then 0 else 1) * 97000 + (if b0233 then 0 else 1) * 97000 + (if b0234 then 0 else 1) * 97000 + (if b0235 then 0 else 1) * 97000 + (if b0236 then 0 else 1) * 97000 + (if b0237 then 0 else 1) * 97000 + (if b0238 then 0 else 1) * 97000 + (if b0239 then 0 else 1) * 97000 + (if b0240 then 0 else 1) * 97000 + (if b0241 then 0 else 1) * 97000 + (if b0242 then 0 else 1) * 97000 < 441
}
Prover Time taken = 8.733804
Prover time = 152.10
Number of prover queries = 14
Learner time = 1.58
Number of learner queries = 13
Total time: 155.28
Number of positive examples:6
Number of negative examples:0
Number of Horn clauses:26
verified

Boogie program verifier finished with 1 verified, 0 errors
8.73user 5.26system 2:36.92elapsed 8%CPU (0avgtext+0avgdata 93628maxresident)k
0inputs+1200outputs (1major+147011minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/3mm/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:27:19 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 34
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168143
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1243220
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0016 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0022 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 0.754812
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1260830
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 0.863662
Added Horn clause: 2 && 0 && 1 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/3mm/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1246430
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 + (if b0033 then 0 else 1) * 13000 < 441
}
Prover Time taken = 0.730899
Prover time = 2.52
Number of prover queries = 4
Learner time = 0.38
Number of learner queries = 3
Total time: 3.02
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
0.98user 1.18system 0:04.36elapsed 49%CPU (0avgtext+0avgdata 49364maxresident)k
0inputs+144outputs (1major+20256minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/3mm/kernel2.bpl.ice2.bpl
#################
Tue Apr 27 21:27:24 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 106
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.181555
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1183390
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0045 then 0 else 1) * 42000 + (if b0046 then 0 else 1) * 42000 + (if b0047 then 0 else 1) * 42000 + (if b0048 then 0 else 1) * 42000 + (if b0049 then 0 else 1) * 42000 + (if b0050 then 0 else 1) * 42000 + (if b0051 then 0 else 1) * 42000 + (if b0052 then 0 else 1) * 42000 + (if b0053 then 0 else 1) * 42000 + (if b0054 then 0 else 1) * 42000 + (if b0055 then 0 else 1) * 42000 + (if b0056 then 0 else 1) * 42000 + (if b0057 then 0 else 1) * 42000 + (if b0058 then 0 else 1) * 42000 + (if b0059 then 0 else 1) * 42000 + (if b0060 then 0 else 1) * 42000 + (if b0061 then 0 else 1) * 42000 + (if b0062 then 0 else 1) * 42000 + (if b0063 then 0 else 1) * 42000 + (if b0064 then 0 else 1) * 42000 + (if b0065 then 0 else 1) * 42000 + (if b0066 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.976954
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1190340
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0047 then 0 else 1) * 42000 + (if b0052 then 0 else 1) * 42000 + (if b0054 then 0 else 1) * 42000 + (if b0060 then 0 else 1) * 42000 + (if b0062 then 0 else 1) * 42000 + (if b0063 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.922316
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1199690
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0047 then 0 else 1) * 42000 + (if b0060 then 0 else 1) * 42000 + (if b0062 then 0 else 1) * 42000 + (if b0063 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.944084
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1194100
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0047 then 0 else 1) * 42000 + (if b0060 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.0454
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1205010
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0060 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.362467
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1184870
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 3.131166
Added Horn clause: 6 => 7
Added Horn clause: 8 && 0 && 0 => 9
Added Horn clause: 10 && 0 && 0 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 10 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 10 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 14 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 16 && 0 && 0 && 0 && 0 && 0 && 0 => 17
Added Horn clause: 16 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1213420
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 2.41199
Added Horn clause: 19 && 0 && 0 && 0 && 0 && 0 && 0 => 20
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1224180
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 3.875904
Prover time = 24.85
Number of prover queries = 9
Learner time = 0.96
Number of learner queries = 8
Total time: 26.20
Number of positive examples:6
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
3.11user 2.83system 0:27.65elapsed 21%CPU (0avgtext+0avgdata 69224maxresident)k
0inputs+440outputs (1major+56515minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/atax/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:27:51 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.166972
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1198330
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.177633
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1185790
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.205537
Prover time = 0.55
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.88
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.05system 0:02.18elapsed 83%CPU (0avgtext+0avgdata 43312maxresident)k
0inputs+104outputs (1major+14006minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/atax/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:27:53 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 82
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.179314
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1193380
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0034 then 0 else 1) * 32000 + (if b0035 then 0 else 1) * 32000 + (if b0036 then 0 else 1) * 32000 + (if b0037 then 0 else 1) * 32000 + (if b0038 then 0 else 1) * 32000 + (if b0039 then 0 else 1) * 32000 + (if b0040 then 0 else 1) * 32000 + (if b0041 then 0 else 1) * 32000 + (if b0042 then 0 else 1) * 32000 + (if b0043 then 0 else 1) * 32000 + (if b0044 then 0 else 1) * 32000 + (if b0045 then 0 else 1) * 32000 + (if b0046 then 0 else 1) * 32000 + (if b0047 then 0 else 1) * 32000 + (if b0048 then 0 else 1) * 32000 + (if b0049 then 0 else 1) * 32000 + (if b0050 then 0 else 1) * 32000 + (if b0051 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.614248
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1195600
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0034 then 0 else 1) * 32000 + (if b0036 then 0 else 1) * 32000 + (if b0040 then 0 else 1) * 32000 + (if b0048 then 0 else 1) * 32000 + (if b0049 then 0 else 1) * 32000 + (if b0050 then 0 else 1) * 32000 + (if b0051 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.733518
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1278700
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0036 then 0 else 1) * 32000 + (if b0048 then 0 else 1) * 32000 + (if b0051 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.730754
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1203170
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0051 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.572702
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1191550
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 1.67594
Added Horn clause: 5 => 6
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 8
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 10 && 0 && 0 => 11
Added Horn clause: 12 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 14 && 0 && 0 && 0 && 0 => 15
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1247120
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 1.144185
Added Horn clause: 16 && 0 && 0 && 0 && 0 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1189980
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 2.300658
Added Horn clause: 18 && 0 && 0 && 0 && 0 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/atax/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1195220
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 1.645549
Prover time = 13.60
Number of prover queries = 9
Learner time = 0.97
Number of learner queries = 8
Total time: 14.89
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
2.18user 2.35system 0:16.29elapsed 27%CPU (0avgtext+0avgdata 67168maxresident)k
0inputs+368outputs (1major+44436minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/atax/kernel2.bpl.ice2.bpl
#################
Tue Apr 27 21:28:10 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 100
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.181649
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1164120
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0054 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0057 then 0 else 1) * 40000 + (if b0058 then 0 else 1) * 40000 + (if b0059 then 0 else 1) * 40000 + (if b0060 then 0 else 1) * 40000 + (if b0061 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0063 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0065 then 0 else 1) * 40000 + (if b0066 then 0 else 1) * 40000 + (if b0067 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0069 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.537397
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1196780
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0054 then 0 else 1) * 40000 + (if b0060 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.818166
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1195330
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0054 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.77283
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1210480
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0054 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.961934
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1206490
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0054 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.095658
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1215830
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 2.926849
Added Horn clause: 6 => 7
Added Horn clause: 8 && 0 && 0 => 9
Added Horn clause: 8 && 0 && 0 => 10
Added Horn clause: 11 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 11 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 11 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 11 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 16 && 0 && 0 && 0 && 0 && 0 && 0 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1205720
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 2.036453
Added Horn clause: 18 && 0 && 0 && 0 && 0 && 0 && 0 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1202820
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 2.034075
Prover time = 22.37
Number of prover queries = 9
Learner time = 0.96
Number of learner queries = 8
Total time: 23.69
Number of positive examples:6
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
3.14user 2.89system 0:25.13elapsed 24%CPU (0avgtext+0avgdata 71648maxresident)k
0inputs+376outputs (1major+55494minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/bicg/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:28:35 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 106
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.180229
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1199870
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0045 then 0 else 1) * 42000 + (if b0046 then 0 else 1) * 42000 + (if b0047 then 0 else 1) * 42000 + (if b0048 then 0 else 1) * 42000 + (if b0049 then 0 else 1) * 42000 + (if b0050 then 0 else 1) * 42000 + (if b0051 then 0 else 1) * 42000 + (if b0052 then 0 else 1) * 42000 + (if b0053 then 0 else 1) * 42000 + (if b0054 then 0 else 1) * 42000 + (if b0055 then 0 else 1) * 42000 + (if b0056 then 0 else 1) * 42000 + (if b0057 then 0 else 1) * 42000 + (if b0058 then 0 else 1) * 42000 + (if b0059 then 0 else 1) * 42000 + (if b0060 then 0 else 1) * 42000 + (if b0061 then 0 else 1) * 42000 + (if b0062 then 0 else 1) * 42000 + (if b0063 then 0 else 1) * 42000 + (if b0064 then 0 else 1) * 42000 + (if b0065 then 0 else 1) * 42000 + (if b0066 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.463773
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1193310
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0046 then 0 else 1) * 42000 + (if b0050 then 0 else 1) * 42000 + (if b0052 then 0 else 1) * 42000 + (if b0054 then 0 else 1) * 42000 + (if b0056 then 0 else 1) * 42000 + (if b0064 then 0 else 1) * 42000 + (if b0066 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.890463
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1213130
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0052 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.327677
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1209830
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 2.50307
Added Horn clause: 4 && 0 && 0 && 0 && 0 && 0 && 0 => 5
Added Horn clause: 6 => 7
Added Horn clause: 8 && 0 && 0 => 9
Added Horn clause: 10 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 10 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 10 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 14 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 16 && 0 && 0 && 0 && 0 && 0 && 0 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1180880
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 2.541299
Added Horn clause: 18 && 0 && 0 && 0 && 0 && 0 && 0 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/bicg/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1201110
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 2.526018
Prover time = 16.43
Number of prover queries = 7
Learner time = 0.72
Number of learner queries = 6
Total time: 17.41
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
2.41user 2.30system 0:18.89elapsed 24%CPU (0avgtext+0avgdata 68448maxresident)k
0inputs+336outputs (1major+44913minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/bicg/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:28:54 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168552
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1171740
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.175492
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1187840
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.145345
Prover time = 0.49
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.80
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.07system 0:02.11elapsed 86%CPU (0avgtext+0avgdata 43144maxresident)k
0inputs+96outputs (1major+14200minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/doitgen/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:28:56 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 82
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.182371
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1188540
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0034 then 0 else 1) * 32000 + (if b0035 then 0 else 1) * 32000 + (if b0036 then 0 else 1) * 32000 + (if b0037 then 0 else 1) * 32000 + (if b0038 then 0 else 1) * 32000 + (if b0039 then 0 else 1) * 32000 + (if b0040 then 0 else 1) * 32000 + (if b0041 then 0 else 1) * 32000 + (if b0042 then 0 else 1) * 32000 + (if b0043 then 0 else 1) * 32000 + (if b0044 then 0 else 1) * 32000 + (if b0045 then 0 else 1) * 32000 + (if b0046 then 0 else 1) * 32000 + (if b0047 then 0 else 1) * 32000 + (if b0048 then 0 else 1) * 32000 + (if b0049 then 0 else 1) * 32000 + (if b0050 then 0 else 1) * 32000 + (if b0051 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.845272
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1199760
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0035 then 0 else 1) * 32000 + (if b0037 then 0 else 1) * 32000 + (if b0038 then 0 else 1) * 32000 + (if b0039 then 0 else 1) * 32000 + (if b0042 then 0 else 1) * 32000 + (if b0045 then 0 else 1) * 32000 + (if b0046 then 0 else 1) * 32000 + (if b0047 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.962829
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1233170
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0039 then 0 else 1) * 32000 + (if b0047 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.665012
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1221750
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 1.504023
Added Horn clause: 4 => 5
Added Horn clause: 6 && 0 && 0 && 0 && 0 => 7
Added Horn clause: 6 && 0 && 0 => 8
Added Horn clause: 6 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 10 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 10 && 0 && 0 && 0 && 0 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1197650
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 0.97334
Added Horn clause: 13 && 0 && 0 && 0 && 0 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1196460
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 1.211728
Added Horn clause: 13 && 0 && 0 && 0 && 0 => 15
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1223880
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 1.469078
Prover time = 10.81
Number of prover queries = 8
Learner time = 0.85
Number of learner queries = 7
Total time: 11.89
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.97user 2.09system 0:13.31elapsed 30%CPU (0avgtext+0avgdata 64680maxresident)k
0inputs+336outputs (1major+39618minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/doitgen/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:29:09 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168241
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1165970
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.18242
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/doitgen/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1198120
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.186591
Prover time = 0.54
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.85
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.08system 0:02.18elapsed 84%CPU (0avgtext+0avgdata 44024maxresident)k
0inputs+96outputs (1major+14930minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/doitgen/kernel2.bpl.ice2.bpl
#################
Tue Apr 27 21:29:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 82
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.17955
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1179380
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0034 then 0 else 1) * 32000 + (if b0035 then 0 else 1) * 32000 + (if b0036 then 0 else 1) * 32000 + (if b0037 then 0 else 1) * 32000 + (if b0038 then 0 else 1) * 32000 + (if b0039 then 0 else 1) * 32000 + (if b0040 then 0 else 1) * 32000 + (if b0041 then 0 else 1) * 32000 + (if b0042 then 0 else 1) * 32000 + (if b0043 then 0 else 1) * 32000 + (if b0044 then 0 else 1) * 32000 + (if b0045 then 0 else 1) * 32000 + (if b0046 then 0 else 1) * 32000 + (if b0047 then 0 else 1) * 32000 + (if b0048 then 0 else 1) * 32000 + (if b0049 then 0 else 1) * 32000 + (if b0050 then 0 else 1) * 32000 + (if b0051 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.658368
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1194570
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0038 then 0 else 1) * 32000 + (if b0039 then 0 else 1) * 32000 + (if b0040 then 0 else 1) * 32000 + (if b0041 then 0 else 1) * 32000 + (if b0045 then 0 else 1) * 32000 + (if b0048 then 0 else 1) * 32000 + (if b0049 then 0 else 1) * 32000 + (if b0051 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.842787
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1213500
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0038 then 0 else 1) * 32000 + (if b0041 then 0 else 1) * 32000 + (if b0045 then 0 else 1) * 32000 + (if b0048 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.696699
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1240020
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0041 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.609597
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1213350
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0004 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0006 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0013 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0015 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0022 then 0 else 1) * 32000 + (if b0023 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0025 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0063 then 0 else 1) * 32000 + (if b0064 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0067 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0070 then 0 else 1) * 32000 + (if b0071 then 0 else 1) * 32000 + (if b0072 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 1.769704
Added Horn clause: 5 => 6
Added Horn clause: 7 && 0 && 0 => 8
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 10
Added Horn clause: 11 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1244350
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0052 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0065 then 0 else 1) * 32000 + (if b0066 then 0 else 1) * 32000 + (if b0068 then 0 else 1) * 32000 + (if b0069 then 0 else 1) * 32000 + (if b0073 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 1.576496
Added Horn clause: 14 => 15
Added Horn clause: 16 && 17 && 12 && 0 && 0 => 18
Added Horn clause: 19 && 0 && 0 && 0 && 0 => 20
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1171500
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0053 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 1.41132
Added Horn clause: 7 && 0 && 0 && 0 && 0 => 21
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1195870
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 32000 + (if b0001 then 0 else 1) * 32000 + (if b0002 then 0 else 1) * 32000 + (if b0003 then 0 else 1) * 32000 + (if b0005 then 0 else 1) * 32000 + (if b0007 then 0 else 1) * 32000 + (if b0008 then 0 else 1) * 32000 + (if b0009 then 0 else 1) * 32000 + (if b0010 then 0 else 1) * 32000 + (if b0011 then 0 else 1) * 32000 + (if b0012 then 0 else 1) * 32000 + (if b0014 then 0 else 1) * 32000 + (if b0016 then 0 else 1) * 32000 + (if b0017 then 0 else 1) * 32000 + (if b0018 then 0 else 1) * 32000 + (if b0019 then 0 else 1) * 32000 + (if b0020 then 0 else 1) * 32000 + (if b0021 then 0 else 1) * 32000 + (if b0024 then 0 else 1) * 32000 + (if b0026 then 0 else 1) * 32000 + (if b0027 then 0 else 1) * 32000 + (if b0028 then 0 else 1) * 32000 + (if b0029 then 0 else 1) * 32000 + (if b0030 then 0 else 1) * 32000 + (if b0031 then 0 else 1) * 32000 + (if b0032 then 0 else 1) * 32000 + (if b0033 then 0 else 1) * 32000 + (if b0054 then 0 else 1) * 32000 + (if b0055 then 0 else 1) * 32000 + (if b0056 then 0 else 1) * 32000 + (if b0057 then 0 else 1) * 32000 + (if b0058 then 0 else 1) * 32000 + (if b0059 then 0 else 1) * 32000 + (if b0060 then 0 else 1) * 32000 + (if b0061 then 0 else 1) * 32000 + (if b0062 then 0 else 1) * 32000 + (if b0074 then 0 else 1) * 32000 + (if b0075 then 0 else 1) * 32000 + (if b0076 then 0 else 1) * 32000 + (if b0077 then 0 else 1) * 32000 + (if b0078 then 0 else 1) * 32000 + (if b0079 then 0 else 1) * 32000 + (if b0080 then 0 else 1) * 32000 + (if b0081 then 0 else 1) * 32000 < 441
}
Prover Time taken = 2.527219
Prover time = 14.27
Number of prover queries = 9
Learner time = 0.97
Number of learner queries = 8
Total time: 15.52
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:10
verified

Boogie program verifier finished with 1 verified, 0 errors
2.27user 2.36system 0:16.92elapsed 27%CPU (0avgtext+0avgdata 66552maxresident)k
0inputs+368outputs (1major+44290minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/mvt/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:29:28 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 106
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.176847
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1185440
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0045 then 0 else 1) * 42000 + (if b0046 then 0 else 1) * 42000 + (if b0047 then 0 else 1) * 42000 + (if b0048 then 0 else 1) * 42000 + (if b0049 then 0 else 1) * 42000 + (if b0050 then 0 else 1) * 42000 + (if b0051 then 0 else 1) * 42000 + (if b0052 then 0 else 1) * 42000 + (if b0053 then 0 else 1) * 42000 + (if b0054 then 0 else 1) * 42000 + (if b0055 then 0 else 1) * 42000 + (if b0056 then 0 else 1) * 42000 + (if b0057 then 0 else 1) * 42000 + (if b0058 then 0 else 1) * 42000 + (if b0059 then 0 else 1) * 42000 + (if b0060 then 0 else 1) * 42000 + (if b0061 then 0 else 1) * 42000 + (if b0062 then 0 else 1) * 42000 + (if b0063 then 0 else 1) * 42000 + (if b0064 then 0 else 1) * 42000 + (if b0065 then 0 else 1) * 42000 + (if b0066 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.137622
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1201560
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0047 then 0 else 1) * 42000 + (if b0051 then 0 else 1) * 42000 + (if b0055 then 0 else 1) * 42000 + (if b0057 then 0 else 1) * 42000 + (if b0059 then 0 else 1) * 42000 + (if b0060 then 0 else 1) * 42000 + (if b0062 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.964358
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1276210
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0055 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.234506
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1195030
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0004 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0006 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0013 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0015 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0022 then 0 else 1) * 42000 + (if b0023 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0025 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0033 then 0 else 1) * 42000 + (if b0034 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0036 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0079 then 0 else 1) * 42000 + (if b0080 then 0 else 1) * 42000 + (if b0081 then 0 else 1) * 42000 + (if b0082 then 0 else 1) * 42000 + (if b0083 then 0 else 1) * 42000 + (if b0084 then 0 else 1) * 42000 + (if b0085 then 0 else 1) * 42000 + (if b0086 then 0 else 1) * 42000 + (if b0087 then 0 else 1) * 42000 + (if b0088 then 0 else 1) * 42000 + (if b0089 then 0 else 1) * 42000 + (if b0090 then 0 else 1) * 42000 + (if b0091 then 0 else 1) * 42000 + (if b0092 then 0 else 1) * 42000 + (if b0093 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 3.557725
Added Horn clause: 4 => 5
Added Horn clause: 6 && 0 && 0 && 0 && 0 && 0 && 0 => 7
Added Horn clause: 8 && 0 && 0 => 9
Added Horn clause: 10 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 10 && 0 && 0 && 0 && 0 && 0 && 0 => 12
Added Horn clause: 13 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 6 && 0 && 0 && 0 && 0 && 0 && 0 => 15
Added Horn clause: 6 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.0862450
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0067 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 2.968044
Added Horn clause: 17 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1193360
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0068 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 3.294445
Added Horn clause: 19 && 0 && 0 && 0 && 0 && 0 && 0 => 20
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/kernels/mvt/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1204830
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 42000 + (if b0001 then 0 else 1) * 42000 + (if b0002 then 0 else 1) * 42000 + (if b0003 then 0 else 1) * 42000 + (if b0005 then 0 else 1) * 42000 + (if b0007 then 0 else 1) * 42000 + (if b0008 then 0 else 1) * 42000 + (if b0009 then 0 else 1) * 42000 + (if b0010 then 0 else 1) * 42000 + (if b0011 then 0 else 1) * 42000 + (if b0012 then 0 else 1) * 42000 + (if b0014 then 0 else 1) * 42000 + (if b0016 then 0 else 1) * 42000 + (if b0017 then 0 else 1) * 42000 + (if b0018 then 0 else 1) * 42000 + (if b0019 then 0 else 1) * 42000 + (if b0020 then 0 else 1) * 42000 + (if b0021 then 0 else 1) * 42000 + (if b0024 then 0 else 1) * 42000 + (if b0026 then 0 else 1) * 42000 + (if b0027 then 0 else 1) * 42000 + (if b0028 then 0 else 1) * 42000 + (if b0029 then 0 else 1) * 42000 + (if b0030 then 0 else 1) * 42000 + (if b0031 then 0 else 1) * 42000 + (if b0032 then 0 else 1) * 42000 + (if b0035 then 0 else 1) * 42000 + (if b0037 then 0 else 1) * 42000 + (if b0038 then 0 else 1) * 42000 + (if b0039 then 0 else 1) * 42000 + (if b0040 then 0 else 1) * 42000 + (if b0041 then 0 else 1) * 42000 + (if b0042 then 0 else 1) * 42000 + (if b0043 then 0 else 1) * 42000 + (if b0044 then 0 else 1) * 42000 + (if b0069 then 0 else 1) * 42000 + (if b0070 then 0 else 1) * 42000 + (if b0071 then 0 else 1) * 42000 + (if b0072 then 0 else 1) * 42000 + (if b0073 then 0 else 1) * 42000 + (if b0074 then 0 else 1) * 42000 + (if b0075 then 0 else 1) * 42000 + (if b0076 then 0 else 1) * 42000 + (if b0077 then 0 else 1) * 42000 + (if b0078 then 0 else 1) * 42000 + (if b0094 then 0 else 1) * 42000 + (if b0095 then 0 else 1) * 42000 + (if b0096 then 0 else 1) * 42000 + (if b0097 then 0 else 1) * 42000 + (if b0098 then 0 else 1) * 42000 + (if b0099 then 0 else 1) * 42000 + (if b0100 then 0 else 1) * 42000 + (if b0101 then 0 else 1) * 42000 + (if b0102 then 0 else 1) * 42000 + (if b0103 then 0 else 1) * 42000 + (if b0104 then 0 else 1) * 42000 + (if b0105 then 0 else 1) * 42000 < 441
}
Prover Time taken = 3.480303
Prover time = 22.81
Number of prover queries = 8
Learner time = 0.81
Number of learner queries = 7
Total time: 23.98
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:10
verified

Boogie program verifier finished with 1 verified, 0 errors
2.47user 2.41system 0:25.41elapsed 19%CPU (0avgtext+0avgdata 69648maxresident)k
0inputs+416outputs (1major+48283minor)pagefaults 0swaps
FILE:polybench/linear-algebra/kernels/mvt/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:29:54 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167773
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1187790
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.14086
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1192150
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.249845
Prover time = 0.56
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.88
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.74user 1.09system 0:02.19elapsed 83%CPU (0avgtext+0avgdata 43592maxresident)k
0inputs+104outputs (1major+14864minor)pagefaults 0swaps
FILE:polybench/linear-algebra/solvers/cholesky/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:29:56 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 45
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168864
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1184780
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0001 then 0 else 1) * 18000 + (if b0002 then 0 else 1) * 18000 + (if b0003 then 0 else 1) * 18000 + (if b0004 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0008 then 0 else 1) * 18000 + (if b0009 then 0 else 1) * 18000 + (if b0010 then 0 else 1) * 18000 + (if b0011 then 0 else 1) * 18000 + (if b0012 then 0 else 1) * 18000 + (if b0013 then 0 else 1) * 18000 + (if b0014 then 0 else 1) * 18000 + (if b0015 then 0 else 1) * 18000 + (if b0016 then 0 else 1) * 18000 + (if b0017 then 0 else 1) * 18000 + (if b0018 then 0 else 1) * 18000 + (if b0019 then 0 else 1) * 18000 + (if b0020 then 0 else 1) * 18000 + (if b0021 then 0 else 1) * 18000 + (if b0022 then 0 else 1) * 18000 + (if b0023 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0025 then 0 else 1) * 18000 + (if b0026 then 0 else 1) * 18000 + (if b0027 then 0 else 1) * 18000 + (if b0028 then 0 else 1) * 18000 + (if b0029 then 0 else 1) * 18000 + (if b0030 then 0 else 1) * 18000 + (if b0031 then 0 else 1) * 18000 + (if b0032 then 0 else 1) * 18000 + (if b0033 then 0 else 1) * 18000 + (if b0034 then 0 else 1) * 18000 + (if b0035 then 0 else 1) * 18000 + (if b0036 then 0 else 1) * 18000 + (if b0037 then 0 else 1) * 18000 + (if b0038 then 0 else 1) * 18000 + (if b0039 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 + (if b0041 then 0 else 1) * 18000 + (if b0042 then 0 else 1) * 18000 + (if b0043 then 0 else 1) * 18000 + (if b0044 then 0 else 1) * 18000 < 441
}
Prover Time taken = 1.087614
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1294740
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0001 then 0 else 1) * 18000 + (if b0003 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0008 then 0 else 1) * 18000 + (if b0011 then 0 else 1) * 18000 + (if b0013 then 0 else 1) * 18000 + (if b0014 then 0 else 1) * 18000 + (if b0015 then 0 else 1) * 18000 + (if b0016 then 0 else 1) * 18000 + (if b0017 then 0 else 1) * 18000 + (if b0018 then 0 else 1) * 18000 + (if b0019 then 0 else 1) * 18000 + (if b0020 then 0 else 1) * 18000 + (if b0021 then 0 else 1) * 18000 + (if b0022 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0026 then 0 else 1) * 18000 + (if b0027 then 0 else 1) * 18000 + (if b0028 then 0 else 1) * 18000 + (if b0029 then 0 else 1) * 18000 + (if b0030 then 0 else 1) * 18000 + (if b0032 then 0 else 1) * 18000 + (if b0033 then 0 else 1) * 18000 + (if b0034 then 0 else 1) * 18000 + (if b0035 then 0 else 1) * 18000 + (if b0036 then 0 else 1) * 18000 + (if b0037 then 0 else 1) * 18000 + (if b0038 then 0 else 1) * 18000 + (if b0039 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 + (if b0041 then 0 else 1) * 18000 + (if b0042 then 0 else 1) * 18000 + (if b0043 then 0 else 1) * 18000 + (if b0044 then 0 else 1) * 18000 < 441
}
Prover Time taken = 2.333324
Added Horn clause: 0 => 6
Added Horn clause: 0 && 0 && 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1196970
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0001 then 0 else 1) * 18000 + (if b0003 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0008 then 0 else 1) * 18000 + (if b0011 then 0 else 1) * 18000 + (if b0013 then 0 else 1) * 18000 + (if b0014 then 0 else 1) * 18000 + (if b0015 then 0 else 1) * 18000 + (if b0020 then 0 else 1) * 18000 + (if b0021 then 0 else 1) * 18000 + (if b0022 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0026 then 0 else 1) * 18000 + (if b0027 then 0 else 1) * 18000 + (if b0028 then 0 else 1) * 18000 + (if b0029 then 0 else 1) * 18000 + (if b0030 then 0 else 1) * 18000 + (if b0032 then 0 else 1) * 18000 + (if b0033 then 0 else 1) * 18000 + (if b0035 then 0 else 1) * 18000 + (if b0036 then 0 else 1) * 18000 + (if b0037 then 0 else 1) * 18000 + (if b0038 then 0 else 1) * 18000 + (if b0039 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 + (if b0041 then 0 else 1) * 18000 + (if b0042 then 0 else 1) * 18000 + (if b0043 then 0 else 1) * 18000 + (if b0044 then 0 else 1) * 18000 < 441
}
Prover Time taken = 2.213526
Added Horn clause: 0 && 0 && 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1181970
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0001 then 0 else 1) * 18000 + (if b0003 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0008 then 0 else 1) * 18000 + (if b0011 then 0 else 1) * 18000 + (if b0013 then 0 else 1) * 18000 + (if b0014 then 0 else 1) * 18000 + (if b0015 then 0 else 1) * 18000 + (if b0020 then 0 else 1) * 18000 + (if b0021 then 0 else 1) * 18000 + (if b0022 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0026 then 0 else 1) * 18000 + (if b0027 then 0 else 1) * 18000 + (if b0028 then 0 else 1) * 18000 + (if b0032 then 0 else 1) * 18000 + (if b0033 then 0 else 1) * 18000 + (if b0035 then 0 else 1) * 18000 + (if b0036 then 0 else 1) * 18000 + (if b0037 then 0 else 1) * 18000 + (if b0038 then 0 else 1) * 18000 + (if b0039 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 + (if b0041 then 0 else 1) * 18000 + (if b0042 then 0 else 1) * 18000 + (if b0043 then 0 else 1) * 18000 + (if b0044 then 0 else 1) * 18000 < 441
}
Prover Time taken = 2.360248
Added Horn clause: 0 && 0 && 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1181350
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0001 then 0 else 1) * 18000 + (if b0003 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0008 then 0 else 1) * 18000 + (if b0011 then 0 else 1) * 18000 + (if b0013 then 0 else 1) * 18000 + (if b0014 then 0 else 1) * 18000 + (if b0015 then 0 else 1) * 18000 + (if b0020 then 0 else 1) * 18000 + (if b0021 then 0 else 1) * 18000 + (if b0022 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0026 then 0 else 1) * 18000 + (if b0027 then 0 else 1) * 18000 + (if b0028 then 0 else 1) * 18000 + (if b0035 then 0 else 1) * 18000 + (if b0036 then 0 else 1) * 18000 + (if b0037 then 0 else 1) * 18000 + (if b0038 then 0 else 1) * 18000 + (if b0039 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 + (if b0041 then 0 else 1) * 18000 + (if b0042 then 0 else 1) * 18000 + (if b0043 then 0 else 1) * 18000 + (if b0044 then 0 else 1) * 18000 < 441
}
Prover Time taken = 2.172238
Added Horn clause: 0 && 0 && 0 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1214860
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 18000 + (if b0001 then 0 else 1) * 18000 + (if b0003 then 0 else 1) * 18000 + (if b0005 then 0 else 1) * 18000 + (if b0006 then 0 else 1) * 18000 + (if b0007 then 0 else 1) * 18000 + (if b0008 then 0 else 1) * 18000 + (if b0011 then 0 else 1) * 18000 + (if b0013 then 0 else 1) * 18000 + (if b0014 then 0 else 1) * 18000 + (if b0015 then 0 else 1) * 18000 + (if b0020 then 0 else 1) * 18000 + (if b0021 then 0 else 1) * 18000 + (if b0024 then 0 else 1) * 18000 + (if b0026 then 0 else 1) * 18000 + (if b0027 then 0 else 1) * 18000 + (if b0028 then 0 else 1) * 18000 + (if b0035 then 0 else 1) * 18000 + (if b0036 then 0 else 1) * 18000 + (if b0037 then 0 else 1) * 18000 + (if b0038 then 0 else 1) * 18000 + (if b0039 then 0 else 1) * 18000 + (if b0040 then 0 else 1) * 18000 + (if b0041 then 0 else 1) * 18000 + (if b0042 then 0 else 1) * 18000 + (if b0043 then 0 else 1) * 18000 + (if b0044 then 0 else 1) * 18000 < 441
}
Prover Time taken = 2.38928
Prover time = 12.73
Number of prover queries = 7
Learner time = 0.73
Number of learner queries = 6
Total time: 13.63
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:10
verified

Boogie program verifier finished with 1 verified, 0 errors
1.22user 1.53system 0:14.99elapsed 18%CPU (0avgtext+0avgdata 55976maxresident)k
0inputs+256outputs (1major+28758minor)pagefaults 0swaps
FILE:polybench/linear-algebra/solvers/cholesky/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:30:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel5.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel5.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $kernel5
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.419898
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1229130
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 7.810681
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/cholesky/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1204560
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 32.507004
Prover time = 40.74
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 41.06
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.81user 1.13system 0:42.38elapsed 4%CPU (0avgtext+0avgdata 44376maxresident)k
0inputs+96outputs (1major+15155minor)pagefaults 0swaps
FILE:polybench/linear-algebra/solvers/cholesky/kernel5.bpl.ice2.bpl
#################
Tue Apr 27 21:30:53 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.173534
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1169280
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.183669
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1232820
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.292345
Prover time = 0.65
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.97
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.73user 1.10system 0:02.30elapsed 80%CPU (0avgtext+0avgdata 43544maxresident)k
0inputs+112outputs (1major+14058minor)pagefaults 0swaps
FILE:polybench/linear-algebra/solvers/durbin/kernel2.bpl.ice2.bpl
#################
Tue Apr 27 21:30:56 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel9.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel9.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 25
Generating VC of $kernel9
Verifying $kernel9: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.183976
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel9.bpl.ice2.bpl
Total learner time was 00:00:00.1168060
Verifying $kernel9: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,0,1,1,1,1,1,1: positive
Prover Time taken = 0.671618
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel9.bpl.ice2.bpl
Total learner time was 00:00:00.1200530
Verifying $kernel9: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.890447
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel9.bpl.ice2.bpl
Total learner time was 00:00:00.1252330
Verifying $kernel9: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1: positive
Prover Time taken = 0.585319
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel9.bpl.ice2.bpl
Total learner time was 00:00:00.1176180
Verifying $kernel9: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.646055
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel9.bpl.ice2.bpl
Total learner time was 00:00:00.1174120
Verifying $kernel9: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.758035
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel9.bpl.ice2.bpl
Total learner time was 00:00:00.1192870
Verifying $kernel9: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.419334
Added Horn clause: 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/durbin/kernel9.bpl.ice2.bpl
Total learner time was 00:00:00.1195710
Verifying $kernel9: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0010 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.91602
Prover time = 5.07
Number of prover queries = 8
Learner time = 0.84
Number of learner queries = 7
Total time: 6.07
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
1.22user 1.60system 0:07.44elapsed 37%CPU (0avgtext+0avgdata 50264maxresident)k
0inputs+280outputs (1major+26876minor)pagefaults 0swaps
FILE:polybench/linear-algebra/solvers/durbin/kernel9.bpl.ice2.bpl
#################
Tue Apr 27 21:31:03 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/gramschmidt/kernel5.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/gramschmidt/kernel5.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 32
Generating VC of $kernel5
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171333
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/gramschmidt/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1167640
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0002 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0004 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0009 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0011 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0015 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0019 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0021 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0026 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 2.978697
Added Horn clause: 0 && 0 && 0 => 1
Added Horn clause: 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/gramschmidt/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1173570
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0025 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 10.881044
Added Horn clause: 4 && 0 && 2 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/gramschmidt/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1263300
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0018 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 10.577263
Added Horn clause: 0 && 0 && 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/gramschmidt/kernel5.bpl.ice2.bpl
Total learner time was 00:00:00.1214140
Verifying $kernel5: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 12000 + (if b0001 then 0 else 1) * 12000 + (if b0003 then 0 else 1) * 12000 + (if b0005 then 0 else 1) * 12000 + (if b0006 then 0 else 1) * 12000 + (if b0007 then 0 else 1) * 12000 + (if b0008 then 0 else 1) * 12000 + (if b0010 then 0 else 1) * 12000 + (if b0012 then 0 else 1) * 12000 + (if b0013 then 0 else 1) * 12000 + (if b0014 then 0 else 1) * 12000 + (if b0016 then 0 else 1) * 12000 + (if b0017 then 0 else 1) * 12000 + (if b0020 then 0 else 1) * 12000 + (if b0022 then 0 else 1) * 12000 + (if b0023 then 0 else 1) * 12000 + (if b0024 then 0 else 1) * 12000 + (if b0027 then 0 else 1) * 12000 + (if b0028 then 0 else 1) * 12000 + (if b0029 then 0 else 1) * 12000 + (if b0030 then 0 else 1) * 12000 + (if b0031 then 0 else 1) * 12000 < 441
}
Prover Time taken = 12.228576
Prover time = 36.84
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 37.43
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:7
verified

Boogie program verifier finished with 1 verified, 0 errors
1.02user 1.37system 0:38.78elapsed 6%CPU (0avgtext+0avgdata 50948maxresident)k
0inputs+192outputs (1major+22668minor)pagefaults 0swaps
FILE:polybench/linear-algebra/solvers/gramschmidt/kernel5.bpl.ice2.bpl
#################
Tue Apr 27 21:31:42 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/gramschmidt/kernel6.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/gramschmidt/kernel6.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel6
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.246591
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/gramschmidt/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1226700
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.873739
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/gramschmidt/kernel6.bpl.ice2.bpl
Total learner time was 00:00:00.1178660
Verifying $kernel6: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.926501
Prover time = 2.05
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 2.37
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.79user 1.07system 0:03.67elapsed 51%CPU (0avgtext+0avgdata 44724maxresident)k
0inputs+104outputs (1major+15618minor)pagefaults 0swaps
FILE:polybench/linear-algebra/solvers/gramschmidt/kernel6.bpl.ice2.bpl
#################
Tue Apr 27 21:31:46 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/lu/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/lu/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.301578
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/lu/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1192310
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 1.771954
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/lu/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1204410
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 2.010178
Prover time = 4.08
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 4.40
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.81user 1.07system 0:05.75elapsed 32%CPU (0avgtext+0avgdata 44984maxresident)k
0inputs+96outputs (1major+15661minor)pagefaults 0swaps
FILE:polybench/linear-algebra/solvers/lu/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:31:51 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/ludcmp/kernel3.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/ludcmp/kernel3.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 21
Generating VC of $kernel3
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.230853
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/ludcmp/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1178410
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 8000 + (if b0001 then 0 else 1) * 8000 + (if b0002 then 0 else 1) * 8000 + (if b0003 then 0 else 1) * 8000 + (if b0004 then 0 else 1) * 8000 + (if b0005 then 0 else 1) * 8000 + (if b0006 then 0 else 1) * 8000 + (if b0007 then 0 else 1) * 8000 + (if b0008 then 0 else 1) * 8000 + (if b0009 then 0 else 1) * 8000 + (if b0010 then 0 else 1) * 8000 + (if b0011 then 0 else 1) * 8000 + (if b0012 then 0 else 1) * 8000 + (if b0013 then 0 else 1) * 8000 + (if b0014 then 0 else 1) * 8000 + (if b0015 then 0 else 1) * 8000 + (if b0016 then 0 else 1) * 8000 + (if b0017 then 0 else 1) * 8000 + (if b0018 then 0 else 1) * 8000 + (if b0019 then 0 else 1) * 8000 + (if b0020 then 0 else 1) * 8000 < 441
}
Added: my_inv:1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.768403
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/ludcmp/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1244550
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 8000 + (if b0002 then 0 else 1) * 8000 + (if b0003 then 0 else 1) * 8000 + (if b0004 then 0 else 1) * 8000 + (if b0005 then 0 else 1) * 8000 + (if b0006 then 0 else 1) * 8000 + (if b0007 then 0 else 1) * 8000 + (if b0008 then 0 else 1) * 8000 + (if b0009 then 0 else 1) * 8000 + (if b0010 then 0 else 1) * 8000 + (if b0011 then 0 else 1) * 8000 + (if b0012 then 0 else 1) * 8000 + (if b0013 then 0 else 1) * 8000 + (if b0014 then 0 else 1) * 8000 + (if b0015 then 0 else 1) * 8000 + (if b0016 then 0 else 1) * 8000 + (if b0017 then 0 else 1) * 8000 + (if b0018 then 0 else 1) * 8000 + (if b0019 then 0 else 1) * 8000 + (if b0020 then 0 else 1) * 8000 < 441
}
Prover Time taken = 1.603604
Added Horn clause: 0 && 0 && 0 => 2
Added Horn clause: 0 => 3
Added Horn clause: 0 && 0 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/ludcmp/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1174990
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 8000 + (if b0003 then 0 else 1) * 8000 + (if b0005 then 0 else 1) * 8000 + (if b0006 then 0 else 1) * 8000 + (if b0007 then 0 else 1) * 8000 + (if b0009 then 0 else 1) * 8000 + (if b0011 then 0 else 1) * 8000 + (if b0012 then 0 else 1) * 8000 + (if b0013 then 0 else 1) * 8000 + (if b0015 then 0 else 1) * 8000 + (if b0017 then 0 else 1) * 8000 + (if b0018 then 0 else 1) * 8000 + (if b0019 then 0 else 1) * 8000 + (if b0020 then 0 else 1) * 8000 < 441
}
Prover Time taken = 6.663171
Added Horn clause: 5 && 0 && 0 => 6
Added Horn clause: 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/ludcmp/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1188940
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 8000 + (if b0003 then 0 else 1) * 8000 + (if b0006 then 0 else 1) * 8000 + (if b0007 then 0 else 1) * 8000 + (if b0009 then 0 else 1) * 8000 + (if b0011 then 0 else 1) * 8000 + (if b0012 then 0 else 1) * 8000 + (if b0013 then 0 else 1) * 8000 + (if b0017 then 0 else 1) * 8000 + (if b0018 then 0 else 1) * 8000 + (if b0019 then 0 else 1) * 8000 + (if b0020 then 0 else 1) * 8000 < 441
}
Prover Time taken = 8.177
Prover time = 18.44
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 19.02
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:5
verified

Boogie program verifier finished with 1 verified, 0 errors
1.01user 1.35system 0:20.36elapsed 11%CPU (0avgtext+0avgdata 49516maxresident)k
0inputs+168outputs (1major+21965minor)pagefaults 0swaps
FILE:polybench/linear-algebra/solvers/ludcmp/kernel3.bpl.ice2.bpl
#################
Tue Apr 27 21:32:12 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 33
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.286763
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1181470
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0016 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0022 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1: positive
Prover Time taken = 13.916973
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1181740
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 60.269665
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1218650
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 6.593829
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1197970
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Prover Time taken = 5.419294
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1179230
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Prover Time taken = 6.763337
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1257450
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Prover Time taken = 7.042958
Added Horn clause: 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1277460
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Prover Time taken = 89.047466
Added Horn clause: 8 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1194730
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Prover Time taken = 113.072795
Added Horn clause: 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1189150
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Prover Time taken = 116.403254
Prover time = 418.82
Number of prover queries = 10
Learner time = 1.09
Number of learner queries = 9
Total time: 420.09
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:5
verified

Boogie program verifier finished with 1 verified, 0 errors
1.77user 2.35system 7:01.46elapsed 0%CPU (0avgtext+0avgdata 52920maxresident)k
0inputs+384outputs (1major+31958minor)pagefaults 0swaps
FILE:polybench/linear-algebra/solvers/trisolv/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:39:13 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.174973
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1177540
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.167462
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/linear-algebra/solvers/trisolv/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1181950
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.200234
Prover time = 0.54
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.86
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.77user 1.07system 0:02.19elapsed 84%CPU (0avgtext+0avgdata 43552maxresident)k
0inputs+104outputs (1major+14423minor)pagefaults 0swaps
FILE:polybench/linear-algebra/solvers/trisolv/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:39:15 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/deriche/kernel24.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/deriche/kernel24.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 39
Generating VC of $kernel24
Verifying $kernel24: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.181231
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/deriche/kernel24.bpl.ice2.bpl
Total learner time was 00:00:00.1203820
Verifying $kernel24: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 15000 + (if b0001 then 0 else 1) * 15000 + (if b0002 then 0 else 1) * 15000 + (if b0003 then 0 else 1) * 15000 + (if b0004 then 0 else 1) * 15000 + (if b0005 then 0 else 1) * 15000 + (if b0006 then 0 else 1) * 15000 + (if b0007 then 0 else 1) * 15000 + (if b0008 then 0 else 1) * 15000 + (if b0009 then 0 else 1) * 15000 + (if b0010 then 0 else 1) * 15000 + (if b0011 then 0 else 1) * 15000 + (if b0012 then 0 else 1) * 15000 + (if b0013 then 0 else 1) * 15000 + (if b0014 then 0 else 1) * 15000 + (if b0015 then 0 else 1) * 15000 + (if b0016 then 0 else 1) * 15000 + (if b0017 then 0 else 1) * 15000 + (if b0018 then 0 else 1) * 15000 + (if b0019 then 0 else 1) * 15000 + (if b0020 then 0 else 1) * 15000 + (if b0021 then 0 else 1) * 15000 + (if b0022 then 0 else 1) * 15000 + (if b0023 then 0 else 1) * 15000 + (if b0024 then 0 else 1) * 15000 + (if b0025 then 0 else 1) * 15000 + (if b0026 then 0 else 1) * 15000 + (if b0027 then 0 else 1) * 15000 + (if b0028 then 0 else 1) * 15000 + (if b0029 then 0 else 1) * 15000 + (if b0030 then 0 else 1) * 15000 + (if b0031 then 0 else 1) * 15000 + (if b0032 then 0 else 1) * 15000 + (if b0033 then 0 else 1) * 15000 + (if b0034 then 0 else 1) * 15000 + (if b0035 then 0 else 1) * 15000 + (if b0036 then 0 else 1) * 15000 + (if b0037 then 0 else 1) * 15000 + (if b0038 then 0 else 1) * 15000 < 441
}
Prover Time taken = 0.9832
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/deriche/kernel24.bpl.ice2.bpl
Total learner time was 00:00:00.1210740
Verifying $kernel24: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 15000 + (if b0001 then 0 else 1) * 15000 + (if b0003 then 0 else 1) * 15000 + (if b0005 then 0 else 1) * 15000 + (if b0006 then 0 else 1) * 15000 + (if b0007 then 0 else 1) * 15000 + (if b0008 then 0 else 1) * 15000 + (if b0010 then 0 else 1) * 15000 + (if b0012 then 0 else 1) * 15000 + (if b0013 then 0 else 1) * 15000 + (if b0014 then 0 else 1) * 15000 + (if b0015 then 0 else 1) * 15000 + (if b0016 then 0 else 1) * 15000 + (if b0019 then 0 else 1) * 15000 + (if b0020 then 0 else 1) * 15000 + (if b0023 then 0 else 1) * 15000 + (if b0025 then 0 else 1) * 15000 + (if b0026 then 0 else 1) * 15000 + (if b0027 then 0 else 1) * 15000 + (if b0028 then 0 else 1) * 15000 + (if b0029 then 0 else 1) * 15000 + (if b0030 then 0 else 1) * 15000 + (if b0031 then 0 else 1) * 15000 + (if b0032 then 0 else 1) * 15000 + (if b0033 then 0 else 1) * 15000 + (if b0034 then 0 else 1) * 15000 + (if b0035 then 0 else 1) * 15000 + (if b0036 then 0 else 1) * 15000 + (if b0037 then 0 else 1) * 15000 + (if b0038 then 0 else 1) * 15000 < 441
}
Prover Time taken = 0.908308
Added Horn clause: 0 && 0 && 1 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/deriche/kernel24.bpl.ice2.bpl
Total learner time was 00:00:00.1197910
Verifying $kernel24: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 15000 + (if b0001 then 0 else 1) * 15000 + (if b0003 then 0 else 1) * 15000 + (if b0005 then 0 else 1) * 15000 + (if b0006 then 0 else 1) * 15000 + (if b0007 then 0 else 1) * 15000 + (if b0008 then 0 else 1) * 15000 + (if b0010 then 0 else 1) * 15000 + (if b0012 then 0 else 1) * 15000 + (if b0013 then 0 else 1) * 15000 + (if b0014 then 0 else 1) * 15000 + (if b0015 then 0 else 1) * 15000 + (if b0016 then 0 else 1) * 15000 + (if b0019 then 0 else 1) * 15000 + (if b0020 then 0 else 1) * 15000 + (if b0023 then 0 else 1) * 15000 + (if b0025 then 0 else 1) * 15000 + (if b0026 then 0 else 1) * 15000 + (if b0027 then 0 else 1) * 15000 + (if b0028 then 0 else 1) * 15000 + (if b0029 then 0 else 1) * 15000 + (if b0030 then 0 else 1) * 15000 + (if b0034 then 0 else 1) * 15000 + (if b0035 then 0 else 1) * 15000 + (if b0036 then 0 else 1) * 15000 + (if b0037 then 0 else 1) * 15000 + (if b0038 then 0 else 1) * 15000 < 441
}
Prover Time taken = 0.881389
Prover time = 2.95
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 3.43
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
0.98user 1.27system 0:04.83elapsed 46%CPU (0avgtext+0avgdata 53208maxresident)k
0inputs+136outputs (1major+22531minor)pagefaults 0swaps
FILE:polybench/medley/deriche/kernel24.bpl.ice2.bpl
#################
Tue Apr 27 21:39:20 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/deriche/kernel41.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/deriche/kernel41.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 39
Generating VC of $kernel41
Verifying $kernel41: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.186473
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/deriche/kernel41.bpl.ice2.bpl
Total learner time was 00:00:00.1184050
Verifying $kernel41: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 15000 + (if b0001 then 0 else 1) * 15000 + (if b0002 then 0 else 1) * 15000 + (if b0003 then 0 else 1) * 15000 + (if b0004 then 0 else 1) * 15000 + (if b0005 then 0 else 1) * 15000 + (if b0006 then 0 else 1) * 15000 + (if b0007 then 0 else 1) * 15000 + (if b0008 then 0 else 1) * 15000 + (if b0009 then 0 else 1) * 15000 + (if b0010 then 0 else 1) * 15000 + (if b0011 then 0 else 1) * 15000 + (if b0012 then 0 else 1) * 15000 + (if b0013 then 0 else 1) * 15000 + (if b0014 then 0 else 1) * 15000 + (if b0015 then 0 else 1) * 15000 + (if b0016 then 0 else 1) * 15000 + (if b0017 then 0 else 1) * 15000 + (if b0018 then 0 else 1) * 15000 + (if b0019 then 0 else 1) * 15000 + (if b0020 then 0 else 1) * 15000 + (if b0021 then 0 else 1) * 15000 + (if b0022 then 0 else 1) * 15000 + (if b0023 then 0 else 1) * 15000 + (if b0024 then 0 else 1) * 15000 + (if b0025 then 0 else 1) * 15000 + (if b0026 then 0 else 1) * 15000 + (if b0027 then 0 else 1) * 15000 + (if b0028 then 0 else 1) * 15000 + (if b0029 then 0 else 1) * 15000 + (if b0030 then 0 else 1) * 15000 + (if b0031 then 0 else 1) * 15000 + (if b0032 then 0 else 1) * 15000 + (if b0033 then 0 else 1) * 15000 + (if b0034 then 0 else 1) * 15000 + (if b0035 then 0 else 1) * 15000 + (if b0036 then 0 else 1) * 15000 + (if b0037 then 0 else 1) * 15000 + (if b0038 then 0 else 1) * 15000 < 441
}
Prover Time taken = 1.015343
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/deriche/kernel41.bpl.ice2.bpl
Total learner time was 00:00:00.1182360
Verifying $kernel41: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 15000 + (if b0001 then 0 else 1) * 15000 + (if b0003 then 0 else 1) * 15000 + (if b0005 then 0 else 1) * 15000 + (if b0006 then 0 else 1) * 15000 + (if b0007 then 0 else 1) * 15000 + (if b0008 then 0 else 1) * 15000 + (if b0010 then 0 else 1) * 15000 + (if b0012 then 0 else 1) * 15000 + (if b0013 then 0 else 1) * 15000 + (if b0014 then 0 else 1) * 15000 + (if b0015 then 0 else 1) * 15000 + (if b0016 then 0 else 1) * 15000 + (if b0019 then 0 else 1) * 15000 + (if b0020 then 0 else 1) * 15000 + (if b0023 then 0 else 1) * 15000 + (if b0025 then 0 else 1) * 15000 + (if b0026 then 0 else 1) * 15000 + (if b0027 then 0 else 1) * 15000 + (if b0028 then 0 else 1) * 15000 + (if b0029 then 0 else 1) * 15000 + (if b0030 then 0 else 1) * 15000 + (if b0031 then 0 else 1) * 15000 + (if b0032 then 0 else 1) * 15000 + (if b0033 then 0 else 1) * 15000 + (if b0034 then 0 else 1) * 15000 + (if b0035 then 0 else 1) * 15000 + (if b0036 then 0 else 1) * 15000 + (if b0037 then 0 else 1) * 15000 + (if b0038 then 0 else 1) * 15000 < 441
}
Prover Time taken = 1.048393
Added Horn clause: 0 && 0 && 1 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/deriche/kernel41.bpl.ice2.bpl
Total learner time was 00:00:00.1184870
Verifying $kernel41: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 15000 + (if b0001 then 0 else 1) * 15000 + (if b0003 then 0 else 1) * 15000 + (if b0005 then 0 else 1) * 15000 + (if b0006 then 0 else 1) * 15000 + (if b0007 then 0 else 1) * 15000 + (if b0008 then 0 else 1) * 15000 + (if b0010 then 0 else 1) * 15000 + (if b0012 then 0 else 1) * 15000 + (if b0013 then 0 else 1) * 15000 + (if b0014 then 0 else 1) * 15000 + (if b0015 then 0 else 1) * 15000 + (if b0016 then 0 else 1) * 15000 + (if b0019 then 0 else 1) * 15000 + (if b0020 then 0 else 1) * 15000 + (if b0023 then 0 else 1) * 15000 + (if b0025 then 0 else 1) * 15000 + (if b0026 then 0 else 1) * 15000 + (if b0027 then 0 else 1) * 15000 + (if b0028 then 0 else 1) * 15000 + (if b0029 then 0 else 1) * 15000 + (if b0030 then 0 else 1) * 15000 + (if b0034 then 0 else 1) * 15000 + (if b0035 then 0 else 1) * 15000 + (if b0036 then 0 else 1) * 15000 + (if b0037 then 0 else 1) * 15000 + (if b0038 then 0 else 1) * 15000 < 441
}
Prover Time taken = 0.838642
Prover time = 3.09
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 3.55
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
0.99user 1.27system 0:04.94elapsed 45%CPU (0avgtext+0avgdata 53516maxresident)k
0inputs+136outputs (1major+22419minor)pagefaults 0swaps
FILE:polybench/medley/deriche/kernel41.bpl.ice2.bpl
#################
Tue Apr 27 21:39:25 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/floyd-warshall/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/floyd-warshall/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.31535
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/floyd-warshall/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1191680
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Added: my_inv:1,1,0,1,1,1,1,1,1,1: positive
Prover Time taken = 15.461467
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/floyd-warshall/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1195720
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 17.126521
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/floyd-warshall/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1187750
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 84.853655
Prover time = 117.76
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 118.22
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.94user 1.35system 1:59.56elapsed 1%CPU (0avgtext+0avgdata 46792maxresident)k
0inputs+136outputs (1major+18996minor)pagefaults 0swaps
FILE:polybench/medley/floyd-warshall/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:41:25 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.358076
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1178840
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 26.452709
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1192520
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 71.609233
Prover time = 98.42
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 98.73
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.86user 1.19system 1:40.08elapsed 2%CPU (0avgtext+0avgdata 45836maxresident)k
0inputs+104outputs (1major+16578minor)pagefaults 0swaps
FILE:polybench/medley/nussinov/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:43:05 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel3.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel3.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $kernel3
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.396454
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1239730
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 38.613099
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1215320
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 108.135588
Prover time = 147.15
Number of prover queries = 3
Learner time = 0.25
Number of learner queries = 2
Total time: 147.47
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.88user 1.30system 2:28.83elapsed 1%CPU (0avgtext+0avgdata 45556maxresident)k
0inputs+112outputs (1major+16468minor)pagefaults 0swaps
FILE:polybench/medley/nussinov/kernel3.bpl.ice2.bpl
#################
Tue Apr 27 21:45:34 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel4.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel4.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $kernel4
Verifying $kernel4: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.368384
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel4.bpl.ice2.bpl
Total learner time was 00:00:00.1201100
Verifying $kernel4: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 46.787956
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/medley/nussinov/kernel4.bpl.ice2.bpl
Total learner time was 00:00:00.1198780
Verifying $kernel4: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 109.901313
Prover time = 157.06
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 157.38
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.93user 1.28system 2:38.75elapsed 1%CPU (0avgtext+0avgdata 45764maxresident)k
0inputs+112outputs (1major+16729minor)pagefaults 0swaps
FILE:polybench/medley/nussinov/kernel4.bpl.ice2.bpl
#################
Tue Apr 27 21:48:12 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 124
Generating VC of $kernel12
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.183209
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1178170
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0055 then 0 else 1) * 49000 + (if b0056 then 0 else 1) * 49000 + (if b0057 then 0 else 1) * 49000 + (if b0058 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0060 then 0 else 1) * 49000 + (if b0061 then 0 else 1) * 49000 + (if b0062 then 0 else 1) * 49000 + (if b0063 then 0 else 1) * 49000 + (if b0064 then 0 else 1) * 49000 + (if b0065 then 0 else 1) * 49000 + (if b0066 then 0 else 1) * 49000 + (if b0067 then 0 else 1) * 49000 + (if b0068 then 0 else 1) * 49000 + (if b0069 then 0 else 1) * 49000 + (if b0070 then 0 else 1) * 49000 + (if b0071 then 0 else 1) * 49000 + (if b0072 then 0 else 1) * 49000 + (if b0073 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.257345
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1188390
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0055 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0060 then 0 else 1) * 49000 + (if b0062 then 0 else 1) * 49000 + (if b0068 then 0 else 1) * 49000 + (if b0072 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.740672
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1214340
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0068 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.497963
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1202100
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 1.372881
Added Horn clause: 4 => 5
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1185910
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 2.980949
Added Horn clause: 8 && 9 && 7 => 10
Added Horn clause: 6 && 0 && 0 && 0 && 0 && 0 && 0 => 11
Added Horn clause: 6 && 12 && 7 && 0 && 0 => 13
Added Horn clause: 6 && 12 && 7 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 8 && 15 && 7 && 0 && 0 && 0 && 0 => 16
Added Horn clause: 6 && 17 && 7 && 0 && 0 && 0 && 0 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1210710
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 6.282776
Added Horn clause: 8 && 19 && 0 && 0 && 0 => 20
Added Horn clause: 8 && 21 && 14 && 0 && 13 && 0 && 0 => 22
Added Horn clause: 6 && 23 && 14 && 0 && 13 && 0 && 0 => 24
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1212710
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 6.031087
Added Horn clause: 25 && 19 && 0 && 0 && 0 && 0 && 20 => 26
Added Horn clause: 27 && 28 && 0 && 0 && 0 => 29
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1247210
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 6.947715
Added Horn clause: 30 => 31
Added Horn clause: 27 && 32 && 0 && 0 && 0 && 0 && 33 => 34
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1201860
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 5.929776
Added Horn clause: 35 => 36
Added Horn clause: 30 && 19 && 31 && 0 && 0 => 37
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1254440
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 5.772487
Added Horn clause: 30 && 19 && 31 && 0 && 0 => 38
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1233980
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 6.467006
Added Horn clause: 39 && 32 && 36 && 0 && 0 => 40
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1214800
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 6.085712
Added Horn clause: 35 && 32 && 36 && 0 && 0 => 41
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel12.bpl.ice2.bpl
Total learner time was 00:00:00.1206500
Verifying $kernel12: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 5.475327
Prover time = 58.02
Number of prover queries = 14
Learner time = 1.58
Number of learner queries = 13
Total time: 60.17
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:20
verified

Boogie program verifier finished with 1 verified, 0 errors
2.99user 2.65system 1:01.65elapsed 9%CPU (0avgtext+0avgdata 73744maxresident)k
0inputs+840outputs (1major+74557minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel12.bpl.ice2.bpl
#################
Tue Apr 27 21:49:14 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel13.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel13.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel13
Verifying $kernel13: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171262
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel13.bpl.ice2.bpl
Total learner time was 00:00:00.1174560
Verifying $kernel13: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.176648
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel13.bpl.ice2.bpl
Total learner time was 00:00:00.1187670
Verifying $kernel13: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.231682
Prover time = 0.58
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.89
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.09system 0:02.23elapsed 82%CPU (0avgtext+0avgdata 43448maxresident)k
0inputs+96outputs (1major+14113minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel13.bpl.ice2.bpl
#################
Tue Apr 27 21:49:16 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel14.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel14.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel14
Verifying $kernel14: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169814
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel14.bpl.ice2.bpl
Total learner time was 00:00:00.1188670
Verifying $kernel14: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.150881
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel14.bpl.ice2.bpl
Total learner time was 00:00:00.1242860
Verifying $kernel14: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.404455
Prover time = 0.73
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 1.05
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.77user 1.08system 0:02.37elapsed 78%CPU (0avgtext+0avgdata 43408maxresident)k
0inputs+96outputs (1major+14626minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel14.bpl.ice2.bpl
#################
Tue Apr 27 21:49:19 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel16.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel16.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel16
Verifying $kernel16: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.16853
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel16.bpl.ice2.bpl
Total learner time was 00:00:00.1207780
Verifying $kernel16: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.145793
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel16.bpl.ice2.bpl
Total learner time was 00:00:00.1201210
Verifying $kernel16: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.271463
Prover time = 0.59
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.90
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.10system 0:02.24elapsed 82%CPU (0avgtext+0avgdata 43408maxresident)k
0inputs+104outputs (1major+14197minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel16.bpl.ice2.bpl
#################
Tue Apr 27 21:49:21 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 100
Generating VC of $kernel17
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.250918
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1195730
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0057 then 0 else 1) * 40000 + (if b0058 then 0 else 1) * 40000 + (if b0059 then 0 else 1) * 40000 + (if b0060 then 0 else 1) * 40000 + (if b0061 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0063 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0065 then 0 else 1) * 40000 + (if b0066 then 0 else 1) * 40000 + (if b0067 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0069 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.211526
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1205210
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0057 then 0 else 1) * 40000 + (if b0061 then 0 else 1) * 40000 + (if b0063 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0067 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.25917
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1188560
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.04362
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1218770
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.832823
Added Horn clause: 4 => 5
Added Horn clause: 6 && 7 && 7 && 7 && 7 => 8
Added Horn clause: 6 && 7 && 7 => 9
Added Horn clause: 6 && 7 && 7 && 7 && 7 => 10
Added Horn clause: 11 && 7 && 7 && 7 && 7 => 12
Added Horn clause: 11 && 7 && 7 && 7 && 7 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1249130
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.060226
Added Horn clause: 14 => 15
Added Horn clause: 7 && 16 && 7 && 7 && 10 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1215730
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.586801
Added Horn clause: 11 && 18 && 7 && 7 && 7 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1190420
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.028247
Added Horn clause: 7 && 20 && 13 => 21
Added Horn clause: 6 && 22 && 13 && 7 && 7 => 23
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1223680
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 2.988423
Added Horn clause: 24 && 25 && 7 && 7 && 21 => 26
Added Horn clause: 24 && 27 && 7 => 28
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1227550
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 2.790224
Added Horn clause: 29 && 30 && 7 && 7 && 31 => 32
Added Horn clause: 33 => 34
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1213810
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 4.092002
Added Horn clause: 33 && 25 && 34 => 35
Added Horn clause: 36 => 37
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1196880
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 4.505764
Added Horn clause: 33 && 25 && 34 => 38
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1206660
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 4.179254
Added Horn clause: 36 && 30 && 37 => 39
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1201500
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.959443
Added Horn clause: 36 && 30 && 37 => 40
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel17.bpl.ice2.bpl
Total learner time was 00:00:00.1220490
Verifying $kernel17: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.671677
Prover time = 49.46
Number of prover queries = 15
Learner time = 1.70
Number of learner queries = 14
Total time: 51.73
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:20
verified

Boogie program verifier finished with 1 verified, 0 errors
3.15user 3.07system 0:53.16elapsed 11%CPU (0avgtext+0avgdata 67488maxresident)k
0inputs+736outputs (1major+66691minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel17.bpl.ice2.bpl
#################
Tue Apr 27 21:50:14 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel18.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel18.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel18
Verifying $kernel18: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.166205
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel18.bpl.ice2.bpl
Total learner time was 00:00:00.1235150
Verifying $kernel18: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.283106
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel18.bpl.ice2.bpl
Total learner time was 00:00:00.1209500
Verifying $kernel18: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.239839
Prover time = 0.69
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 1.01
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.09system 0:02.33elapsed 79%CPU (0avgtext+0avgdata 43904maxresident)k
0inputs+96outputs (1major+14394minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel18.bpl.ice2.bpl
#################
Tue Apr 27 21:50:16 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 119
Generating VC of $kernel19
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.321476
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1194870
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0060 then 0 else 1) * 47000 + (if b0061 then 0 else 1) * 47000 + (if b0062 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0064 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0066 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0069 then 0 else 1) * 47000 + (if b0070 then 0 else 1) * 47000 + (if b0071 then 0 else 1) * 47000 + (if b0072 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.486552
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1190450
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0070 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 5.120612
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1203650
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.582732
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1205460
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.252455
Added Horn clause: 4 => 5
Added Horn clause: 6 && 7 && 7 => 8
Added Horn clause: 7 && 7 && 7 && 7 && 7 => 9
Added Horn clause: 7 && 7 && 7 && 7 && 7 => 10
Added Horn clause: 7 && 7 && 7 && 7 && 7 => 11
Added Horn clause: 7 && 7 && 7 && 7 && 7 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1284320
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.119245
Added Horn clause: 6 && 13 && 7 && 7 && 7 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1190230
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.720271
Added Horn clause: 6 && 15 && 7 => 16
Added Horn clause: 6 && 17 && 12 && 7 && 7 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1205740
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.274698
Added Horn clause: 6 && 15 && 7 && 7 && 16 => 19
Added Horn clause: 20 && 21 && 7 => 22
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1194100
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.038513
Added Horn clause: 23 => 24
Added Horn clause: 6 && 21 && 7 && 7 && 22 => 25
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1192610
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.124504
Added Horn clause: 26 => 27
Added Horn clause: 23 && 15 && 24 => 28
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1221740
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.58807
Added Horn clause: 26 && 21 && 27 => 29
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1206580
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 5.227502
Added Horn clause: 30 && 31 && 32 => 33
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel19.bpl.ice2.bpl
Total learner time was 00:00:00.1251720
Verifying $kernel19: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.787051
Prover time = 52.64
Number of prover queries = 13
Learner time = 1.45
Number of learner queries = 12
Total time: 54.68
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:17
verified

Boogie program verifier finished with 1 verified, 0 errors
3.23user 3.08system 0:56.18elapsed 11%CPU (0avgtext+0avgdata 70448maxresident)k
0inputs+744outputs (1major+66140minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel19.bpl.ice2.bpl
#################
Tue Apr 27 21:51:13 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel20.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel20.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel20
Verifying $kernel20: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169819
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel20.bpl.ice2.bpl
Total learner time was 00:00:00.1185190
Verifying $kernel20: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.172362
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel20.bpl.ice2.bpl
Total learner time was 00:00:00.1182630
Verifying $kernel20: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.324735
Prover time = 0.67
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.98
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.74user 1.09system 0:02.29elapsed 80%CPU (0avgtext+0avgdata 43424maxresident)k
0inputs+96outputs (1major+14080minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel20.bpl.ice2.bpl
#################
Tue Apr 27 21:51:15 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel21.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel21.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel21
Verifying $kernel21: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168899
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel21.bpl.ice2.bpl
Total learner time was 00:00:00.1178600
Verifying $kernel21: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.175054
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel21.bpl.ice2.bpl
Total learner time was 00:00:00.1201540
Verifying $kernel21: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.226622
Prover time = 0.57
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.89
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.05system 0:02.21elapsed 83%CPU (0avgtext+0avgdata 43604maxresident)k
0inputs+96outputs (1major+14170minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel21.bpl.ice2.bpl
#################
Tue Apr 27 21:51:17 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 124
Generating VC of $kernel22
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.183888
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1191140
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0055 then 0 else 1) * 49000 + (if b0056 then 0 else 1) * 49000 + (if b0057 then 0 else 1) * 49000 + (if b0058 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0060 then 0 else 1) * 49000 + (if b0061 then 0 else 1) * 49000 + (if b0062 then 0 else 1) * 49000 + (if b0063 then 0 else 1) * 49000 + (if b0064 then 0 else 1) * 49000 + (if b0065 then 0 else 1) * 49000 + (if b0066 then 0 else 1) * 49000 + (if b0067 then 0 else 1) * 49000 + (if b0068 then 0 else 1) * 49000 + (if b0069 then 0 else 1) * 49000 + (if b0070 then 0 else 1) * 49000 + (if b0071 then 0 else 1) * 49000 + (if b0072 then 0 else 1) * 49000 + (if b0073 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.427822
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1207540
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0059 then 0 else 1) * 49000 + (if b0061 then 0 else 1) * 49000 + (if b0072 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.562977
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1190350
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0061 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.858273
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1192130
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0010 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0086 then 0 else 1) * 49000 + (if b0087 then 0 else 1) * 49000 + (if b0088 then 0 else 1) * 49000 + (if b0089 then 0 else 1) * 49000 + (if b0090 then 0 else 1) * 49000 + (if b0091 then 0 else 1) * 49000 + (if b0092 then 0 else 1) * 49000 + (if b0093 then 0 else 1) * 49000 + (if b0094 then 0 else 1) * 49000 + (if b0095 then 0 else 1) * 49000 + (if b0096 then 0 else 1) * 49000 + (if b0097 then 0 else 1) * 49000 + (if b0098 then 0 else 1) * 49000 + (if b0099 then 0 else 1) * 49000 + (if b0100 then 0 else 1) * 49000 + (if b0101 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 1.249701
Added Horn clause: 4 => 5
Added Horn clause: 6 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1192040
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0004 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0006 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0013 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0015 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0024 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0026 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0043 then 0 else 1) * 49000 + (if b0044 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0046 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0102 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 2.192115
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 => 8
Added Horn clause: 0 && 9 && 7 => 10
Added Horn clause: 6 && 11 && 7 && 0 && 0 => 12
Added Horn clause: 6 && 11 && 7 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 6 && 11 && 7 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 6 && 11 && 7 && 0 && 0 && 0 && 0 => 15
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1223900
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0016 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0035 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0103 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 3.679964
Added Horn clause: 16 && 17 && 0 && 0 && 0 => 18
Added Horn clause: 6 && 19 && 7 && 0 && 0 && 0 && 0 => 20
Added Horn clause: 21 && 22 && 13 && 0 && 12 && 0 && 0 => 23
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1201190
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0039 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0074 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 3.247328
Added Horn clause: 24 && 25 && 0 && 0 && 0 => 26
Added Horn clause: 27 && 17 && 0 && 0 && 0 && 0 && 18 => 28
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1199600
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0020 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0075 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 4.025591
Added Horn clause: 29 => 30
Added Horn clause: 27 && 25 && 0 && 0 && 0 && 0 && 26 => 31
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1221750
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0021 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0034 then 0 else 1) * 49000 + (if b0036 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 4.222906
Added Horn clause: 32 => 33
Added Horn clause: 29 && 17 && 30 && 0 && 0 => 34
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1216790
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0038 then 0 else 1) * 49000 + (if b0040 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 4.10466
Added Horn clause: 32 && 25 && 33 && 0 && 0 => 35
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1213350
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0041 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 4.260602
Added Horn clause: 32 && 25 && 33 && 0 && 0 => 36
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1239020
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0037 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 3.626531
Added Horn clause: 29 && 17 && 30 && 0 && 0 => 37
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel22.bpl.ice2.bpl
Total learner time was 00:00:00.1215940
Verifying $kernel22: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 49000 + (if b0001 then 0 else 1) * 49000 + (if b0002 then 0 else 1) * 49000 + (if b0003 then 0 else 1) * 49000 + (if b0005 then 0 else 1) * 49000 + (if b0007 then 0 else 1) * 49000 + (if b0008 then 0 else 1) * 49000 + (if b0009 then 0 else 1) * 49000 + (if b0011 then 0 else 1) * 49000 + (if b0012 then 0 else 1) * 49000 + (if b0014 then 0 else 1) * 49000 + (if b0017 then 0 else 1) * 49000 + (if b0018 then 0 else 1) * 49000 + (if b0019 then 0 else 1) * 49000 + (if b0022 then 0 else 1) * 49000 + (if b0023 then 0 else 1) * 49000 + (if b0025 then 0 else 1) * 49000 + (if b0027 then 0 else 1) * 49000 + (if b0028 then 0 else 1) * 49000 + (if b0029 then 0 else 1) * 49000 + (if b0030 then 0 else 1) * 49000 + (if b0031 then 0 else 1) * 49000 + (if b0032 then 0 else 1) * 49000 + (if b0033 then 0 else 1) * 49000 + (if b0042 then 0 else 1) * 49000 + (if b0045 then 0 else 1) * 49000 + (if b0047 then 0 else 1) * 49000 + (if b0048 then 0 else 1) * 49000 + (if b0049 then 0 else 1) * 49000 + (if b0050 then 0 else 1) * 49000 + (if b0051 then 0 else 1) * 49000 + (if b0052 then 0 else 1) * 49000 + (if b0053 then 0 else 1) * 49000 + (if b0054 then 0 else 1) * 49000 + (if b0076 then 0 else 1) * 49000 + (if b0077 then 0 else 1) * 49000 + (if b0078 then 0 else 1) * 49000 + (if b0079 then 0 else 1) * 49000 + (if b0080 then 0 else 1) * 49000 + (if b0081 then 0 else 1) * 49000 + (if b0082 then 0 else 1) * 49000 + (if b0083 then 0 else 1) * 49000 + (if b0084 then 0 else 1) * 49000 + (if b0085 then 0 else 1) * 49000 + (if b0104 then 0 else 1) * 49000 + (if b0105 then 0 else 1) * 49000 + (if b0106 then 0 else 1) * 49000 + (if b0107 then 0 else 1) * 49000 + (if b0108 then 0 else 1) * 49000 + (if b0109 then 0 else 1) * 49000 + (if b0110 then 0 else 1) * 49000 + (if b0111 then 0 else 1) * 49000 + (if b0112 then 0 else 1) * 49000 + (if b0113 then 0 else 1) * 49000 + (if b0114 then 0 else 1) * 49000 + (if b0115 then 0 else 1) * 49000 + (if b0116 then 0 else 1) * 49000 + (if b0117 then 0 else 1) * 49000 + (if b0118 then 0 else 1) * 49000 + (if b0119 then 0 else 1) * 49000 + (if b0120 then 0 else 1) * 49000 + (if b0121 then 0 else 1) * 49000 + (if b0122 then 0 else 1) * 49000 + (if b0123 then 0 else 1) * 49000 < 441
}
Prover Time taken = 3.356823
Prover time = 39.00
Number of prover queries = 14
Learner time = 1.57
Number of learner queries = 13
Total time: 41.28
Number of positive examples:4
Number of negative examples:0
Number of Horn clauses:20
verified

Boogie program verifier finished with 1 verified, 0 errors
2.94user 2.71system 0:42.77elapsed 13%CPU (0avgtext+0avgdata 73908maxresident)k
0inputs+824outputs (1major+75302minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel22.bpl.ice2.bpl
#################
Tue Apr 27 21:52:00 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel23.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel23.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel23
Verifying $kernel23: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170603
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel23.bpl.ice2.bpl
Total learner time was 00:00:00.1172150
Verifying $kernel23: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.169792
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel23.bpl.ice2.bpl
Total learner time was 00:00:00.1198260
Verifying $kernel23: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.3068
Prover time = 0.65
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.97
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.71user 1.13system 0:02.30elapsed 80%CPU (0avgtext+0avgdata 43424maxresident)k
0inputs+96outputs (1major+14075minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel23.bpl.ice2.bpl
#################
Tue Apr 27 21:52:02 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel24.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel24.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel24
Verifying $kernel24: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169438
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel24.bpl.ice2.bpl
Total learner time was 00:00:00.1177520
Verifying $kernel24: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.258764
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel24.bpl.ice2.bpl
Total learner time was 00:00:00.1196400
Verifying $kernel24: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.264219
Prover time = 0.69
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 1.02
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.81user 1.06system 0:02.38elapsed 78%CPU (0avgtext+0avgdata 43636maxresident)k
0inputs+96outputs (1major+14163minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel24.bpl.ice2.bpl
#################
Tue Apr 27 21:52:05 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 100
Generating VC of $kernel25
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.250786
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1202390
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0056 then 0 else 1) * 40000 + (if b0057 then 0 else 1) * 40000 + (if b0058 then 0 else 1) * 40000 + (if b0059 then 0 else 1) * 40000 + (if b0060 then 0 else 1) * 40000 + (if b0061 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0063 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0065 then 0 else 1) * 40000 + (if b0066 then 0 else 1) * 40000 + (if b0067 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0069 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.947109
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1193900
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0055 then 0 else 1) * 40000 + (if b0059 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0065 then 0 else 1) * 40000 + (if b0068 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.647123
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1218240
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0059 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0064 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 2.793025
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1206800
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0062 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.028052
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1241250
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0004 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0006 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0013 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0015 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0025 then 0 else 1) * 40000 + (if b0026 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0028 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0077 then 0 else 1) * 40000 + (if b0078 then 0 else 1) * 40000 + (if b0079 then 0 else 1) * 40000 + (if b0080 then 0 else 1) * 40000 + (if b0081 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0085 then 0 else 1) * 40000 + (if b0086 then 0 else 1) * 40000 + (if b0087 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.732179
Added Horn clause: 5 => 6
Added Horn clause: 7 && 8 && 8 && 8 && 8 => 9
Added Horn clause: 7 && 8 && 8 => 10
Added Horn clause: 7 && 8 && 8 && 8 && 8 => 11
Added Horn clause: 12 && 8 && 8 && 8 && 8 => 13
Added Horn clause: 7 && 8 && 8 && 8 && 8 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1206760
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0082 then 0 else 1) * 40000 + (if b0083 then 0 else 1) * 40000 + (if b0084 then 0 else 1) * 40000 + (if b0088 then 0 else 1) * 40000 + (if b0089 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.922901
Added Horn clause: 15 => 16
Added Horn clause: 17 && 18 && 8 && 8 && 8 => 19
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1217950
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0090 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.453661
Added Horn clause: 0 && 20 && 14 && 8 && 11 => 21
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1208160
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0041 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0091 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.627674
Added Horn clause: 7 && 22 && 8 && 8 && 11 => 23
Added Horn clause: 7 && 24 && 8 => 25
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1208530
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0049 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0070 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.186033
Added Horn clause: 17 && 26 && 8 => 27
Added Horn clause: 12 && 24 && 8 && 8 && 25 => 28
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1245420
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0021 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0071 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.907099
Added Horn clause: 17 && 29 && 14 && 8 && 27 => 30
Added Horn clause: 31 => 32
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1244410
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0023 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0040 then 0 else 1) * 40000 + (if b0042 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 4.546597
Added Horn clause: 33 => 34
Added Horn clause: 31 && 24 && 32 => 35
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1224210
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0048 then 0 else 1) * 40000 + (if b0050 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 3.437022
Added Horn clause: 36 && 26 && 34 => 37
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1219140
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0043 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 4.855756
Added Horn clause: 31 && 24 && 32 => 38
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1228710
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0051 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 4.465807
Added Horn clause: 33 && 26 && 34 => 39
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel25.bpl.ice2.bpl
Total learner time was 00:00:00.1361590
Verifying $kernel25: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 40000 + (if b0001 then 0 else 1) * 40000 + (if b0002 then 0 else 1) * 40000 + (if b0003 then 0 else 1) * 40000 + (if b0005 then 0 else 1) * 40000 + (if b0007 then 0 else 1) * 40000 + (if b0008 then 0 else 1) * 40000 + (if b0009 then 0 else 1) * 40000 + (if b0010 then 0 else 1) * 40000 + (if b0011 then 0 else 1) * 40000 + (if b0012 then 0 else 1) * 40000 + (if b0014 then 0 else 1) * 40000 + (if b0016 then 0 else 1) * 40000 + (if b0017 then 0 else 1) * 40000 + (if b0018 then 0 else 1) * 40000 + (if b0019 then 0 else 1) * 40000 + (if b0020 then 0 else 1) * 40000 + (if b0022 then 0 else 1) * 40000 + (if b0024 then 0 else 1) * 40000 + (if b0027 then 0 else 1) * 40000 + (if b0029 then 0 else 1) * 40000 + (if b0030 then 0 else 1) * 40000 + (if b0031 then 0 else 1) * 40000 + (if b0032 then 0 else 1) * 40000 + (if b0033 then 0 else 1) * 40000 + (if b0034 then 0 else 1) * 40000 + (if b0035 then 0 else 1) * 40000 + (if b0036 then 0 else 1) * 40000 + (if b0037 then 0 else 1) * 40000 + (if b0038 then 0 else 1) * 40000 + (if b0039 then 0 else 1) * 40000 + (if b0044 then 0 else 1) * 40000 + (if b0045 then 0 else 1) * 40000 + (if b0046 then 0 else 1) * 40000 + (if b0047 then 0 else 1) * 40000 + (if b0052 then 0 else 1) * 40000 + (if b0053 then 0 else 1) * 40000 + (if b0072 then 0 else 1) * 40000 + (if b0073 then 0 else 1) * 40000 + (if b0074 then 0 else 1) * 40000 + (if b0075 then 0 else 1) * 40000 + (if b0076 then 0 else 1) * 40000 + (if b0092 then 0 else 1) * 40000 + (if b0093 then 0 else 1) * 40000 + (if b0094 then 0 else 1) * 40000 + (if b0095 then 0 else 1) * 40000 + (if b0096 then 0 else 1) * 40000 + (if b0097 then 0 else 1) * 40000 + (if b0098 then 0 else 1) * 40000 + (if b0099 then 0 else 1) * 40000 < 441
}
Prover Time taken = 4.405008
Prover time = 55.21
Number of prover queries = 16
Learner time = 1.84
Number of learner queries = 15
Total time: 57.70
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:20
verified

Boogie program verifier finished with 1 verified, 0 errors
3.43user 3.41system 0:59.14elapsed 11%CPU (0avgtext+0avgdata 68132maxresident)k
0inputs+776outputs (1major+72486minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel25.bpl.ice2.bpl
#################
Tue Apr 27 21:53:04 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 119
Generating VC of $kernel26
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.317701
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1198730
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0060 then 0 else 1) * 47000 + (if b0061 then 0 else 1) * 47000 + (if b0062 then 0 else 1) * 47000 + (if b0063 then 0 else 1) * 47000 + (if b0064 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0066 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0068 then 0 else 1) * 47000 + (if b0069 then 0 else 1) * 47000 + (if b0070 then 0 else 1) * 47000 + (if b0071 then 0 else 1) * 47000 + (if b0072 then 0 else 1) * 47000 + (if b0073 then 0 else 1) * 47000 + (if b0074 then 0 else 1) * 47000 + (if b0075 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0077 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0080 then 0 else 1) * 47000 + (if b0081 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 6.179528
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1205310
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0062 then 0 else 1) * 47000 + (if b0064 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0069 then 0 else 1) * 47000 + (if b0076 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0079 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.840753
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1241090
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0064 then 0 else 1) * 47000 + (if b0065 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0069 then 0 else 1) * 47000 + (if b0078 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 5.214356
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1202200
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0067 then 0 else 1) * 47000 + (if b0069 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 4.657933
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1191460
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0004 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0006 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0013 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0015 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0026 then 0 else 1) * 47000 + (if b0027 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0029 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0089 then 0 else 1) * 47000 + (if b0090 then 0 else 1) * 47000 + (if b0091 then 0 else 1) * 47000 + (if b0092 then 0 else 1) * 47000 + (if b0093 then 0 else 1) * 47000 + (if b0094 then 0 else 1) * 47000 + (if b0095 then 0 else 1) * 47000 + (if b0096 then 0 else 1) * 47000 + (if b0097 then 0 else 1) * 47000 + (if b0098 then 0 else 1) * 47000 + (if b0099 then 0 else 1) * 47000 + (if b0100 then 0 else 1) * 47000 + (if b0101 then 0 else 1) * 47000 + (if b0102 then 0 else 1) * 47000 + (if b0103 then 0 else 1) * 47000 + (if b0104 then 0 else 1) * 47000 + (if b0105 then 0 else 1) * 47000 + (if b0106 then 0 else 1) * 47000 + (if b0107 then 0 else 1) * 47000 + (if b0108 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.382418
Added Horn clause: 5 => 6
Added Horn clause: 7 && 8 && 8 => 9
Added Horn clause: 10 && 8 && 8 && 8 && 8 => 11
Added Horn clause: 7 && 8 && 8 && 8 && 8 => 12
Added Horn clause: 7 && 8 && 8 && 8 && 8 => 13
Added Horn clause: 7 && 8 && 8 && 8 && 8 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1246820
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0109 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.72213
Added Horn clause: 15 && 16 && 14 && 8 && 8 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1220980
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0046 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0110 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 5.728134
Added Horn clause: 8 && 18 && 14 => 19
Added Horn clause: 15 && 20 && 14 && 8 && 13 => 21
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1210660
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0054 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0082 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.212715
Added Horn clause: 15 && 22 && 8 => 23
Added Horn clause: 24 && 25 && 8 && 8 && 19 => 26
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1237470
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0022 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0083 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.913925
Added Horn clause: 27 => 28
Added Horn clause: 15 && 22 && 8 && 8 && 23 => 29
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1329910
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0024 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0045 then 0 else 1) * 47000 + (if b0047 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 5.181564
Added Horn clause: 30 => 31
Added Horn clause: 27 && 25 && 28 => 32
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1203960
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0053 then 0 else 1) * 47000 + (if b0055 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.68125
Added Horn clause: 30 && 22 && 31 => 33
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1202980
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0056 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.526504
Added Horn clause: 30 && 22 && 31 => 34
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1230840
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0048 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 4.223186
Added Horn clause: 27 && 25 && 28 => 35
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/adi/kernel26.bpl.ice2.bpl
Total learner time was 00:00:00.1216640
Verifying $kernel26: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 47000 + (if b0001 then 0 else 1) * 47000 + (if b0002 then 0 else 1) * 47000 + (if b0003 then 0 else 1) * 47000 + (if b0005 then 0 else 1) * 47000 + (if b0007 then 0 else 1) * 47000 + (if b0008 then 0 else 1) * 47000 + (if b0009 then 0 else 1) * 47000 + (if b0010 then 0 else 1) * 47000 + (if b0011 then 0 else 1) * 47000 + (if b0012 then 0 else 1) * 47000 + (if b0014 then 0 else 1) * 47000 + (if b0016 then 0 else 1) * 47000 + (if b0017 then 0 else 1) * 47000 + (if b0018 then 0 else 1) * 47000 + (if b0019 then 0 else 1) * 47000 + (if b0020 then 0 else 1) * 47000 + (if b0021 then 0 else 1) * 47000 + (if b0023 then 0 else 1) * 47000 + (if b0025 then 0 else 1) * 47000 + (if b0028 then 0 else 1) * 47000 + (if b0030 then 0 else 1) * 47000 + (if b0031 then 0 else 1) * 47000 + (if b0032 then 0 else 1) * 47000 + (if b0033 then 0 else 1) * 47000 + (if b0034 then 0 else 1) * 47000 + (if b0035 then 0 else 1) * 47000 + (if b0036 then 0 else 1) * 47000 + (if b0037 then 0 else 1) * 47000 + (if b0038 then 0 else 1) * 47000 + (if b0039 then 0 else 1) * 47000 + (if b0040 then 0 else 1) * 47000 + (if b0041 then 0 else 1) * 47000 + (if b0042 then 0 else 1) * 47000 + (if b0043 then 0 else 1) * 47000 + (if b0044 then 0 else 1) * 47000 + (if b0049 then 0 else 1) * 47000 + (if b0050 then 0 else 1) * 47000 + (if b0051 then 0 else 1) * 47000 + (if b0052 then 0 else 1) * 47000 + (if b0057 then 0 else 1) * 47000 + (if b0058 then 0 else 1) * 47000 + (if b0084 then 0 else 1) * 47000 + (if b0085 then 0 else 1) * 47000 + (if b0086 then 0 else 1) * 47000 + (if b0087 then 0 else 1) * 47000 + (if b0088 then 0 else 1) * 47000 + (if b0111 then 0 else 1) * 47000 + (if b0112 then 0 else 1) * 47000 + (if b0113 then 0 else 1) * 47000 + (if b0114 then 0 else 1) * 47000 + (if b0115 then 0 else 1) * 47000 + (if b0116 then 0 else 1) * 47000 + (if b0117 then 0 else 1) * 47000 + (if b0118 then 0 else 1) * 47000 < 441
}
Prover Time taken = 3.551135
Prover time = 66.33
Number of prover queries = 15
Learner time = 1.71
Number of learner queries = 14
Total time: 68.59
Number of positive examples:5
Number of negative examples:0
Number of Horn clauses:18
verified

Boogie program verifier finished with 1 verified, 0 errors
3.76user 3.47system 1:10.09elapsed 10%CPU (0avgtext+0avgdata 71532maxresident)k
0inputs+872outputs (1major+75335minor)pagefaults 0swaps
FILE:polybench/stencils/adi/kernel26.bpl.ice2.bpl
#################
Tue Apr 27 21:54:14 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 44
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171491
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1165930
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.575061
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1190710
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.248535
Added Horn clause: 0 && 0 && 0 => 6
Added Horn clause: 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1182400
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.697075
Added Horn clause: 0 && 0 && 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1224570
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.378525
Added Horn clause: 0 && 0 && 7 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1226700
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.492719
Prover time = 7.56
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 8.31
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.16user 1.43system 0:09.70elapsed 26%CPU (0avgtext+0avgdata 56952maxresident)k
0inputs+224outputs (1major+27666minor)pagefaults 0swaps
FILE:polybench/stencils/fdtd-2d/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:54:24 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 48
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.17076
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1184700
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 19000 + (if b0001 then 0 else 1) * 19000 + (if b0002 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0004 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0009 then 0 else 1) * 19000 + (if b0010 then 0 else 1) * 19000 + (if b0011 then 0 else 1) * 19000 + (if b0012 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0015 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0017 then 0 else 1) * 19000 + (if b0018 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0020 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0023 then 0 else 1) * 19000 + (if b0024 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0026 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.007077
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1196390
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 19000 + (if b0001 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0010 then 0 else 1) * 19000 + (if b0012 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0016 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0034 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0036 then 0 else 1) * 19000 + (if b0037 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.193418
Added Horn clause: 0 && 0 && 6 => 7
Added Horn clause: 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1198190
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 19000 + (if b0001 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0010 then 0 else 1) * 19000 + (if b0012 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0019 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0030 then 0 else 1) * 19000 + (if b0031 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0033 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.276973
Added Horn clause: 0 && 0 && 8 => 9
Added Horn clause: 0 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1197670
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 19000 + (if b0001 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0010 then 0 else 1) * 19000 + (if b0012 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0032 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.264843
Added Horn clause: 0 && 0 && 1 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1210090
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 19000 + (if b0001 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0010 then 0 else 1) * 19000 + (if b0012 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0035 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.068455
Added Horn clause: 0 && 0 && 10 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1189180
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 19000 + (if b0001 then 0 else 1) * 19000 + (if b0003 then 0 else 1) * 19000 + (if b0005 then 0 else 1) * 19000 + (if b0006 then 0 else 1) * 19000 + (if b0007 then 0 else 1) * 19000 + (if b0008 then 0 else 1) * 19000 + (if b0010 then 0 else 1) * 19000 + (if b0012 then 0 else 1) * 19000 + (if b0013 then 0 else 1) * 19000 + (if b0014 then 0 else 1) * 19000 + (if b0021 then 0 else 1) * 19000 + (if b0022 then 0 else 1) * 19000 + (if b0025 then 0 else 1) * 19000 + (if b0027 then 0 else 1) * 19000 + (if b0028 then 0 else 1) * 19000 + (if b0029 then 0 else 1) * 19000 + (if b0038 then 0 else 1) * 19000 + (if b0039 then 0 else 1) * 19000 + (if b0040 then 0 else 1) * 19000 + (if b0041 then 0 else 1) * 19000 + (if b0042 then 0 else 1) * 19000 + (if b0043 then 0 else 1) * 19000 + (if b0044 then 0 else 1) * 19000 + (if b0045 then 0 else 1) * 19000 + (if b0046 then 0 else 1) * 19000 + (if b0047 then 0 else 1) * 19000 < 441
}
Prover Time taken = 1.036312
Prover time = 7.02
Number of prover queries = 7
Learner time = 0.72
Number of learner queries = 6
Total time: 7.90
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:11
verified

Boogie program verifier finished with 1 verified, 0 errors
1.22user 1.60system 0:09.29elapsed 30%CPU (0avgtext+0avgdata 57876maxresident)k
0inputs+256outputs (1major+30969minor)pagefaults 0swaps
FILE:polybench/stencils/fdtd-2d/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:54:33 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel2.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel2.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel2
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.17784
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1185520
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.191342
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel2.bpl.ice2.bpl
Total learner time was 00:00:00.1199500
Verifying $kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.348858
Prover time = 0.72
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 1.04
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.74user 1.12system 0:02.38elapsed 78%CPU (0avgtext+0avgdata 44220maxresident)k
0inputs+96outputs (1major+14727minor)pagefaults 0swaps
FILE:polybench/stencils/fdtd-2d/kernel2.bpl.ice2.bpl
#################
Tue Apr 27 21:54:35 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel3.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel3.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 44
Generating VC of $kernel3
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.18323
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1208690
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0002 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0004 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0009 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0011 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0015 then 0 else 1) * 17000 + (if b0016 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0022 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0024 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0033 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.206362
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1213620
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0017 then 0 else 1) * 17000 + (if b0018 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0028 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.303198
Added Horn clause: 3 => 6
Added Horn clause: 0 && 0 && 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1227090
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0031 then 0 else 1) * 17000 + (if b0032 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.162841
Added Horn clause: 3 && 0 && 6 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1205990
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0029 then 0 else 1) * 17000 + (if b0030 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.31132
Added Horn clause: 0 && 0 && 1 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1190310
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0021 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.283485
Added Horn clause: 3 && 0 && 0 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/fdtd-2d/kernel3.bpl.ice2.bpl
Total learner time was 00:00:00.1223010
Verifying $kernel3: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 17000 + (if b0001 then 0 else 1) * 17000 + (if b0003 then 0 else 1) * 17000 + (if b0005 then 0 else 1) * 17000 + (if b0006 then 0 else 1) * 17000 + (if b0007 then 0 else 1) * 17000 + (if b0008 then 0 else 1) * 17000 + (if b0010 then 0 else 1) * 17000 + (if b0012 then 0 else 1) * 17000 + (if b0013 then 0 else 1) * 17000 + (if b0014 then 0 else 1) * 17000 + (if b0019 then 0 else 1) * 17000 + (if b0020 then 0 else 1) * 17000 + (if b0023 then 0 else 1) * 17000 + (if b0025 then 0 else 1) * 17000 + (if b0026 then 0 else 1) * 17000 + (if b0027 then 0 else 1) * 17000 + (if b0034 then 0 else 1) * 17000 + (if b0035 then 0 else 1) * 17000 + (if b0036 then 0 else 1) * 17000 + (if b0037 then 0 else 1) * 17000 + (if b0038 then 0 else 1) * 17000 + (if b0039 then 0 else 1) * 17000 + (if b0040 then 0 else 1) * 17000 + (if b0041 then 0 else 1) * 17000 + (if b0042 then 0 else 1) * 17000 + (if b0043 then 0 else 1) * 17000 < 441
}
Prover Time taken = 1.128936
Prover time = 7.58
Number of prover queries = 7
Learner time = 0.73
Number of learner queries = 6
Total time: 8.50
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:10
verified

Boogie program verifier finished with 1 verified, 0 errors
1.35user 1.57system 0:09.98elapsed 29%CPU (0avgtext+0avgdata 58480maxresident)k
0inputs+256outputs (1major+32375minor)pagefaults 0swaps
FILE:polybench/stencils/fdtd-2d/kernel3.bpl.ice2.bpl
#################
Tue Apr 27 21:54:45 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 68
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.175908
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1180880
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0002 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0004 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0027 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 4.48794
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 => 6
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 7
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 8
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1218880
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0027 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 5.237108
Added Horn clause: 0 && 0 && 0 && 0 && 7 => 10
Added Horn clause: 0 && 0 && 1 => 11
Added Horn clause: 0 => 12
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 13 => 14
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1209120
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 3.999611
Added Horn clause: 0 && 0 && 1 && 0 && 11 => 15
Added Horn clause: 0 && 0 && 0 && 0 && 7 && 0 && 5 => 16
Added Horn clause: 0 && 0 && 12 => 17
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1267660
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 4.989134
Added Horn clause: 0 && 0 && 1 && 0 && 11 && 0 && 18 => 19
Added Horn clause: 0 && 0 && 0 && 0 && 2 => 20
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1199720
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 4.580979
Added Horn clause: 0 && 0 && 0 && 0 && 2 && 0 && 21 => 22
Added Horn clause: 0 && 0 && 12 && 0 && 23 => 24
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1214070
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 4.908474
Added Horn clause: 0 && 0 && 12 && 0 && 17 && 0 && 25 => 26
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1187890
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 3.391683
Prover time = 31.77
Number of prover queries = 8
Learner time = 0.85
Number of learner queries = 7
Total time: 32.92
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:21
verified

Boogie program verifier finished with 1 verified, 0 errors
2.66user 1.86system 0:34.81elapsed 13%CPU (0avgtext+0avgdata 77416maxresident)k
0inputs+360outputs (1major+59029minor)pagefaults 0swaps
FILE:polybench/stencils/heat-3d/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:55:20 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 68
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.18288
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1237080
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0002 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0004 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0009 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0011 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0015 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0017 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0020 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0022 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0027 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0029 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0032 then 0 else 1) * 27000 + (if b0033 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0035 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0047 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0049 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0058 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 4.709045
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 1
Added Horn clause: 0 && 0 && 0 => 2
Added Horn clause: 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 5
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 6
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 => 7
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 8
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1215780
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0016 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0026 then 0 else 1) * 27000 + (if b0027 then 0 else 1) * 27000 + (if b0028 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0042 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0046 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 4.529969
Added Horn clause: 1 => 10
Added Horn clause: 1 && 0 && 0 && 0 && 2 => 11
Added Horn clause: 0 && 0 && 3 => 12
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 8 => 13
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1195080
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0027 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0039 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0041 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0056 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 4.262252
Added Horn clause: 0 && 0 && 3 && 0 && 12 => 14
Added Horn clause: 0 && 0 && 10 => 15
Added Horn clause: 0 && 0 && 0 && 0 && 16 && 0 && 17 => 18
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1226130
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0040 then 0 else 1) * 27000 + (if b0043 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0053 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 3.807861
Added Horn clause: 1 && 0 && 10 && 0 && 19 => 20
Added Horn clause: 0 && 0 && 21 && 0 && 22 && 0 && 23 => 24
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1207680
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0057 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 3.872882
Added Horn clause: 0 && 0 && 5 && 0 && 2 && 0 && 25 => 26
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1253780
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0054 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 4.020694
Added Horn clause: 0 && 0 && 10 && 0 && 15 && 0 && 27 => 28
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1208040
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0055 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 4.025352
Added Horn clause: 0 && 0 && 3 && 0 && 29 && 0 && 30 => 31
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/heat-3d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1204270
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 27000 + (if b0001 then 0 else 1) * 27000 + (if b0003 then 0 else 1) * 27000 + (if b0005 then 0 else 1) * 27000 + (if b0006 then 0 else 1) * 27000 + (if b0007 then 0 else 1) * 27000 + (if b0008 then 0 else 1) * 27000 + (if b0010 then 0 else 1) * 27000 + (if b0012 then 0 else 1) * 27000 + (if b0013 then 0 else 1) * 27000 + (if b0014 then 0 else 1) * 27000 + (if b0018 then 0 else 1) * 27000 + (if b0019 then 0 else 1) * 27000 + (if b0021 then 0 else 1) * 27000 + (if b0023 then 0 else 1) * 27000 + (if b0024 then 0 else 1) * 27000 + (if b0025 then 0 else 1) * 27000 + (if b0030 then 0 else 1) * 27000 + (if b0031 then 0 else 1) * 27000 + (if b0034 then 0 else 1) * 27000 + (if b0036 then 0 else 1) * 27000 + (if b0037 then 0 else 1) * 27000 + (if b0038 then 0 else 1) * 27000 + (if b0044 then 0 else 1) * 27000 + (if b0045 then 0 else 1) * 27000 + (if b0048 then 0 else 1) * 27000 + (if b0050 then 0 else 1) * 27000 + (if b0051 then 0 else 1) * 27000 + (if b0052 then 0 else 1) * 27000 + (if b0059 then 0 else 1) * 27000 + (if b0060 then 0 else 1) * 27000 + (if b0061 then 0 else 1) * 27000 + (if b0062 then 0 else 1) * 27000 + (if b0063 then 0 else 1) * 27000 + (if b0064 then 0 else 1) * 27000 + (if b0065 then 0 else 1) * 27000 + (if b0066 then 0 else 1) * 27000 + (if b0067 then 0 else 1) * 27000 < 441
}
Prover Time taken = 4.248907
Prover time = 33.66
Number of prover queries = 9
Learner time = 0.97
Number of learner queries = 8
Total time: 34.98
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:21
verified

Boogie program verifier finished with 1 verified, 0 errors
2.79user 1.96system 0:36.88elapsed 12%CPU (0avgtext+0avgdata 78964maxresident)k
0inputs+416outputs (1major+62926minor)pagefaults 0swaps
FILE:polybench/stencils/heat-3d/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:55:57 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-1d/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-1d/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.167677
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-1d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1194240
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.220513
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-1d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1219490
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.390928
Prover time = 0.78
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 1.10
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.76user 1.07system 0:02.42elapsed 75%CPU (0avgtext+0avgdata 44136maxresident)k
0inputs+104outputs (1major+14443minor)pagefaults 0swaps
FILE:polybench/stencils/jacobi-1d/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:55:59 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-1d/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-1d/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 8
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.178162
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-1d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1189480
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.256264
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-1d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1175350
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.495447
Prover time = 0.93
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 1.25
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.79user 1.09system 0:02.60elapsed 72%CPU (0avgtext+0avgdata 44176maxresident)k
0inputs+96outputs (1major+14571minor)pagefaults 0swaps
FILE:polybench/stencils/jacobi-1d/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:56:02 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel0.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel0.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 36
Generating VC of $kernel0
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171984
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1176150
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0020 then 0 else 1) * 14000 + (if b0021 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0023 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0027 then 0 else 1) * 14000 + (if b0028 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 + (if b0035 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.741354
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1195680
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0027 then 0 else 1) * 14000 + (if b0028 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 + (if b0035 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.695889
Added Horn clause: 0 && 0 && 1 => 6
Added Horn clause: 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1193140
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 + (if b0035 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.663128
Added Horn clause: 0 && 0 && 7 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel0.bpl.ice2.bpl
Total learner time was 00:00:00.1209820
Verifying $kernel0: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 + (if b0035 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.754272
Prover time = 7.03
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 7.64
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
1.18user 1.37system 0:09.15elapsed 27%CPU (0avgtext+0avgdata 57856maxresident)k
0inputs+176outputs (1major+28443minor)pagefaults 0swaps
FILE:polybench/stencils/jacobi-2d/kernel0.bpl.ice2.bpl
#################
Tue Apr 27 21:56:11 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel1.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel1.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 36
Generating VC of $kernel1
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.175588
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1206890
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0002 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0004 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0009 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0011 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0015 then 0 else 1) * 14000 + (if b0016 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0020 then 0 else 1) * 14000 + (if b0021 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0023 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0027 then 0 else 1) * 14000 + (if b0028 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0030 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 + (if b0035 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.682792
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1187140
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0017 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0020 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0027 then 0 else 1) * 14000 + (if b0028 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 + (if b0035 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.618222
Added Horn clause: 0 && 0 && 1 => 6
Added Horn clause: 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1202810
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0020 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 + (if b0035 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.50436
Added Horn clause: 0 && 0 && 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1177510
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0029 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 + (if b0035 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.732463
Added Horn clause: 0 && 0 && 7 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/polybench/stencils/jacobi-2d/kernel1.bpl.ice2.bpl
Total learner time was 00:00:00.1188720
Verifying $kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 14000 + (if b0001 then 0 else 1) * 14000 + (if b0003 then 0 else 1) * 14000 + (if b0005 then 0 else 1) * 14000 + (if b0006 then 0 else 1) * 14000 + (if b0007 then 0 else 1) * 14000 + (if b0008 then 0 else 1) * 14000 + (if b0010 then 0 else 1) * 14000 + (if b0012 then 0 else 1) * 14000 + (if b0013 then 0 else 1) * 14000 + (if b0014 then 0 else 1) * 14000 + (if b0018 then 0 else 1) * 14000 + (if b0019 then 0 else 1) * 14000 + (if b0022 then 0 else 1) * 14000 + (if b0024 then 0 else 1) * 14000 + (if b0025 then 0 else 1) * 14000 + (if b0026 then 0 else 1) * 14000 + (if b0031 then 0 else 1) * 14000 + (if b0032 then 0 else 1) * 14000 + (if b0033 then 0 else 1) * 14000 + (if b0034 then 0 else 1) * 14000 + (if b0035 then 0 else 1) * 14000 < 441
}
Prover Time taken = 1.316665
Prover time = 8.03
Number of prover queries = 6
Learner time = 0.60
Number of learner queries = 5
Total time: 8.78
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:9
verified

Boogie program verifier finished with 1 verified, 0 errors
1.20user 1.50system 0:10.23elapsed 26%CPU (0avgtext+0avgdata 57944maxresident)k
0inputs+224outputs (1major+30471minor)pagefaults 0swaps
FILE:polybench/stencils/jacobi-2d/kernel1.bpl.ice2.bpl
#################
Tue Apr 27 21:56:21 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/backprop/bpnn_layerforward/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/backprop/bpnn_layerforward/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $bpnn_layerforward_ocl
Verifying $bpnn_layerforward_ocl: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.216783
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/backprop/bpnn_layerforward/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199530
Verifying $bpnn_layerforward_ocl: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.409248
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/backprop/bpnn_layerforward/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1192060
Verifying $bpnn_layerforward_ocl: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.545975
Prover time = 2.17
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 2.49
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.82user 1.10system 0:03.86elapsed 49%CPU (0avgtext+0avgdata 46884maxresident)k
0inputs+96outputs (1major+16860minor)pagefaults 0swaps
FILE:rodinia_2.4/backprop/bpnn_layerforward/kernel.bpl.ice2.bpl
#################
Tue Apr 27 21:56:25 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/cfd/initialize_variables/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/cfd/initialize_variables/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $initialize_variables
Verifying $initialize_variables: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.169521
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/cfd/initialize_variables/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1177220
Verifying $initialize_variables: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.212684
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/cfd/initialize_variables/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1170700
Verifying $initialize_variables: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.5562
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/cfd/initialize_variables/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1233440
Verifying $initialize_variables: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.742622
Prover time = 1.68
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 2.13
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.80user 1.14system 0:03.42elapsed 56%CPU (0avgtext+0avgdata 43280maxresident)k
0inputs+136outputs (1major+14664minor)pagefaults 0swaps
FILE:rodinia_2.4/cfd/initialize_variables/kernel.bpl.ice2.bpl
#################
Tue Apr 27 21:56:29 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/kmeans/kmeans_swap/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/kmeans/kmeans_swap/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 13
Generating VC of $kmeans_swap
Verifying $kmeans_swap: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168493
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/kmeans/kmeans_swap/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1171180
Verifying $kmeans_swap: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0001 then 0 else 1) * 5000 + (if b0002 then 0 else 1) * 5000 + (if b0003 then 0 else 1) * 5000 + (if b0004 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0006 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0008 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 < 441
}
Prover Time taken = 0.170308
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/kmeans/kmeans_swap/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184080
Verifying $kmeans_swap: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0002 then 0 else 1) * 5000 + (if b0004 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0006 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0008 then 0 else 1) * 5000 + (if b0009 then 0 else 1) * 5000 + (if b0010 then 0 else 1) * 5000 + (if b0011 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 < 441
}
Prover Time taken = 2.080178
Added Horn clause: 0 && 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/kmeans/kmeans_swap/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1209570
Verifying $kmeans_swap: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 5000 + (if b0002 then 0 else 1) * 5000 + (if b0004 then 0 else 1) * 5000 + (if b0005 then 0 else 1) * 5000 + (if b0006 then 0 else 1) * 5000 + (if b0007 then 0 else 1) * 5000 + (if b0008 then 0 else 1) * 5000 + (if b0012 then 0 else 1) * 5000 < 441
}
Prover Time taken = 3.076062
Prover time = 5.50
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 5.95
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.20system 0:07.25elapsed 27%CPU (0avgtext+0avgdata 43388maxresident)k
0inputs+144outputs (1major+15205minor)pagefaults 0swaps
FILE:rodinia_2.4/kmeans/kmeans_swap/kernel.bpl.ice2.bpl
#################
Tue Apr 27 21:56:36 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_diagonal/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_diagonal/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 54
Generating VC of $lud_diagonal
Verifying $lud_diagonal: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.173087
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_diagonal/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1224410
Verifying $lud_diagonal: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 21000 + (if b0001 then 0 else 1) * 21000 + (if b0002 then 0 else 1) * 21000 + (if b0003 then 0 else 1) * 21000 + (if b0004 then 0 else 1) * 21000 + (if b0005 then 0 else 1) * 21000 + (if b0006 then 0 else 1) * 21000 + (if b0007 then 0 else 1) * 21000 + (if b0008 then 0 else 1) * 21000 + (if b0009 then 0 else 1) * 21000 + (if b0010 then 0 else 1) * 21000 + (if b0011 then 0 else 1) * 21000 + (if b0012 then 0 else 1) * 21000 + (if b0013 then 0 else 1) * 21000 + (if b0014 then 0 else 1) * 21000 + (if b0015 then 0 else 1) * 21000 + (if b0016 then 0 else 1) * 21000 + (if b0017 then 0 else 1) * 21000 + (if b0018 then 0 else 1) * 21000 + (if b0019 then 0 else 1) * 21000 + (if b0020 then 0 else 1) * 21000 + (if b0021 then 0 else 1) * 21000 + (if b0022 then 0 else 1) * 21000 + (if b0023 then 0 else 1) * 21000 + (if b0024 then 0 else 1) * 21000 + (if b0025 then 0 else 1) * 21000 + (if b0026 then 0 else 1) * 21000 + (if b0027 then 0 else 1) * 21000 + (if b0028 then 0 else 1) * 21000 + (if b0029 then 0 else 1) * 21000 + (if b0030 then 0 else 1) * 21000 + (if b0031 then 0 else 1) * 21000 + (if b0032 then 0 else 1) * 21000 + (if b0033 then 0 else 1) * 21000 + (if b0034 then 0 else 1) * 21000 + (if b0035 then 0 else 1) * 21000 + (if b0036 then 0 else 1) * 21000 + (if b0037 then 0 else 1) * 21000 + (if b0038 then 0 else 1) * 21000 + (if b0039 then 0 else 1) * 21000 + (if b0040 then 0 else 1) * 21000 + (if b0041 then 0 else 1) * 21000 + (if b0042 then 0 else 1) * 21000 + (if b0043 then 0 else 1) * 21000 + (if b0044 then 0 else 1) * 21000 + (if b0045 then 0 else 1) * 21000 + (if b0046 then 0 else 1) * 21000 + (if b0047 then 0 else 1) * 21000 + (if b0048 then 0 else 1) * 21000 + (if b0049 then 0 else 1) * 21000 + (if b0050 then 0 else 1) * 21000 + (if b0051 then 0 else 1) * 21000 + (if b0052 then 0 else 1) * 21000 + (if b0053 then 0 else 1) * 21000 < 441
}
Prover Time taken = 0.642349
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_diagonal/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202630
Verifying $lud_diagonal: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 21000 + (if b0001 then 0 else 1) * 21000 + (if b0003 then 0 else 1) * 21000 + (if b0005 then 0 else 1) * 21000 + (if b0006 then 0 else 1) * 21000 + (if b0007 then 0 else 1) * 21000 + (if b0008 then 0 else 1) * 21000 + (if b0009 then 0 else 1) * 21000 + (if b0010 then 0 else 1) * 21000 + (if b0011 then 0 else 1) * 21000 + (if b0012 then 0 else 1) * 21000 + (if b0013 then 0 else 1) * 21000 + (if b0014 then 0 else 1) * 21000 + (if b0015 then 0 else 1) * 21000 + (if b0016 then 0 else 1) * 21000 + (if b0017 then 0 else 1) * 21000 + (if b0018 then 0 else 1) * 21000 + (if b0019 then 0 else 1) * 21000 + (if b0020 then 0 else 1) * 21000 + (if b0021 then 0 else 1) * 21000 + (if b0022 then 0 else 1) * 21000 + (if b0023 then 0 else 1) * 21000 + (if b0024 then 0 else 1) * 21000 + (if b0025 then 0 else 1) * 21000 + (if b0026 then 0 else 1) * 21000 + (if b0027 then 0 else 1) * 21000 + (if b0028 then 0 else 1) * 21000 + (if b0029 then 0 else 1) * 21000 + (if b0030 then 0 else 1) * 21000 + (if b0031 then 0 else 1) * 21000 + (if b0032 then 0 else 1) * 21000 + (if b0033 then 0 else 1) * 21000 + (if b0034 then 0 else 1) * 21000 + (if b0035 then 0 else 1) * 21000 + (if b0036 then 0 else 1) * 21000 + (if b0037 then 0 else 1) * 21000 + (if b0038 then 0 else 1) * 21000 + (if b0039 then 0 else 1) * 21000 + (if b0040 then 0 else 1) * 21000 + (if b0041 then 0 else 1) * 21000 + (if b0042 then 0 else 1) * 21000 + (if b0043 then 0 else 1) * 21000 + (if b0044 then 0 else 1) * 21000 + (if b0045 then 0 else 1) * 21000 + (if b0046 then 0 else 1) * 21000 + (if b0047 then 0 else 1) * 21000 + (if b0048 then 0 else 1) * 21000 + (if b0049 then 0 else 1) * 21000 + (if b0050 then 0 else 1) * 21000 + (if b0051 then 0 else 1) * 21000 + (if b0052 then 0 else 1) * 21000 + (if b0053 then 0 else 1) * 21000 < 441
}
Prover Time taken = 1.322963
Added Horn clause: 1 && 0 && 0 && 0 && 0 && 0 => 2
Added Horn clause: 1 && 0 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 1 && 0 && 0 && 0 && 0 && 0 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_diagonal/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193660
Verifying $lud_diagonal: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 21000 + (if b0001 then 0 else 1) * 21000 + (if b0003 then 0 else 1) * 21000 + (if b0005 then 0 else 1) * 21000 + (if b0006 then 0 else 1) * 21000 + (if b0008 then 0 else 1) * 21000 + (if b0010 then 0 else 1) * 21000 + (if b0011 then 0 else 1) * 21000 + (if b0012 then 0 else 1) * 21000 + (if b0013 then 0 else 1) * 21000 + (if b0014 then 0 else 1) * 21000 + (if b0015 then 0 else 1) * 21000 + (if b0016 then 0 else 1) * 21000 + (if b0017 then 0 else 1) * 21000 + (if b0019 then 0 else 1) * 21000 + (if b0021 then 0 else 1) * 21000 + (if b0022 then 0 else 1) * 21000 + (if b0023 then 0 else 1) * 21000 + (if b0024 then 0 else 1) * 21000 + (if b0025 then 0 else 1) * 21000 + (if b0026 then 0 else 1) * 21000 + (if b0027 then 0 else 1) * 21000 + (if b0028 then 0 else 1) * 21000 + (if b0029 then 0 else 1) * 21000 + (if b0030 then 0 else 1) * 21000 + (if b0031 then 0 else 1) * 21000 + (if b0032 then 0 else 1) * 21000 + (if b0033 then 0 else 1) * 21000 + (if b0034 then 0 else 1) * 21000 + (if b0035 then 0 else 1) * 21000 + (if b0036 then 0 else 1) * 21000 + (if b0037 then 0 else 1) * 21000 + (if b0038 then 0 else 1) * 21000 + (if b0039 then 0 else 1) * 21000 + (if b0040 then 0 else 1) * 21000 + (if b0041 then 0 else 1) * 21000 + (if b0042 then 0 else 1) * 21000 + (if b0043 then 0 else 1) * 21000 + (if b0044 then 0 else 1) * 21000 + (if b0045 then 0 else 1) * 21000 + (if b0046 then 0 else 1) * 21000 + (if b0047 then 0 else 1) * 21000 + (if b0048 then 0 else 1) * 21000 + (if b0049 then 0 else 1) * 21000 + (if b0051 then 0 else 1) * 21000 + (if b0052 then 0 else 1) * 21000 + (if b0053 then 0 else 1) * 21000 < 441
}
Prover Time taken = 3.790421
Added Horn clause: 1 && 2 && 0 && 0 => 5
Added Horn clause: 1 && 2 && 0 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_diagonal/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1222300
Verifying $lud_diagonal: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 21000 + (if b0001 then 0 else 1) * 21000 + (if b0003 then 0 else 1) * 21000 + (if b0005 then 0 else 1) * 21000 + (if b0006 then 0 else 1) * 21000 + (if b0008 then 0 else 1) * 21000 + (if b0010 then 0 else 1) * 21000 + (if b0011 then 0 else 1) * 21000 + (if b0012 then 0 else 1) * 21000 + (if b0014 then 0 else 1) * 21000 + (if b0016 then 0 else 1) * 21000 + (if b0017 then 0 else 1) * 21000 + (if b0019 then 0 else 1) * 21000 + (if b0021 then 0 else 1) * 21000 + (if b0022 then 0 else 1) * 21000 + (if b0023 then 0 else 1) * 21000 + (if b0024 then 0 else 1) * 21000 + (if b0025 then 0 else 1) * 21000 + (if b0026 then 0 else 1) * 21000 + (if b0027 then 0 else 1) * 21000 + (if b0028 then 0 else 1) * 21000 + (if b0030 then 0 else 1) * 21000 + (if b0032 then 0 else 1) * 21000 + (if b0033 then 0 else 1) * 21000 + (if b0034 then 0 else 1) * 21000 + (if b0035 then 0 else 1) * 21000 + (if b0036 then 0 else 1) * 21000 + (if b0037 then 0 else 1) * 21000 + (if b0038 then 0 else 1) * 21000 + (if b0039 then 0 else 1) * 21000 + (if b0040 then 0 else 1) * 21000 + (if b0041 then 0 else 1) * 21000 + (if b0042 then 0 else 1) * 21000 + (if b0043 then 0 else 1) * 21000 + (if b0044 then 0 else 1) * 21000 + (if b0045 then 0 else 1) * 21000 + (if b0046 then 0 else 1) * 21000 + (if b0047 then 0 else 1) * 21000 + (if b0048 then 0 else 1) * 21000 + (if b0049 then 0 else 1) * 21000 + (if b0051 then 0 else 1) * 21000 + (if b0052 then 0 else 1) * 21000 + (if b0053 then 0 else 1) * 21000 < 441
}
Prover Time taken = 2.226636
Prover time = 8.16
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 8.82
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
1.16user 1.36system 0:10.21elapsed 24%CPU (0avgtext+0avgdata 57836maxresident)k
0inputs+208outputs (1major+26619minor)pagefaults 0swaps
FILE:rodinia_2.4/lud/lud_diagonal/kernel.bpl.ice2.bpl
#################
Tue Apr 27 21:56:46 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_internal/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_internal/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 5
Generating VC of $lud_internal
Verifying $lud_internal: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1: positive
Prover Time taken = 0.195793
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_internal/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1168230
Verifying $lud_internal: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0001 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0003 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.0687
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_internal/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186300
Verifying $lud_internal: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 2000 + (if b0002 then 0 else 1) * 2000 + (if b0004 then 0 else 1) * 2000 < 441
}
Prover Time taken = 0.067117
Prover time = 0.33
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.64
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.78user 1.06system 0:01.97elapsed 93%CPU (0avgtext+0avgdata 44128maxresident)k
0inputs+96outputs (1major+14744minor)pagefaults 0swaps
FILE:rodinia_2.4/lud/lud_internal/kernel.bpl.ice2.bpl
#################
Tue Apr 27 21:56:48 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_perimeter/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_perimeter/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 135
Generating VC of $lud_perimeter
Verifying $lud_perimeter: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.17095
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_perimeter/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179010
Verifying $lud_perimeter: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0002 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0004 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0009 then 0 else 1) * 54000 + (if b0010 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0012 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0014 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0032 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0042 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0044 then 0 else 1) * 54000 + (if b0045 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0047 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0064 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0066 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0071 then 0 else 1) * 54000 + (if b0072 then 0 else 1) * 54000 + (if b0073 then 0 else 1) * 54000 + (if b0074 then 0 else 1) * 54000 + (if b0075 then 0 else 1) * 54000 + (if b0076 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0088 then 0 else 1) * 54000 + (if b0089 then 0 else 1) * 54000 + (if b0090 then 0 else 1) * 54000 + (if b0091 then 0 else 1) * 54000 + (if b0092 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0098 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0100 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0103 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0109 then 0 else 1) * 54000 + (if b0110 then 0 else 1) * 54000 + (if b0111 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 24.210084
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 && 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 && 0 && 0 => 3
Added Horn clause: 0 && 0 => 4
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 => 5
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 6
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 7
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 8
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 9
Added Horn clause: 0 && 0 && 0 && 0 => 10
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_perimeter/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1229090
Verifying $lud_perimeter: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0010 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0032 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0045 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0047 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0071 then 0 else 1) * 54000 + (if b0072 then 0 else 1) * 54000 + (if b0073 then 0 else 1) * 54000 + (if b0075 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0089 then 0 else 1) * 54000 + (if b0091 then 0 else 1) * 54000 + (if b0092 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0103 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0109 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 21.11282
Added Horn clause: 0 && 1 && 3 && 0 => 11
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 8 => 12
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 13
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 14
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 6 => 15
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 16
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_perimeter/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1220840
Verifying $lud_perimeter: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0010 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0045 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0047 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0071 then 0 else 1) * 54000 + (if b0072 then 0 else 1) * 54000 + (if b0073 then 0 else 1) * 54000 + (if b0075 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0089 then 0 else 1) * 54000 + (if b0091 then 0 else 1) * 54000 + (if b0092 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0103 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0109 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 23.653767
Added Horn clause: 0 && 0 && 3 && 0 && 0 && 11 => 17
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 18
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 13 && 0 && 0 => 19
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 15 && 0 => 20
Added Horn clause: 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 && 0 => 21
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/lud/lud_perimeter/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1263650
Verifying $lud_perimeter: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0010 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0045 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0047 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0071 then 0 else 1) * 54000 + (if b0072 then 0 else 1) * 54000 + (if b0073 then 0 else 1) * 54000 + (if b0075 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0089 then 0 else 1) * 54000 + (if b0091 then 0 else 1) * 54000 + (if b0092 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0103 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0109 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 5.928842
Prover time = 75.08
Number of prover queries = 5
Learner time = 0.49
Number of learner queries = 4
Total time: 76.05
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:21
verified

Boogie program verifier finished with 1 verified, 0 errors
2.67user 1.95system 1:17.55elapsed 5%CPU (0avgtext+0avgdata 80000maxresident)k
0inputs+272outputs (1major+55687minor)pagefaults 0swaps
FILE:rodinia_2.4/lud/lud_perimeter/kernel.bpl.ice2.bpl
#################
Tue Apr 27 21:58:06 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw1/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw1/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 29
Generating VC of $nw_kernel1
Verifying $nw_kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.197454
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1234200
Verifying $nw_kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 2.431556
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197160
Verifying $nw_kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 3.386787
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1182050
Verifying $nw_kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 5.52159
Added Horn clause: 1 && 2 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1226780
Verifying $nw_kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 5.769332
Added Horn clause: 1 && 2 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1353510
Verifying $nw_kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 10.068063
Added Horn clause: 1 && 2 && 4 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1190860
Verifying $nw_kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 8.957798
Added Horn clause: 1 && 2 && 4 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw1/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1176140
Verifying $nw_kernel1: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 5.381457
Prover time = 41.71
Number of prover queries = 8
Learner time = 0.86
Number of learner queries = 7
Total time: 42.69
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
1.32user 1.67system 0:44.09elapsed 6%CPU (0avgtext+0avgdata 57532maxresident)k
0inputs+304outputs (1major+31114minor)pagefaults 0swaps
FILE:rodinia_2.4/nw/nw1/kernel.bpl.ice2.bpl
#################
Tue Apr 27 21:58:50 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw2/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw2/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 29
Generating VC of $nw_kernel2
Verifying $nw_kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.188291
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1238190
Verifying $nw_kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 2.708734
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193320
Verifying $nw_kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 2.367421
Added Horn clause: 1 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1201320
Verifying $nw_kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0010 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 3.594947
Added Horn clause: 1 && 2 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1190790
Verifying $nw_kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 3.153653
Added Horn clause: 1 && 2 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1198200
Verifying $nw_kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 7.557977
Added Horn clause: 1 && 2 && 4 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1203330
Verifying $nw_kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 7.621682
Added Horn clause: 1 && 2 && 4 && 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/nw/nw2/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202410
Verifying $nw_kernel2: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 < 441
}
Prover Time taken = 4.905176
Prover time = 32.10
Number of prover queries = 8
Learner time = 0.84
Number of learner queries = 7
Total time: 33.09
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:6
verified

Boogie program verifier finished with 1 verified, 0 errors
1.23user 1.66system 0:34.49elapsed 8%CPU (0avgtext+0avgdata 57732maxresident)k
0inputs+304outputs (1major+31442minor)pagefaults 0swaps
FILE:rodinia_2.4/nw/nw2/kernel.bpl.ice2.bpl
#################
Tue Apr 27 21:59:24 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/particlefilter/sum_single/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/particlefilter/sum_single/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 9
Generating VC of $sum_kernel
Verifying $sum_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.165314
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/particlefilter/sum_single/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1172800
Verifying $sum_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0001 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0003 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.044792
Added Horn clause: 0 && 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/particlefilter/sum_single/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1179450
Verifying $sum_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 3000 + (if b0002 then 0 else 1) * 3000 + (if b0004 then 0 else 1) * 3000 + (if b0005 then 0 else 1) * 3000 + (if b0006 then 0 else 1) * 3000 + (if b0007 then 0 else 1) * 3000 + (if b0008 then 0 else 1) * 3000 < 441
}
Prover Time taken = 0.017639
Prover time = 0.23
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.55
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.74user 1.08system 0:01.85elapsed 98%CPU (0avgtext+0avgdata 43448maxresident)k
0inputs+96outputs (1major+13853minor)pagefaults 0swaps
FILE:rodinia_2.4/particlefilter/sum_single/kernel.bpl.ice2.bpl
#################
Tue Apr 27 21:59:26 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 135
Generating VC of $reduce_kernel
Verifying $reduce_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.199406
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186640
Verifying $reduce_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0002 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0004 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0009 then 0 else 1) * 54000 + (if b0010 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0012 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0014 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0032 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0042 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0044 then 0 else 1) * 54000 + (if b0045 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0047 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0064 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0066 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0071 then 0 else 1) * 54000 + (if b0072 then 0 else 1) * 54000 + (if b0073 then 0 else 1) * 54000 + (if b0074 then 0 else 1) * 54000 + (if b0075 then 0 else 1) * 54000 + (if b0076 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0088 then 0 else 1) * 54000 + (if b0089 then 0 else 1) * 54000 + (if b0090 then 0 else 1) * 54000 + (if b0091 then 0 else 1) * 54000 + (if b0092 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0098 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0100 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0103 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0109 then 0 else 1) * 54000 + (if b0110 then 0 else 1) * 54000 + (if b0111 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 14.392319
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1238360
Verifying $reduce_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0002 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0004 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0009 then 0 else 1) * 54000 + (if b0010 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0012 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0014 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0032 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0042 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0044 then 0 else 1) * 54000 + (if b0045 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0047 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0064 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0066 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0071 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0088 then 0 else 1) * 54000 + (if b0089 then 0 else 1) * 54000 + (if b0090 then 0 else 1) * 54000 + (if b0091 then 0 else 1) * 54000 + (if b0092 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0098 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0100 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0103 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0109 then 0 else 1) * 54000 + (if b0110 then 0 else 1) * 54000 + (if b0111 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 8.727196
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196730
Verifying $reduce_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0002 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0004 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0009 then 0 else 1) * 54000 + (if b0010 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0012 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0014 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0032 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0042 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0044 then 0 else 1) * 54000 + (if b0045 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0047 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0064 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0066 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0088 then 0 else 1) * 54000 + (if b0089 then 0 else 1) * 54000 + (if b0090 then 0 else 1) * 54000 + (if b0091 then 0 else 1) * 54000 + (if b0092 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0098 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0100 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0103 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0109 then 0 else 1) * 54000 + (if b0110 then 0 else 1) * 54000 + (if b0111 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 7.746226
Added Horn clause: 0 && 0 => 3
Added Horn clause: 4 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1215340
Verifying $reduce_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0002 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0004 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0009 then 0 else 1) * 54000 + (if b0010 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0012 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0014 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0032 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0042 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0044 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0064 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0066 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0088 then 0 else 1) * 54000 + (if b0089 then 0 else 1) * 54000 + (if b0092 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0098 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0100 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0103 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0109 then 0 else 1) * 54000 + (if b0110 then 0 else 1) * 54000 + (if b0111 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 4.260991
Added Horn clause: 0 && 0 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1200320
Verifying $reduce_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0002 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0004 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0009 then 0 else 1) * 54000 + (if b0010 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0012 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0014 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0032 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0042 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0044 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0064 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0066 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0088 then 0 else 1) * 54000 + (if b0092 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0098 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0100 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0103 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0109 then 0 else 1) * 54000 + (if b0110 then 0 else 1) * 54000 + (if b0111 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 5.064821
Added Horn clause: 0 && 0 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1225110
Verifying $reduce_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0002 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0004 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0009 then 0 else 1) * 54000 + (if b0010 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0012 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0014 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0032 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0042 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0044 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0064 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0066 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0088 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0098 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0100 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0103 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0109 then 0 else 1) * 54000 + (if b0110 then 0 else 1) * 54000 + (if b0111 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 6.274843
Added Horn clause: 0 && 0 => 8
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196200
Verifying $reduce_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0002 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0004 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0009 then 0 else 1) * 54000 + (if b0010 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0012 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0014 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0032 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0042 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0044 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0064 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0066 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0088 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0098 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0100 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0110 then 0 else 1) * 54000 + (if b0111 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 6.437867
Added Horn clause: 0 && 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1193530
Verifying $reduce_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0002 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0004 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0009 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0014 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0031 then 0 else 1) * 54000 + (if b0032 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0042 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0044 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0064 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0066 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0088 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0098 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0100 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0110 then 0 else 1) * 54000 + (if b0111 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 5.800003
Added Horn clause: 0 && 0 && 10 && 11 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1199190
Verifying $reduce_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0002 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0004 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0009 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0014 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0025 then 0 else 1) * 54000 + (if b0026 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0042 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0044 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0064 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0066 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0088 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0098 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0100 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0110 then 0 else 1) * 54000 + (if b0111 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 4.602678
Added Horn clause: 0 && 0 && 13 && 14 => 15
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196700
Verifying $reduce_kernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool, b0088: bool, b0089: bool, b0090: bool, b0091: bool, b0092: bool, b0093: bool, b0094: bool, b0095: bool, b0096: bool, b0097: bool, b0098: bool, b0099: bool, b0100: bool, b0101: bool, b0102: bool, b0103: bool, b0104: bool, b0105: bool, b0106: bool, b0107: bool, b0108: bool, b0109: bool, b0110: bool, b0111: bool, b0112: bool, b0113: bool, b0114: bool, b0115: bool, b0116: bool, b0117: bool, b0118: bool, b0119: bool, b0120: bool, b0121: bool, b0122: bool, b0123: bool, b0124: bool, b0125: bool, b0126: bool, b0127: bool, b0128: bool, b0129: bool, b0130: bool, b0131: bool, b0132: bool, b0133: bool, b0134: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 54000 + (if b0001 then 0 else 1) * 54000 + (if b0002 then 0 else 1) * 54000 + (if b0003 then 0 else 1) * 54000 + (if b0004 then 0 else 1) * 54000 + (if b0005 then 0 else 1) * 54000 + (if b0006 then 0 else 1) * 54000 + (if b0007 then 0 else 1) * 54000 + (if b0008 then 0 else 1) * 54000 + (if b0009 then 0 else 1) * 54000 + (if b0011 then 0 else 1) * 54000 + (if b0013 then 0 else 1) * 54000 + (if b0014 then 0 else 1) * 54000 + (if b0015 then 0 else 1) * 54000 + (if b0016 then 0 else 1) * 54000 + (if b0017 then 0 else 1) * 54000 + (if b0018 then 0 else 1) * 54000 + (if b0019 then 0 else 1) * 54000 + (if b0020 then 0 else 1) * 54000 + (if b0021 then 0 else 1) * 54000 + (if b0022 then 0 else 1) * 54000 + (if b0023 then 0 else 1) * 54000 + (if b0024 then 0 else 1) * 54000 + (if b0027 then 0 else 1) * 54000 + (if b0028 then 0 else 1) * 54000 + (if b0029 then 0 else 1) * 54000 + (if b0030 then 0 else 1) * 54000 + (if b0033 then 0 else 1) * 54000 + (if b0034 then 0 else 1) * 54000 + (if b0035 then 0 else 1) * 54000 + (if b0036 then 0 else 1) * 54000 + (if b0037 then 0 else 1) * 54000 + (if b0038 then 0 else 1) * 54000 + (if b0039 then 0 else 1) * 54000 + (if b0040 then 0 else 1) * 54000 + (if b0041 then 0 else 1) * 54000 + (if b0042 then 0 else 1) * 54000 + (if b0043 then 0 else 1) * 54000 + (if b0044 then 0 else 1) * 54000 + (if b0046 then 0 else 1) * 54000 + (if b0048 then 0 else 1) * 54000 + (if b0049 then 0 else 1) * 54000 + (if b0050 then 0 else 1) * 54000 + (if b0051 then 0 else 1) * 54000 + (if b0052 then 0 else 1) * 54000 + (if b0053 then 0 else 1) * 54000 + (if b0054 then 0 else 1) * 54000 + (if b0055 then 0 else 1) * 54000 + (if b0056 then 0 else 1) * 54000 + (if b0057 then 0 else 1) * 54000 + (if b0058 then 0 else 1) * 54000 + (if b0059 then 0 else 1) * 54000 + (if b0060 then 0 else 1) * 54000 + (if b0061 then 0 else 1) * 54000 + (if b0062 then 0 else 1) * 54000 + (if b0063 then 0 else 1) * 54000 + (if b0064 then 0 else 1) * 54000 + (if b0065 then 0 else 1) * 54000 + (if b0066 then 0 else 1) * 54000 + (if b0067 then 0 else 1) * 54000 + (if b0068 then 0 else 1) * 54000 + (if b0069 then 0 else 1) * 54000 + (if b0070 then 0 else 1) * 54000 + (if b0077 then 0 else 1) * 54000 + (if b0078 then 0 else 1) * 54000 + (if b0079 then 0 else 1) * 54000 + (if b0080 then 0 else 1) * 54000 + (if b0081 then 0 else 1) * 54000 + (if b0082 then 0 else 1) * 54000 + (if b0083 then 0 else 1) * 54000 + (if b0084 then 0 else 1) * 54000 + (if b0085 then 0 else 1) * 54000 + (if b0086 then 0 else 1) * 54000 + (if b0087 then 0 else 1) * 54000 + (if b0088 then 0 else 1) * 54000 + (if b0093 then 0 else 1) * 54000 + (if b0094 then 0 else 1) * 54000 + (if b0095 then 0 else 1) * 54000 + (if b0096 then 0 else 1) * 54000 + (if b0097 then 0 else 1) * 54000 + (if b0098 then 0 else 1) * 54000 + (if b0099 then 0 else 1) * 54000 + (if b0100 then 0 else 1) * 54000 + (if b0101 then 0 else 1) * 54000 + (if b0102 then 0 else 1) * 54000 + (if b0104 then 0 else 1) * 54000 + (if b0105 then 0 else 1) * 54000 + (if b0106 then 0 else 1) * 54000 + (if b0107 then 0 else 1) * 54000 + (if b0108 then 0 else 1) * 54000 + (if b0110 then 0 else 1) * 54000 + (if b0111 then 0 else 1) * 54000 + (if b0112 then 0 else 1) * 54000 + (if b0113 then 0 else 1) * 54000 + (if b0114 then 0 else 1) * 54000 + (if b0115 then 0 else 1) * 54000 + (if b0116 then 0 else 1) * 54000 + (if b0117 then 0 else 1) * 54000 + (if b0118 then 0 else 1) * 54000 + (if b0119 then 0 else 1) * 54000 + (if b0120 then 0 else 1) * 54000 + (if b0121 then 0 else 1) * 54000 + (if b0122 then 0 else 1) * 54000 + (if b0123 then 0 else 1) * 54000 + (if b0124 then 0 else 1) * 54000 + (if b0125 then 0 else 1) * 54000 + (if b0126 then 0 else 1) * 54000 + (if b0127 then 0 else 1) * 54000 + (if b0128 then 0 else 1) * 54000 + (if b0129 then 0 else 1) * 54000 + (if b0130 then 0 else 1) * 54000 + (if b0131 then 0 else 1) * 54000 + (if b0132 then 0 else 1) * 54000 + (if b0133 then 0 else 1) * 54000 + (if b0134 then 0 else 1) * 54000 < 441
}
Prover Time taken = 1.651587
Prover time = 65.16
Number of prover queries = 11
Learner time = 1.20
Number of learner queries = 10
Total time: 67.02
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:8
verified

Boogie program verifier finished with 1 verified, 0 errors
2.77user 2.31system 1:08.53elapsed 7%CPU (0avgtext+0avgdata 77032maxresident)k
0inputs+584outputs (1major+76682minor)pagefaults 0swaps
FILE:rodinia_2.4/srad/reduce/kernel.bpl.ice2.bpl
#################
Tue Apr 27 22:00:35 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/devicememory/readLocalMemory/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/devicememory/readLocalMemory/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 17
Generating VC of $readLocalMemory
Verifying $readLocalMemory: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.168391
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/devicememory/readLocalMemory/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1212760
Verifying $readLocalMemory: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0001 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0003 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0007 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0009 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0013 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0015 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.480629
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 && 0 => 2
Added Horn clause: 0 && 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/devicememory/readLocalMemory/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196980
Verifying $readLocalMemory: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 6000 + (if b0002 then 0 else 1) * 6000 + (if b0004 then 0 else 1) * 6000 + (if b0005 then 0 else 1) * 6000 + (if b0006 then 0 else 1) * 6000 + (if b0008 then 0 else 1) * 6000 + (if b0010 then 0 else 1) * 6000 + (if b0011 then 0 else 1) * 6000 + (if b0012 then 0 else 1) * 6000 + (if b0014 then 0 else 1) * 6000 + (if b0016 then 0 else 1) * 6000 < 441
}
Prover Time taken = 0.195703
Prover time = 0.84
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 1.17
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.83user 1.08system 0:02.52elapsed 76%CPU (0avgtext+0avgdata 46256maxresident)k
0inputs+96outputs (1major+17750minor)pagefaults 0swaps
FILE:shoc/devicememory/readLocalMemory/kernel.bpl.ice2.bpl
#################
Tue Apr 27 22:00:37 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 88
Generating VC of $scan
Verifying $scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.220511
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1216120
Verifying $scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0046 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.438812
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1232380
Verifying $scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0047 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.920526
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1242070
Verifying $scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0002 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0004 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0045 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.861916
Added Horn clause: 0 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1231300
Verifying $scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0012 then 0 else 1) * 35000 + (if b0033 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.059319
Added Horn clause: 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1195470
Verifying $scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0052 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0054 then 0 else 1) * 35000 + (if b0055 then 0 else 1) * 35000 + (if b0056 then 0 else 1) * 35000 + (if b0057 then 0 else 1) * 35000 + (if b0058 then 0 else 1) * 35000 + (if b0059 then 0 else 1) * 35000 + (if b0060 then 0 else 1) * 35000 + (if b0061 then 0 else 1) * 35000 + (if b0062 then 0 else 1) * 35000 + (if b0063 then 0 else 1) * 35000 + (if b0064 then 0 else 1) * 35000 + (if b0065 then 0 else 1) * 35000 + (if b0066 then 0 else 1) * 35000 + (if b0067 then 0 else 1) * 35000 + (if b0068 then 0 else 1) * 35000 + (if b0069 then 0 else 1) * 35000 + (if b0070 then 0 else 1) * 35000 + (if b0071 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0074 then 0 else 1) * 35000 + (if b0075 then 0 else 1) * 35000 + (if b0076 then 0 else 1) * 35000 + (if b0077 then 0 else 1) * 35000 + (if b0078 then 0 else 1) * 35000 + (if b0079 then 0 else 1) * 35000 + (if b0080 then 0 else 1) * 35000 + (if b0081 then 0 else 1) * 35000 + (if b0082 then 0 else 1) * 35000 + (if b0083 then 0 else 1) * 35000 + (if b0084 then 0 else 1) * 35000 + (if b0085 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.460302
Added Horn clause: 5 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1196950
Verifying $scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0005 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0007 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0053 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 5.442655
Added Horn clause: 5 => 7
Added Horn clause: 5 && 8 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1247340
Verifying $scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0086 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.922818
Added Horn clause: 5 && 10 => 11
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1247710
Verifying $scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 + (if b0087 then 0 else 1) * 35000 < 441
}
Prover Time taken = 2.074307
Added Horn clause: 5 && 10 => 12
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1234910
Verifying $scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool, b0033: bool, b0034: bool, b0035: bool, b0036: bool, b0037: bool, b0038: bool, b0039: bool, b0040: bool, b0041: bool, b0042: bool, b0043: bool, b0044: bool, b0045: bool, b0046: bool, b0047: bool, b0048: bool, b0049: bool, b0050: bool, b0051: bool, b0052: bool, b0053: bool, b0054: bool, b0055: bool, b0056: bool, b0057: bool, b0058: bool, b0059: bool, b0060: bool, b0061: bool, b0062: bool, b0063: bool, b0064: bool, b0065: bool, b0066: bool, b0067: bool, b0068: bool, b0069: bool, b0070: bool, b0071: bool, b0072: bool, b0073: bool, b0074: bool, b0075: bool, b0076: bool, b0077: bool, b0078: bool, b0079: bool, b0080: bool, b0081: bool, b0082: bool, b0083: bool, b0084: bool, b0085: bool, b0086: bool, b0087: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 35000 + (if b0001 then 0 else 1) * 35000 + (if b0003 then 0 else 1) * 35000 + (if b0006 then 0 else 1) * 35000 + (if b0008 then 0 else 1) * 35000 + (if b0009 then 0 else 1) * 35000 + (if b0010 then 0 else 1) * 35000 + (if b0011 then 0 else 1) * 35000 + (if b0034 then 0 else 1) * 35000 + (if b0048 then 0 else 1) * 35000 + (if b0049 then 0 else 1) * 35000 + (if b0050 then 0 else 1) * 35000 + (if b0051 then 0 else 1) * 35000 + (if b0072 then 0 else 1) * 35000 + (if b0073 then 0 else 1) * 35000 < 441
}
Prover Time taken = 1.215738
Prover time = 25.62
Number of prover queries = 10
Learner time = 1.10
Number of learner queries = 9
Total time: 26.95
Number of positive examples:3
Number of negative examples:0
Number of Horn clauses:7
verified

Boogie program verifier finished with 1 verified, 0 errors
1.56user 2.00system 0:28.34elapsed 12%CPU (0avgtext+0avgdata 58508maxresident)k
0inputs+440outputs (1major+37133minor)pagefaults 0swaps
FILE:shoc/kernelcompile/scan/kernel.bpl.ice2.bpl
#################
Tue Apr 27 22:01:06 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/reduction/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/reduction/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 18
Generating VC of $reduce
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171959
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/reduction/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186930
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0001 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0003 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0007 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0009 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.286992
Added Horn clause: 0 => 1
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/reduction/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202300
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0002 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0013 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.301248
Added Horn clause: 1 => 3
Added Horn clause: 0 && 2 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/reduction/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1190950
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 7000 + (if b0004 then 0 else 1) * 7000 + (if b0005 then 0 else 1) * 7000 + (if b0006 then 0 else 1) * 7000 + (if b0008 then 0 else 1) * 7000 + (if b0010 then 0 else 1) * 7000 + (if b0011 then 0 else 1) * 7000 + (if b0012 then 0 else 1) * 7000 + (if b0014 then 0 else 1) * 7000 + (if b0015 then 0 else 1) * 7000 + (if b0016 then 0 else 1) * 7000 + (if b0017 then 0 else 1) * 7000 < 441
}
Prover Time taken = 0.164534
Prover time = 0.92
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 1.38
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
0.84user 1.24system 0:02.72elapsed 76%CPU (0avgtext+0avgdata 46404maxresident)k
0inputs+136outputs (1major+17888minor)pagefaults 0swaps
FILE:shoc/reduction/kernel.bpl.ice2.bpl
#################
Tue Apr 27 22:01:08 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/scan/reduce/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/scan/reduce/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $reduce
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.182185
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/scan/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1181750
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.107013
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/scan/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1213780
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.100797
Added Horn clause: 1 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/scan/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1185910
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.042693
Prover time = 0.43
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 0.87
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:2
verified

Boogie program verifier finished with 1 verified, 0 errors
0.85user 1.17system 0:02.23elapsed 91%CPU (0avgtext+0avgdata 44604maxresident)k
0inputs+136outputs (1major+16242minor)pagefaults 0swaps
FILE:shoc/scan/reduce/kernel.bpl.ice2.bpl
#################
Tue Apr 27 22:01:10 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/scan/top_scan/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/scan/top_scan/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 10
Generating VC of $top_scan
Verifying $top_scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.183466
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/scan/top_scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1174720
Verifying $top_scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.07965
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/scan/top_scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1186840
Verifying $top_scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool) : bool
{
  0 + (if b0001 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 < 441
}
Prover Time taken = 0.040485
Prover time = 0.30
Number of prover queries = 3
Learner time = 0.24
Number of learner queries = 2
Total time: 0.59
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:1
verified

Boogie program verifier finished with 1 verified, 0 errors
0.75user 1.11system 0:01.92elapsed 97%CPU (0avgtext+0avgdata 44628maxresident)k
0inputs+96outputs (1major+15679minor)pagefaults 0swaps
FILE:shoc/scan/top_scan/kernel.bpl.ice2.bpl
#################
Tue Apr 27 22:01:12 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/reduce/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/reduce/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 25
Generating VC of $reduce
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 1.807821
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1184780
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0009 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 3.871431
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1197200
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0006 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0008 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 3.301689
Added Horn clause: 0 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1213670
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0020 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 3.42807
Added Horn clause: 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1188020
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0001 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0003 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 3.406585
Added Horn clause: 0 && 4 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1203950
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0011 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0015 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 3.690163
Added Horn clause: 0 && 4 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1202410
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0013 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 3.608518
Added Horn clause: 5 && 4 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/reduce/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1195790
Verifying $reduce: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 10000 + (if b0002 then 0 else 1) * 10000 + (if b0004 then 0 else 1) * 10000 + (if b0005 then 0 else 1) * 10000 + (if b0007 then 0 else 1) * 10000 + (if b0012 then 0 else 1) * 10000 + (if b0014 then 0 else 1) * 10000 + (if b0016 then 0 else 1) * 10000 + (if b0017 then 0 else 1) * 10000 + (if b0018 then 0 else 1) * 10000 + (if b0019 then 0 else 1) * 10000 + (if b0021 then 0 else 1) * 10000 + (if b0022 then 0 else 1) * 10000 + (if b0023 then 0 else 1) * 10000 + (if b0024 then 0 else 1) * 10000 < 441
}
Prover Time taken = 0.066606
Prover time = 23.18
Number of prover queries = 8
Learner time = 0.84
Number of learner queries = 7
Total time: 24.18
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:5
verified

Boogie program verifier finished with 1 verified, 0 errors
1.17user 1.63system 0:25.53elapsed 10%CPU (0avgtext+0avgdata 49580maxresident)k
0inputs+296outputs (1major+25926minor)pagefaults 0swaps
FILE:shoc/sort/reduce/kernel.bpl.ice2.bpl
#################
Tue Apr 27 22:01:38 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/top_scan/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/top_scan/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 29
Generating VC of $top_scan
Verifying $top_scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.179263
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/top_scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1180490
Verifying $top_scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0009 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Added: my_inv:1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.532902
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/top_scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1170990
Verifying $top_scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0005 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0007 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.27524
Added Horn clause: 0 && 2 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/top_scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1224340
Verifying $top_scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0001 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0003 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.333445
Added Horn clause: 0 && 3 => 4
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/top_scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1240600
Verifying $top_scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0012 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.450313
Added Horn clause: 5 && 3 => 6
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/top_scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1189430
Verifying $top_scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0011 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.331137
Added Horn clause: 5 && 3 => 7
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/sort/top_scan/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1227870
Verifying $top_scan: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 11000 + (if b0002 then 0 else 1) * 11000 + (if b0004 then 0 else 1) * 11000 + (if b0006 then 0 else 1) * 11000 + (if b0008 then 0 else 1) * 11000 + (if b0013 then 0 else 1) * 11000 + (if b0014 then 0 else 1) * 11000 + (if b0015 then 0 else 1) * 11000 + (if b0016 then 0 else 1) * 11000 + (if b0017 then 0 else 1) * 11000 + (if b0018 then 0 else 1) * 11000 + (if b0019 then 0 else 1) * 11000 + (if b0020 then 0 else 1) * 11000 + (if b0021 then 0 else 1) * 11000 + (if b0022 then 0 else 1) * 11000 + (if b0023 then 0 else 1) * 11000 + (if b0024 then 0 else 1) * 11000 + (if b0025 then 0 else 1) * 11000 + (if b0026 then 0 else 1) * 11000 + (if b0027 then 0 else 1) * 11000 + (if b0028 then 0 else 1) * 11000 < 441
}
Prover Time taken = 0.143454
Prover time = 2.25
Number of prover queries = 7
Learner time = 0.72
Number of learner queries = 6
Total time: 3.10
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:4
verified

Boogie program verifier finished with 1 verified, 0 errors
1.10user 1.57system 0:04.48elapsed 59%CPU (0avgtext+0avgdata 51420maxresident)k
0inputs+248outputs (1major+26100minor)pagefaults 0swaps
FILE:shoc/sort/top_scan/kernel.bpl.ice2.bpl
#################
Tue Apr 27 22:01:42 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/stencil2d/CopyRect/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/stencil2d/CopyRect/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 11
Generating VC of $CopyRect
Verifying $CopyRect: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.171367
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/stencil2d/CopyRect/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1173700
Verifying $CopyRect: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0001 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0003 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0009 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 1.645349
Added Horn clause: 0 && 0 => 1
Added Horn clause: 0 && 0 => 2
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/stencil2d/CopyRect/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1195370
Verifying $CopyRect: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0008 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 4.616684
Added Horn clause: 0 && 1 => 3
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/stencil2d/CopyRect/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1207300
Verifying $CopyRect: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 4000 + (if b0002 then 0 else 1) * 4000 + (if b0004 then 0 else 1) * 4000 + (if b0005 then 0 else 1) * 4000 + (if b0006 then 0 else 1) * 4000 + (if b0007 then 0 else 1) * 4000 + (if b0010 then 0 else 1) * 4000 < 441
}
Prover Time taken = 2.449512
Prover time = 8.88
Number of prover queries = 4
Learner time = 0.36
Number of learner queries = 3
Total time: 9.34
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:3
verified

Boogie program verifier finished with 1 verified, 0 errors
0.84user 1.18system 0:10.66elapsed 19%CPU (0avgtext+0avgdata 43660maxresident)k
0inputs+136outputs (1major+15057minor)pagefaults 0swaps
FILE:shoc/stencil2d/CopyRect/kernel.bpl.ice2.bpl
#################
Tue Apr 27 22:01:53 UTC 2021
KEY=awinnow
OUTPUT=/root/Docker/winnow_gpu_int_lr114_err10_noreset_wgts.txt
[TRACE] Using prover: /root/Docker/z3/bin/z3
---Command arguments
/nologo
/env:2
/typeEncoding:m
/mv:-
/enhancedErrorMessages:1
/useArrayTheory
/prover:SMTLib
/noinfer
/contractInfer
/trace
/z3exe:/root/Docker/z3/bin/z3
/mlHoudini:sorcar
/learnerOptions:-a winnow
/doNotUseLabels
/z3opt:smt.relevancy=0
/doModSetAnalysis
/proverOpt:OPTIMIZE_FOR_BV=true
/errorLimit:10
/root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/stencil2d/StencilKernel/kernel.bpl.ice2.bpl
--------------------
Parsing /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/stencil2d/StencilKernel/kernel.bpl.ice2.bpl
Coalescing blocks...
[TRACE] Using prover: /root/Docker/z3/bin/z3
#parameters: 33
Generating VC of $StencilKernel
Verifying $StencilKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  false
}
Added: my_inv:1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1: positive
Prover Time taken = 0.170102
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/stencil2d/StencilKernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1173620
Verifying $StencilKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0001 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0003 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0016 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0022 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Prover Time taken = 0.427757
Added Horn clause: 0 => 1
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/stencil2d/StencilKernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1174060
Verifying $StencilKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0006 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0008 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0011 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0013 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0016 then 0 else 1) * 13000 + (if b0017 then 0 else 1) * 13000 + (if b0018 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0020 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0022 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0026 then 0 else 1) * 13000 + (if b0027 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0029 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Prover Time taken = 4.118941
Added Horn clause: 1 && 0 && 0 => 2
Added Horn clause: 1 && 0 && 0 && 0 && 0 => 3
Added Horn clause: 1 && 0 && 0 && 0 && 0 && 0 => 4
Added Horn clause: 1 && 0 && 0 => 5
Added Horn clause: 0 => 6
Added Horn clause: 1 && 0 && 0 => 7
Added Horn clause: 1 => 8
Added Horn clause: 1 && 0 && 0 && 0 && 0 => 5
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/stencil2d/StencilKernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1206230
Verifying $StencilKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0016 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 + (if b0032 then 0 else 1) * 13000 < 441
}
Prover Time taken = 7.191248
Added Horn clause: 1 && 0 && 0 && 0 && 0 && 0 => 9
Calling sorcar -a winnow /root/Docker/benchmarks/BenchmarksCompiled/awinnow/shoc/stencil2d/StencilKernel/kernel.bpl.ice2.bpl
Total learner time was 00:00:00.1198390
Verifying $StencilKernel: 
function {:existential true} {:inline} my_inv(b0000: bool, b0001: bool, b0002: bool, b0003: bool, b0004: bool, b0005: bool, b0006: bool, b0007: bool, b0008: bool, b0009: bool, b0010: bool, b0011: bool, b0012: bool, b0013: bool, b0014: bool, b0015: bool, b0016: bool, b0017: bool, b0018: bool, b0019: bool, b0020: bool, b0021: bool, b0022: bool, b0023: bool, b0024: bool, b0025: bool, b0026: bool, b0027: bool, b0028: bool, b0029: bool, b0030: bool, b0031: bool, b0032: bool) : bool
{
  0 + (if b0000 then 0 else 1) * 13000 + (if b0002 then 0 else 1) * 13000 + (if b0004 then 0 else 1) * 13000 + (if b0005 then 0 else 1) * 13000 + (if b0007 then 0 else 1) * 13000 + (if b0009 then 0 else 1) * 13000 + (if b0010 then 0 else 1) * 13000 + (if b0012 then 0 else 1) * 13000 + (if b0014 then 0 else 1) * 13000 + (if b0015 then 0 else 1) * 13000 + (if b0016 then 0 else 1) * 13000 + (if b0019 then 0 else 1) * 13000 + (if b0021 then 0 else 1) * 13000 + (if b0023 then 0 else 1) * 13000 + (if b0024 then 0 else 1) * 13000 + (if b0025 then 0 else 1) * 13000 + (if b0028 then 0 else 1) * 13000 + (if b0030 then 0 else 1) * 13000 + (if b0031 then 0 else 1) * 13000 < 441
}
Prover Time taken = 31.222249
Prover time = 43.13
Number of prover queries = 5
Learner time = 0.48
Number of learner queries = 4
Total time: 43.73
Number of positive examples:1
Number of negative examples:0
Number of Horn clauses:10
verified

Boogie program verifier finished with 1 verified, 0 errors
1.11user 1.38system 0:45.09elapsed 5%CPU (0avgtext+0avgdata 51932maxresident)k
0inputs+176outputs (1major+23457minor)pagefaults 0swaps
FILE:shoc/stencil2d/StencilKernel/kernel.bpl.ice2.bpl
